// Generated by dart2js (NullSafetyMode.sound, no-legacy-javascript, new-holders), the Dart to JavaScript compiler version: 2.15.0-178.0.dev.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
//
// dartDeferredLibraryLoader(uri, successCallback, errorCallback, loadId):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of `uri`, and call
//    successCallback. If it fails to do so, it should call errorCallback with
//    an error. The loadId argument is the deferred import that resulted in
//    this uri being loaded.
//
// dartCallInstrumentation(id, qualifiedName):
//    if this function is defined, it will be called at each entry of a
//    method or constructor. Used only when compiling programs with
//    --experiment-call-instrumentation.
(function dartProgram() {
  function copyProperties(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      to[key] = from[key];
    }
  }
  function mixinPropertiesHard(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      if (!to.hasOwnProperty(key))
        to[key] = from[key];
    }
  }
  function mixinPropertiesEasy(from, to) {
    Object.assign(to, from);
  }
  var supportsDirectProtoAccess = function() {
    var cls = function() {
    };
    cls.prototype = {p: {}};
    var object = new cls();
    if (!(object.__proto__ && object.__proto__.p === cls.prototype.p))
      return false;
    try {
      if (typeof navigator != "undefined" && typeof navigator.userAgent == "string" && navigator.userAgent.indexOf("Chrome/") >= 0)
        return true;
      if (typeof version == "function" && version.length == 0) {
        var v = version();
        if (/^\d+\.\d+\.\d+\.\d+$/.test(v))
          return true;
      }
    } catch (_) {
    }
    return false;
  }();
  function setFunctionNamesIfNecessary(holders) {
    function t() {
    }
    ;
    if (typeof t.name == "string")
      return;
    for (var i = 0; i < holders.length; i++) {
      var holder = holders[i];
      var keys = Object.keys(holder);
      for (var j = 0; j < keys.length; j++) {
        var key = keys[j];
        var f = holder[key];
        if (typeof f == "function")
          f.name = key;
      }
    }
  }
  function inherit(cls, sup) {
    cls.prototype.constructor = cls;
    cls.prototype["$is" + cls.name] = cls;
    if (sup != null) {
      if (supportsDirectProtoAccess) {
        cls.prototype.__proto__ = sup.prototype;
        return;
      }
      var clsPrototype = Object.create(sup.prototype);
      copyProperties(cls.prototype, clsPrototype);
      cls.prototype = clsPrototype;
    }
  }
  function inheritMany(sup, classes) {
    for (var i = 0; i < classes.length; i++)
      inherit(classes[i], sup);
  }
  function mixinEasy(cls, mixin) {
    mixinPropertiesEasy(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function mixinHard(cls, mixin) {
    mixinPropertiesHard(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function lazyOld(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      holder[getterName] = function() {
        A.throwCyclicInit(name);
      };
      var result;
      var sentinelInProgress = initializer;
      try {
        if (holder[name] === uninitializedSentinel) {
          result = holder[name] = sentinelInProgress;
          result = holder[name] = initializer();
        } else
          result = holder[name];
      } finally {
        if (result === sentinelInProgress)
          holder[name] = null;
        holder[getterName] = function() {
          return this[name];
        };
      }
      return result;
    };
  }
  function lazy(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      if (holder[name] === uninitializedSentinel)
        holder[name] = initializer();
      holder[getterName] = function() {
        return this[name];
      };
      return holder[name];
    };
  }
  function lazyFinal(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      if (holder[name] === uninitializedSentinel) {
        var value = initializer();
        if (holder[name] !== uninitializedSentinel)
          A.throwLateFieldADI(name);
        holder[name] = value;
      }
      holder[getterName] = function() {
        return this[name];
      };
      return holder[name];
    };
  }
  function makeConstList(list) {
    list.immutable$list = Array;
    list.fixed$length = Array;
    return list;
  }
  function convertToFastObject(properties) {
    function t() {
    }
    t.prototype = properties;
    new t();
    return properties;
  }
  function convertAllToFastObject(arrayOfObjects) {
    for (var i = 0; i < arrayOfObjects.length; ++i)
      convertToFastObject(arrayOfObjects[i]);
  }
  var functionCounter = 0;
  function instanceTearOffGetter(isIntercepted, parameters) {
    var name = parameters.fs[0];
    if (isIntercepted)
      return new Function("parameters, createTearOffClass, cache", "return function tearOff_" + name + functionCounter++ + "(receiver) {" + "if (cache === null) cache = createTearOffClass(parameters);" + "return new cache(receiver, this);" + "}")(parameters, A.closureFromTearOff, null);
    else
      return new Function("parameters, createTearOffClass, cache", "return function tearOff_" + name + functionCounter++ + "() {" + "if (cache === null) cache = createTearOffClass(parameters);" + "return new cache(this, null);" + "}")(parameters, A.closureFromTearOff, null);
  }
  function staticTearOffGetter(parameters) {
    var cache = null;
    return function() {
      if (cache === null)
        cache = A.closureFromTearOff(parameters).prototype;
      return cache;
    };
  }
  var typesOffset = 0;
  function tearOffParameters(container, isStatic, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, needsDirectAccess) {
    if (typeof funType == "number")
      funType += typesOffset;
    return {co: container, iS: isStatic, iI: isIntercepted, rC: requiredParameterCount, dV: optionalParameterDefaultValues, cs: callNames, fs: funsOrNames, fT: funType, aI: applyIndex || 0, nDA: needsDirectAccess};
  }
  function installStaticTearOff(holder, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    var parameters = tearOffParameters(holder, true, false, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, false);
    var getterFunction = staticTearOffGetter(parameters);
    holder[getterName] = getterFunction;
  }
  function installInstanceTearOff(prototype, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, needsDirectAccess) {
    isIntercepted = !!isIntercepted;
    var parameters = tearOffParameters(prototype, false, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, !!needsDirectAccess);
    var getterFunction = instanceTearOffGetter(isIntercepted, parameters);
    prototype[getterName] = getterFunction;
  }
  function setOrUpdateInterceptorsByTag(newTags) {
    var tags = init.interceptorsByTag;
    if (!tags) {
      init.interceptorsByTag = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function setOrUpdateLeafTags(newTags) {
    var tags = init.leafTags;
    if (!tags) {
      init.leafTags = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function updateTypes(newTypes) {
    var types = init.types;
    var length = types.length;
    types.push.apply(types, newTypes);
    return length;
  }
  function updateHolder(holder, newHolder) {
    copyProperties(newHolder, holder);
    return holder;
  }
  var hunkHelpers = function() {
    var mkInstance = function(isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex, false);
        };
      },
      mkStatic = function(requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      };
    return {inherit: inherit, inheritMany: inheritMany, mixin: mixinEasy, mixinHard: mixinHard, installStaticTearOff: installStaticTearOff, installInstanceTearOff: installInstanceTearOff, _instance_0u: mkInstance(0, 0, null, ["call$0"], 0), _instance_1u: mkInstance(0, 1, null, ["call$1"], 0), _instance_2u: mkInstance(0, 2, null, ["call$2"], 0), _instance_0i: mkInstance(1, 0, null, ["call$0"], 0), _instance_1i: mkInstance(1, 1, null, ["call$1"], 0), _instance_2i: mkInstance(1, 2, null, ["call$2"], 0), _static_0: mkStatic(0, null, ["call$0"], 0), _static_1: mkStatic(1, null, ["call$1"], 0), _static_2: mkStatic(2, null, ["call$2"], 0), makeConstList: makeConstList, lazy: lazy, lazyFinal: lazyFinal, lazyOld: lazyOld, updateHolder: updateHolder, convertToFastObject: convertToFastObject, setFunctionNamesIfNecessary: setFunctionNamesIfNecessary, updateTypes: updateTypes, setOrUpdateInterceptorsByTag: setOrUpdateInterceptorsByTag, setOrUpdateLeafTags: setOrUpdateLeafTags};
  }();
  function initializeDeferredHunk(hunk) {
    typesOffset = init.types.length;
    hunk(hunkHelpers, init, holders, $);
  }
  var A = {JS_CONST: function JS_CONST() {
    },
    LateError$fieldADI(fieldName) {
      return new A.LateError("Field '" + fieldName + "' has been assigned during initialization.");
    },
    SystemHash_combine(hash, value) {
      hash = hash + value & 536870911;
      hash = hash + ((hash & 524287) << 10) & 536870911;
      return hash ^ hash >>> 6;
    },
    SystemHash_finish(hash) {
      hash = hash + ((hash & 67108863) << 3) & 536870911;
      hash ^= hash >>> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    checkNotNullable(value, $name, $T) {
      return value;
    },
    SubListIterable$(_iterable, _start, _endOrLength, $E) {
      A.RangeError_checkNotNegative(_start, "start");
      return new A.SubListIterable(_iterable, _start, _endOrLength, $E._eval$1("SubListIterable<0>"));
    },
    MappedIterable_MappedIterable(iterable, $function, $S, $T) {
      return new A.EfficientLengthMappedIterable(iterable, $function, $S._eval$1("@<0>")._bind$1($T)._eval$1("EfficientLengthMappedIterable<1,2>"));
    },
    Sort_sort(a, compare, $E) {
      A.Sort__doSort(a, 0, J.get$length$asx(a) - 1, compare, $E);
    },
    Sort__doSort(a, left, right, compare, $E) {
      if (right - left <= 32)
        A.Sort__insertionSort(a, left, right, compare, $E);
      else
        A.Sort__dualPivotQuicksort(a, left, right, compare, $E);
    },
    Sort__insertionSort(a, left, right, compare, $E) {
      var i, t1, el, j, t2, j0;
      for (i = left + 1, t1 = J.getInterceptor$asx(a); i <= right; ++i) {
        el = t1.$index(a, i);
        j = i;
        while (true) {
          if (j > left) {
            t2 = compare.call$2(t1.$index(a, j - 1), el);
            if (typeof t2 !== "number")
              return t2.$gt();
            t2 = t2 > 0;
          } else
            t2 = false;
          if (!t2)
            break;
          j0 = j - 1;
          t1.$indexSet(a, j, t1.$index(a, j0));
          j = j0;
        }
        t1.$indexSet(a, j, el);
      }
    },
    Sort__dualPivotQuicksort(a, left, right, compare, $E) {
      var t0, less, great, k, ak, comp, great0, less0, pivots_are_equal,
        sixth = B.JSInt_methods._tdivFast$1(right - left + 1, 6),
        index1 = left + sixth,
        index5 = right - sixth,
        index3 = B.JSInt_methods._tdivFast$1(left + right, 2),
        index2 = index3 - sixth,
        index4 = index3 + sixth,
        t1 = J.getInterceptor$asx(a),
        el1 = t1.$index(a, index1),
        el2 = t1.$index(a, index2),
        el3 = t1.$index(a, index3),
        el4 = t1.$index(a, index4),
        el5 = t1.$index(a, index5),
        t2 = compare.call$2(el1, el2);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el2;
        el2 = el1;
        el1 = t0;
      }
      t2 = compare.call$2(el4, el5);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      t2 = compare.call$2(el1, el3);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el3;
        el3 = el1;
        el1 = t0;
      }
      t2 = compare.call$2(el2, el3);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      t2 = compare.call$2(el1, el4);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el4;
        el4 = el1;
        el1 = t0;
      }
      t2 = compare.call$2(el3, el4);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el4;
        el4 = el3;
        el3 = t0;
      }
      t2 = compare.call$2(el2, el5);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el5;
        el5 = el2;
        el2 = t0;
      }
      t2 = compare.call$2(el2, el3);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      t2 = compare.call$2(el4, el5);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      t1.$indexSet(a, index1, el1);
      t1.$indexSet(a, index3, el3);
      t1.$indexSet(a, index5, el5);
      t1.$indexSet(a, index2, t1.$index(a, left));
      t1.$indexSet(a, index4, t1.$index(a, right));
      less = left + 1;
      great = right - 1;
      if (J.$eq$(compare.call$2(el2, el4), 0)) {
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          comp = compare.call$2(ak, el2);
          if (comp === 0)
            continue;
          if (comp < 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else
            for (; true;) {
              comp = compare.call$2(t1.$index(a, great), el2);
              if (comp > 0) {
                --great;
                continue;
              } else {
                great0 = great - 1;
                if (comp < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  great = great0;
                  less = less0;
                  break;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  great = great0;
                  break;
                }
              }
            }
        }
        pivots_are_equal = true;
      } else {
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          if (compare.call$2(ak, el2) < 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else if (compare.call$2(ak, el4) > 0)
            for (; true;)
              if (compare.call$2(t1.$index(a, great), el4) > 0) {
                --great;
                if (great < k)
                  break;
                continue;
              } else {
                great0 = great - 1;
                if (compare.call$2(t1.$index(a, great), el2) < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  less = less0;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                }
                great = great0;
                break;
              }
        }
        pivots_are_equal = false;
      }
      t2 = less - 1;
      t1.$indexSet(a, left, t1.$index(a, t2));
      t1.$indexSet(a, t2, el2);
      t2 = great + 1;
      t1.$indexSet(a, right, t1.$index(a, t2));
      t1.$indexSet(a, t2, el4);
      A.Sort__doSort(a, left, less - 2, compare, $E);
      A.Sort__doSort(a, great + 2, right, compare, $E);
      if (pivots_are_equal)
        return;
      if (less < index1 && great > index5) {
        for (; J.$eq$(compare.call$2(t1.$index(a, less), el2), 0);)
          ++less;
        for (; J.$eq$(compare.call$2(t1.$index(a, great), el4), 0);)
          --great;
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          if (compare.call$2(ak, el2) === 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else if (compare.call$2(ak, el4) === 0)
            for (; true;)
              if (compare.call$2(t1.$index(a, great), el4) === 0) {
                --great;
                if (great < k)
                  break;
                continue;
              } else {
                great0 = great - 1;
                if (compare.call$2(t1.$index(a, great), el2) < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  less = less0;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                }
                great = great0;
                break;
              }
        }
        A.Sort__doSort(a, less, great, compare, $E);
      } else
        A.Sort__doSort(a, less, great, compare, $E);
    },
    LateError: function LateError(t0) {
      this._message = t0;
    },
    SentinelValue: function SentinelValue() {
    },
    EfficientLengthIterable: function EfficientLengthIterable() {
    },
    ListIterable: function ListIterable() {
    },
    SubListIterable: function SubListIterable(t0, t1, t2, t3) {
      var _ = this;
      _.__internal$_iterable = t0;
      _._start = t1;
      _._endOrLength = t2;
      _.$ti = t3;
    },
    ListIterator: function ListIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_iterable = t0;
      _.__internal$_length = t1;
      _.__internal$_index = 0;
      _.__internal$_current = null;
      _.$ti = t2;
    },
    MappedIterable: function MappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    EfficientLengthMappedIterable: function EfficientLengthMappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    MappedIterator: function MappedIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_current = null;
      _._iterator = t0;
      _._f = t1;
      _.$ti = t2;
    },
    WhereIterable: function WhereIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterator: function WhereIterator(t0, t1, t2) {
      this._iterator = t0;
      this._f = t1;
      this.$ti = t2;
    },
    FixedLengthListMixin: function FixedLengthListMixin() {
    },
    unminifyOrTag(rawClassName) {
      var preserved = init.mangledGlobalNames[rawClassName];
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    isJsIndexable(object, record) {
      var result;
      if (record != null) {
        result = record.x;
        if (result != null)
          return result;
      }
      return type$.JavaScriptIndexingBehavior_dynamic._is(object);
    },
    S(value) {
      var result;
      if (typeof value == "string")
        return value;
      if (typeof value == "number") {
        if (value !== 0)
          return "" + value;
      } else if (true === value)
        return "true";
      else if (false === value)
        return "false";
      else if (value == null)
        return "null";
      result = J.toString$0$(value);
      return result;
    },
    Primitives_objectHashCode(object) {
      var hash = object.$identityHash;
      if (hash == null) {
        hash = Math.random() * 0x3fffffff | 0;
        object.$identityHash = hash;
      }
      return hash;
    },
    Primitives_objectTypeName(object) {
      return A.Primitives__objectTypeNameNewRti(object);
    },
    Primitives__objectTypeNameNewRti(object) {
      var dispatchName, t1, $constructor, constructorName;
      if (object instanceof A.Object)
        return A._rtiToString(A.instanceType(object), null);
      if (J.getInterceptor$(object) === B.Interceptor_methods || type$.UnknownJavaScriptObject._is(object)) {
        dispatchName = B.C_JS_CONST(object);
        t1 = dispatchName !== "Object" && dispatchName !== "";
        if (t1)
          return dispatchName;
        $constructor = object.constructor;
        if (typeof $constructor == "function") {
          constructorName = $constructor.name;
          if (typeof constructorName == "string")
            t1 = constructorName !== "Object" && constructorName !== "";
          else
            t1 = false;
          if (t1)
            return constructorName;
        }
      }
      return A._rtiToString(A.instanceType(object), null);
    },
    iae(argument) {
      throw A.wrapException(A.argumentErrorValue(argument));
    },
    ioore(receiver, index) {
      if (receiver == null)
        J.get$length$asx(receiver);
      throw A.wrapException(A.diagnoseIndexError(receiver, index));
    },
    diagnoseIndexError(indexable, index) {
      var $length, _s5_ = "index", _null = null;
      if (!A._isInt(index))
        return new A.ArgumentError(true, index, _s5_, _null);
      $length = A._asInt(J.get$length$asx(indexable));
      if (index < 0 || index >= $length)
        return A.IndexError$(index, indexable, _s5_, _null, $length);
      return new A.RangeError(_null, _null, true, index, _s5_, "Value not in range");
    },
    argumentErrorValue(object) {
      return new A.ArgumentError(true, object, null, null);
    },
    wrapException(ex) {
      var wrapper, t1;
      if (ex == null)
        ex = new A.NullThrownError();
      wrapper = new Error();
      wrapper.dartException = ex;
      t1 = A.toStringWrapper;
      if ("defineProperty" in Object) {
        Object.defineProperty(wrapper, "message", {get: t1});
        wrapper.name = "";
      } else
        wrapper.toString = t1;
      return wrapper;
    },
    toStringWrapper() {
      return J.toString$0$(this.dartException);
    },
    throwExpression(ex) {
      throw A.wrapException(ex);
    },
    throwConcurrentModificationError(collection) {
      throw A.wrapException(A.ConcurrentModificationError$(collection));
    },
    TypeErrorDecoder_extractPattern(message) {
      var match, $arguments, argumentsExpr, expr, method, receiver;
      message = A.quoteStringForRegExp(message.replace(String({}), "$receiver$"));
      match = message.match(/\\\$[a-zA-Z]+\\\$/g);
      if (match == null)
        match = A._setArrayType([], type$.JSArray_String);
      $arguments = match.indexOf("\\$arguments\\$");
      argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
      expr = match.indexOf("\\$expr\\$");
      method = match.indexOf("\\$method\\$");
      receiver = match.indexOf("\\$receiver\\$");
      return new A.TypeErrorDecoder(message.replace(new RegExp("\\\\\\$arguments\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$argumentsExpr\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$expr\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$method\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$receiver\\\\\\$", "g"), "((?:x|[^x])*)"), $arguments, argumentsExpr, expr, method, receiver);
    },
    TypeErrorDecoder_provokeCallErrorOn(expression) {
      return function($expr$) {
        var $argumentsExpr$ = "$arguments$";
        try {
          $expr$.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    TypeErrorDecoder_provokePropertyErrorOn(expression) {
      return function($expr$) {
        try {
          $expr$.$method$;
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    JsNoSuchMethodError$(_message, match) {
      var t1 = match == null,
        t2 = t1 ? null : match.method;
      return new A.JsNoSuchMethodError(_message, t2, t1 ? null : match.receiver);
    },
    unwrapException(ex) {
      if (ex == null)
        return new A.NullThrownFromJavaScriptException(ex);
      if (typeof ex !== "object")
        return ex;
      if ("dartException" in ex)
        return A.saveStackTrace(ex, ex.dartException);
      return A._unwrapNonDartException(ex);
    },
    saveStackTrace(ex, error) {
      if (type$.Error._is(error))
        if (error.$thrownJsError == null)
          error.$thrownJsError = ex;
      return error;
    },
    _unwrapNonDartException(ex) {
      var message, number, ieErrorCode, t1, nsme, notClosure, nullCall, nullLiteralCall, undefCall, undefLiteralCall, nullProperty, undefProperty, undefLiteralProperty, match, _null = null;
      if (!("message" in ex))
        return ex;
      message = ex.message;
      if ("number" in ex && typeof ex.number == "number") {
        number = ex.number;
        ieErrorCode = number & 65535;
        if ((B.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
          switch (ieErrorCode) {
            case 438:
              return A.saveStackTrace(ex, A.JsNoSuchMethodError$(A.S(message) + " (Error " + ieErrorCode + ")", _null));
            case 445:
            case 5007:
              t1 = A.S(message) + " (Error " + ieErrorCode + ")";
              return A.saveStackTrace(ex, new A.NullError(t1, _null));
          }
      }
      if (ex instanceof TypeError) {
        nsme = $.$get$TypeErrorDecoder_noSuchMethodPattern();
        notClosure = $.$get$TypeErrorDecoder_notClosurePattern();
        nullCall = $.$get$TypeErrorDecoder_nullCallPattern();
        nullLiteralCall = $.$get$TypeErrorDecoder_nullLiteralCallPattern();
        undefCall = $.$get$TypeErrorDecoder_undefinedCallPattern();
        undefLiteralCall = $.$get$TypeErrorDecoder_undefinedLiteralCallPattern();
        nullProperty = $.$get$TypeErrorDecoder_nullPropertyPattern();
        $.$get$TypeErrorDecoder_nullLiteralPropertyPattern();
        undefProperty = $.$get$TypeErrorDecoder_undefinedPropertyPattern();
        undefLiteralProperty = $.$get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
        match = nsme.matchTypeError$1(message);
        if (match != null)
          return A.saveStackTrace(ex, A.JsNoSuchMethodError$(A._asString(message), match));
        else {
          match = notClosure.matchTypeError$1(message);
          if (match != null) {
            match.method = "call";
            return A.saveStackTrace(ex, A.JsNoSuchMethodError$(A._asString(message), match));
          } else {
            match = nullCall.matchTypeError$1(message);
            if (match == null) {
              match = nullLiteralCall.matchTypeError$1(message);
              if (match == null) {
                match = undefCall.matchTypeError$1(message);
                if (match == null) {
                  match = undefLiteralCall.matchTypeError$1(message);
                  if (match == null) {
                    match = nullProperty.matchTypeError$1(message);
                    if (match == null) {
                      match = nullLiteralCall.matchTypeError$1(message);
                      if (match == null) {
                        match = undefProperty.matchTypeError$1(message);
                        if (match == null) {
                          match = undefLiteralProperty.matchTypeError$1(message);
                          t1 = match != null;
                        } else
                          t1 = true;
                      } else
                        t1 = true;
                    } else
                      t1 = true;
                  } else
                    t1 = true;
                } else
                  t1 = true;
              } else
                t1 = true;
            } else
              t1 = true;
            if (t1) {
              A._asString(message);
              return A.saveStackTrace(ex, new A.NullError(message, match == null ? _null : match.method));
            }
          }
        }
        return A.saveStackTrace(ex, new A.UnknownJsTypeError(typeof message == "string" ? message : ""));
      }
      if (ex instanceof RangeError) {
        if (typeof message == "string" && message.indexOf("call stack") !== -1)
          return new A.StackOverflowError();
        message = function(ex) {
          try {
            return String(ex);
          } catch (e) {
          }
          return null;
        }(ex);
        return A.saveStackTrace(ex, new A.ArgumentError(false, _null, _null, typeof message == "string" ? message.replace(/^RangeError:\s*/, "") : message));
      }
      if (typeof InternalError == "function" && ex instanceof InternalError)
        if (typeof message == "string" && message === "too much recursion")
          return new A.StackOverflowError();
      return ex;
    },
    getTraceFromException(exception) {
      var trace;
      if (exception == null)
        return new A._StackTrace(exception);
      trace = exception.$cachedTrace;
      if (trace != null)
        return trace;
      return exception.$cachedTrace = new A._StackTrace(exception);
    },
    objectHashCode(object) {
      if (object == null || typeof object != "object")
        return J.get$hashCode$(object);
      else
        return A.Primitives_objectHashCode(object);
    },
    invokeClosure(closure, numberOfArguments, arg1, arg2, arg3, arg4) {
      type$.Function._as(closure);
      switch (A._asInt(numberOfArguments)) {
        case 0:
          return closure.call$0();
        case 1:
          return closure.call$1(arg1);
        case 2:
          return closure.call$2(arg1, arg2);
        case 3:
          return closure.call$3(arg1, arg2, arg3);
        case 4:
          return closure.call$4(arg1, arg2, arg3, arg4);
      }
      throw A.wrapException(A.Exception_Exception("Unsupported number of arguments for wrapped closure"));
    },
    convertDartClosureToJS(closure, arity) {
      var $function;
      if (closure == null)
        return null;
      $function = closure.$identity;
      if (!!$function)
        return $function;
      $function = function(closure, arity, invoke) {
        return function(a1, a2, a3, a4) {
          return invoke(closure, arity, a1, a2, a3, a4);
        };
      }(closure, arity, A.invokeClosure);
      closure.$identity = $function;
      return $function;
    },
    Closure_fromTearOff(parameters) {
      var $prototype, $constructor, t2, trampoline, applyTrampoline, i, stub, stub0, stubName, stubCallName,
        container = parameters.co,
        isStatic = parameters.iS,
        isIntercepted = parameters.iI,
        needsDirectAccess = parameters.nDA,
        applyTrampolineIndex = parameters.aI,
        funsOrNames = parameters.fs,
        callNames = parameters.cs,
        $name = funsOrNames[0],
        callName = callNames[0],
        $function = container[$name],
        t1 = parameters.fT;
      t1.toString;
      $prototype = isStatic ? Object.create(new A.StaticClosure().constructor.prototype) : Object.create(new A.BoundClosure(null, null).constructor.prototype);
      $prototype.$initialize = $prototype.constructor;
      if (isStatic)
        $constructor = function static_tear_off() {
          this.$initialize();
        };
      else {
        t2 = $.Closure_functionCounter;
        if (typeof t2 !== "number")
          return t2.$add();
        $.Closure_functionCounter = t2 + 1;
        t2 = new Function("a,b" + t2, "this.$initialize(a,b" + t2 + ")");
        $constructor = t2;
      }
      $prototype.constructor = $constructor;
      $constructor.prototype = $prototype;
      $prototype.$_name = $name;
      $prototype.$_target = $function;
      t2 = !isStatic;
      if (t2)
        trampoline = A.Closure_forwardCallTo($name, $function, isIntercepted, needsDirectAccess);
      else {
        $prototype.$static_name = $name;
        trampoline = $function;
      }
      $prototype.$signature = A.Closure__computeSignatureFunctionNewRti(t1, isStatic, isIntercepted);
      $prototype[callName] = trampoline;
      for (applyTrampoline = trampoline, i = 1; i < funsOrNames.length; ++i) {
        stub = funsOrNames[i];
        if (typeof stub == "string") {
          stub0 = container[stub];
          stubName = stub;
          stub = stub0;
        } else
          stubName = "";
        stubCallName = callNames[i];
        if (stubCallName != null) {
          if (t2)
            stub = A.Closure_forwardCallTo(stubName, stub, isIntercepted, needsDirectAccess);
          $prototype[stubCallName] = stub;
        }
        if (i === applyTrampolineIndex)
          applyTrampoline = stub;
      }
      $prototype["call*"] = applyTrampoline;
      $prototype.$requiredArgCount = parameters.rC;
      $prototype.$defaultValues = parameters.dV;
      return $constructor;
    },
    Closure__computeSignatureFunctionNewRti(functionType, isStatic, isIntercepted) {
      if (typeof functionType == "number")
        return functionType;
      if (typeof functionType == "string") {
        if (isStatic)
          throw A.wrapException("Cannot compute signature for static tearoff.");
        return function(recipe, evalOnReceiver) {
          return function() {
            return evalOnReceiver(this, recipe);
          };
        }(functionType, A.BoundClosure_evalRecipe);
      }
      throw A.wrapException("Error in functionType of tearoff");
    },
    Closure_cspForwardCall(arity, needsDirectAccess, stubName, $function) {
      var getReceiver = A.BoundClosure_receiverOf;
      switch (needsDirectAccess ? -1 : arity) {
        case 0:
          return function(entry, receiverOf) {
            return function() {
              return receiverOf(this)[entry]();
            };
          }(stubName, getReceiver);
        case 1:
          return function(entry, receiverOf) {
            return function(a) {
              return receiverOf(this)[entry](a);
            };
          }(stubName, getReceiver);
        case 2:
          return function(entry, receiverOf) {
            return function(a, b) {
              return receiverOf(this)[entry](a, b);
            };
          }(stubName, getReceiver);
        case 3:
          return function(entry, receiverOf) {
            return function(a, b, c) {
              return receiverOf(this)[entry](a, b, c);
            };
          }(stubName, getReceiver);
        case 4:
          return function(entry, receiverOf) {
            return function(a, b, c, d) {
              return receiverOf(this)[entry](a, b, c, d);
            };
          }(stubName, getReceiver);
        case 5:
          return function(entry, receiverOf) {
            return function(a, b, c, d, e) {
              return receiverOf(this)[entry](a, b, c, d, e);
            };
          }(stubName, getReceiver);
        default:
          return function(f, receiverOf) {
            return function() {
              return f.apply(receiverOf(this), arguments);
            };
          }($function, getReceiver);
      }
    },
    Closure_forwardCallTo(stubName, $function, isIntercepted, needsDirectAccess) {
      var arity, t1, selfName, t2, $arguments,
        _s8_ = "receiver";
      if (isIntercepted)
        return A.Closure_forwardInterceptedCallTo(stubName, $function, needsDirectAccess);
      arity = $function.length;
      t1 = needsDirectAccess || arity >= 27;
      if (t1)
        return A.Closure_cspForwardCall(arity, needsDirectAccess, stubName, $function);
      if (arity === 0) {
        t1 = $.Closure_functionCounter;
        if (typeof t1 !== "number")
          return t1.$add();
        $.Closure_functionCounter = t1 + 1;
        selfName = "self" + t1;
        t1 = "return function(){var " + selfName + " = this.";
        t2 = $.BoundClosure__receiverFieldNameCache;
        return new Function(t1 + (t2 == null ? $.BoundClosure__receiverFieldNameCache = A.BoundClosure__computeFieldNamed(_s8_) : t2) + ";return " + selfName + "." + stubName + "();}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity).join(",");
      t1 = $.Closure_functionCounter;
      if (typeof t1 !== "number")
        return t1.$add();
      $.Closure_functionCounter = t1 + 1;
      $arguments += t1;
      t1 = "return function(" + $arguments + "){return this.";
      t2 = $.BoundClosure__receiverFieldNameCache;
      return new Function(t1 + (t2 == null ? $.BoundClosure__receiverFieldNameCache = A.BoundClosure__computeFieldNamed(_s8_) : t2) + "." + stubName + "(" + $arguments + ");}")();
    },
    Closure_cspForwardInterceptedCall(arity, needsDirectAccess, stubName, $function) {
      var getReceiver = A.BoundClosure_receiverOf,
        getInterceptor = A.BoundClosure_interceptorOf;
      switch (needsDirectAccess ? -1 : arity) {
        case 0:
          throw A.wrapException(new A.RuntimeError("Intercepted function with no arguments."));
        case 1:
          return function(entry, interceptorOf, receiverOf) {
            return function() {
              return interceptorOf(this)[entry](receiverOf(this));
            };
          }(stubName, getInterceptor, getReceiver);
        case 2:
          return function(entry, interceptorOf, receiverOf) {
            return function(a) {
              return interceptorOf(this)[entry](receiverOf(this), a);
            };
          }(stubName, getInterceptor, getReceiver);
        case 3:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b) {
              return interceptorOf(this)[entry](receiverOf(this), a, b);
            };
          }(stubName, getInterceptor, getReceiver);
        case 4:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c);
            };
          }(stubName, getInterceptor, getReceiver);
        case 5:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c, d) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c, d);
            };
          }(stubName, getInterceptor, getReceiver);
        case 6:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c, d, e) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c, d, e);
            };
          }(stubName, getInterceptor, getReceiver);
        default:
          return function(f, interceptorOf, receiverOf) {
            return function() {
              var a = [receiverOf(this)];
              Array.prototype.push.apply(a, arguments);
              return f.apply(interceptorOf(this), a);
            };
          }($function, getInterceptor, getReceiver);
      }
    },
    Closure_forwardInterceptedCallTo(stubName, $function, needsDirectAccess) {
      var receiverField, arity, t1, t2, $arguments,
        interceptorField = $.BoundClosure__interceptorFieldNameCache;
      if (interceptorField == null)
        interceptorField = $.BoundClosure__interceptorFieldNameCache = A.BoundClosure__computeFieldNamed("interceptor");
      receiverField = $.BoundClosure__receiverFieldNameCache;
      if (receiverField == null)
        receiverField = $.BoundClosure__receiverFieldNameCache = A.BoundClosure__computeFieldNamed("receiver");
      arity = $function.length;
      t1 = needsDirectAccess || arity >= 28;
      if (t1)
        return A.Closure_cspForwardInterceptedCall(arity, needsDirectAccess, stubName, $function);
      if (arity === 1) {
        t1 = "return function(){return this." + interceptorField + "." + stubName + "(this." + receiverField + ");";
        t2 = $.Closure_functionCounter;
        if (typeof t2 !== "number")
          return t2.$add();
        $.Closure_functionCounter = t2 + 1;
        return new Function(t1 + t2 + "}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity - 1).join(",");
      t1 = "return function(" + $arguments + "){return this." + interceptorField + "." + stubName + "(this." + receiverField + ", " + $arguments + ");";
      t2 = $.Closure_functionCounter;
      if (typeof t2 !== "number")
        return t2.$add();
      $.Closure_functionCounter = t2 + 1;
      return new Function(t1 + t2 + "}")();
    },
    closureFromTearOff(parameters) {
      return A.Closure_fromTearOff(parameters);
    },
    BoundClosure_evalRecipe(closure, recipe) {
      return A._Universe_evalInEnvironment(init.typeUniverse, A.instanceType(closure._receiver), recipe);
    },
    BoundClosure_receiverOf(closure) {
      return closure._receiver;
    },
    BoundClosure_interceptorOf(closure) {
      return closure._interceptor;
    },
    BoundClosure__computeFieldNamed(fieldName) {
      var t1, i, $name,
        template = new A.BoundClosure("receiver", "interceptor"),
        names = J.JSArray_markFixedList(Object.getOwnPropertyNames(template), type$.nullable_Object);
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (template[$name] === fieldName)
          return $name;
      }
      throw A.wrapException(A.ArgumentError$("Field name " + fieldName + " not found.", null));
    },
    boolConversionCheck(value) {
      if (value == null)
        A.assertThrow("boolean expression must not be null");
      return value;
    },
    assertThrow(message) {
      throw A.wrapException(new A._AssertionError(message));
    },
    throwCyclicInit(staticName) {
      throw A.wrapException(new A.CyclicInitializationError(staticName));
    },
    getIsolateAffinityTag($name) {
      return init.getIsolateTag($name);
    },
    LinkedHashMapKeyIterator$(_map, _modifications, $E) {
      var t1 = new A.LinkedHashMapKeyIterator(_map, _modifications, $E._eval$1("LinkedHashMapKeyIterator<0>"));
      t1._cell = _map._first;
      return t1;
    },
    defineProperty(obj, property, value) {
      Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
    },
    lookupAndCacheInterceptor(obj) {
      var interceptor, interceptorClass, altTag, mark, t1,
        tag = A._asString($.getTagFunction.call$1(obj)),
        record = $.dispatchRecordsForInstanceTags[tag];
      if (record != null) {
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      interceptor = $.interceptorsForUncacheableTags[tag];
      if (interceptor != null)
        return interceptor;
      interceptorClass = init.interceptorsByTag[tag];
      if (interceptorClass == null) {
        altTag = A._asStringQ($.alternateTagFunction.call$2(obj, tag));
        if (altTag != null) {
          record = $.dispatchRecordsForInstanceTags[altTag];
          if (record != null) {
            Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
            return record.i;
          }
          interceptor = $.interceptorsForUncacheableTags[altTag];
          if (interceptor != null)
            return interceptor;
          interceptorClass = init.interceptorsByTag[altTag];
          tag = altTag;
        }
      }
      if (interceptorClass == null)
        return null;
      interceptor = interceptorClass.prototype;
      mark = tag[0];
      if (mark === "!") {
        record = A.makeLeafDispatchRecord(interceptor);
        $.dispatchRecordsForInstanceTags[tag] = record;
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      if (mark === "~") {
        $.interceptorsForUncacheableTags[tag] = interceptor;
        return interceptor;
      }
      if (mark === "-") {
        t1 = A.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      }
      if (mark === "+")
        return A.patchInteriorProto(obj, interceptor);
      if (mark === "*")
        throw A.wrapException(A.UnimplementedError$(tag));
      if (init.leafTags[tag] === true) {
        t1 = A.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      } else
        return A.patchInteriorProto(obj, interceptor);
    },
    patchInteriorProto(obj, interceptor) {
      var proto = Object.getPrototypeOf(obj);
      Object.defineProperty(proto, init.dispatchPropertyName, {value: J.makeDispatchRecord(interceptor, proto, null, null), enumerable: false, writable: true, configurable: true});
      return interceptor;
    },
    makeLeafDispatchRecord(interceptor) {
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    },
    makeDefaultDispatchRecord(tag, interceptorClass, proto) {
      var interceptor = interceptorClass.prototype;
      if (init.leafTags[tag] === true)
        return A.makeLeafDispatchRecord(interceptor);
      else
        return J.makeDispatchRecord(interceptor, proto, null, null);
    },
    initNativeDispatch() {
      if (true === $.initNativeDispatchFlag)
        return;
      $.initNativeDispatchFlag = true;
      A.initNativeDispatchContinue();
    },
    initNativeDispatchContinue() {
      var map, tags, fun, i, tag, proto, record, interceptorClass;
      $.dispatchRecordsForInstanceTags = Object.create(null);
      $.interceptorsForUncacheableTags = Object.create(null);
      A.initHooks();
      map = init.interceptorsByTag;
      tags = Object.getOwnPropertyNames(map);
      if (typeof window != "undefined") {
        window;
        fun = function() {
        };
        for (i = 0; i < tags.length; ++i) {
          tag = tags[i];
          proto = $.prototypeForTagFunction.call$1(tag);
          if (proto != null) {
            record = A.makeDefaultDispatchRecord(tag, map[tag], proto);
            if (record != null) {
              Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
              fun.prototype = proto;
            }
          }
        }
      }
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        if (/^[A-Za-z_]/.test(tag)) {
          interceptorClass = map[tag];
          map["!" + tag] = interceptorClass;
          map["~" + tag] = interceptorClass;
          map["-" + tag] = interceptorClass;
          map["+" + tag] = interceptorClass;
          map["*" + tag] = interceptorClass;
        }
      }
    },
    initHooks() {
      var transformers, i, transformer, getTag, getUnknownTag, prototypeForTag,
        hooks = B.C_JS_CONST0();
      hooks = A.applyHooksTransformer(B.C_JS_CONST1, A.applyHooksTransformer(B.C_JS_CONST2, A.applyHooksTransformer(B.C_JS_CONST3, A.applyHooksTransformer(B.C_JS_CONST3, A.applyHooksTransformer(B.C_JS_CONST4, A.applyHooksTransformer(B.C_JS_CONST5, A.applyHooksTransformer(B.C_JS_CONST6(B.C_JS_CONST), hooks)))))));
      if (typeof dartNativeDispatchHooksTransformer != "undefined") {
        transformers = dartNativeDispatchHooksTransformer;
        if (typeof transformers == "function")
          transformers = [transformers];
        if (transformers.constructor == Array)
          for (i = 0; i < transformers.length; ++i) {
            transformer = transformers[i];
            if (typeof transformer == "function")
              hooks = transformer(hooks) || hooks;
          }
      }
      getTag = hooks.getTag;
      getUnknownTag = hooks.getUnknownTag;
      prototypeForTag = hooks.prototypeForTag;
      $.getTagFunction = new A.initHooks_closure(getTag);
      $.alternateTagFunction = new A.initHooks_closure0(getUnknownTag);
      $.prototypeForTagFunction = new A.initHooks_closure1(prototypeForTag);
    },
    applyHooksTransformer(transformer, hooks) {
      return transformer(hooks) || hooks;
    },
    quoteStringForRegExp(string) {
      if (/[[\]{}()*+?.\\^$|]/.test(string))
        return string.replace(/[[\]{}()*+?.\\^$|]/g, "\\$&");
      return string;
    },
    TypeErrorDecoder: function TypeErrorDecoder(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._pattern = t0;
      _._arguments = t1;
      _._argumentsExpr = t2;
      _._expr = t3;
      _._method = t4;
      _._receiver = t5;
    },
    NullError: function NullError(t0, t1) {
      this.__js_helper$_message = t0;
      this._method = t1;
    },
    JsNoSuchMethodError: function JsNoSuchMethodError(t0, t1, t2) {
      this.__js_helper$_message = t0;
      this._method = t1;
      this._receiver = t2;
    },
    UnknownJsTypeError: function UnknownJsTypeError(t0) {
      this.__js_helper$_message = t0;
    },
    NullThrownFromJavaScriptException: function NullThrownFromJavaScriptException(t0) {
      this._irritant = t0;
    },
    _StackTrace: function _StackTrace(t0) {
      this._exception = t0;
      this._trace = null;
    },
    Closure: function Closure() {
    },
    Closure0Args: function Closure0Args() {
    },
    Closure2Args: function Closure2Args() {
    },
    TearOffClosure: function TearOffClosure() {
    },
    StaticClosure: function StaticClosure() {
    },
    BoundClosure: function BoundClosure(t0, t1) {
      this._receiver = t0;
      this._interceptor = t1;
    },
    RuntimeError: function RuntimeError(t0) {
      this.message = t0;
    },
    _AssertionError: function _AssertionError(t0) {
      this.message = t0;
    },
    JsLinkedHashMap: function JsLinkedHashMap(t0) {
      var _ = this;
      _._length = 0;
      _._last = _._first = _.__js_helper$_rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t0;
    },
    JsLinkedHashMap_values_closure: function JsLinkedHashMap_values_closure(t0) {
      this.$this = t0;
    },
    LinkedHashMapCell: function LinkedHashMapCell(t0, t1) {
      this.hashMapCellKey = t0;
      this.hashMapCellValue = t1;
      this._next = null;
    },
    LinkedHashMapKeyIterable: function LinkedHashMapKeyIterable(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    LinkedHashMapKeyIterator: function LinkedHashMapKeyIterator(t0, t1, t2) {
      var _ = this;
      _._map = t0;
      _._modifications = t1;
      _.__js_helper$_current = _._cell = null;
      _.$ti = t2;
    },
    initHooks_closure: function initHooks_closure(t0) {
      this.getTag = t0;
    },
    initHooks_closure0: function initHooks_closure0(t0) {
      this.getUnknownTag = t0;
    },
    initHooks_closure1: function initHooks_closure1(t0) {
      this.prototypeForTag = t0;
    },
    _checkViewArguments(buffer, offsetInBytes, $length) {
    },
    _ensureNativeList(list) {
      return list;
    },
    NativeFloat32List_NativeFloat32List$view(buffer, offsetInBytes, $length) {
      A._checkViewArguments(buffer, offsetInBytes, $length);
      return new Float32Array(buffer, offsetInBytes, $length);
    },
    NativeUint8List_NativeUint8List($length) {
      return new Uint8Array($length);
    },
    _checkValidIndex(index, list, $length) {
      if (index >>> 0 !== index || index >= $length)
        throw A.wrapException(A.diagnoseIndexError(list, index));
    },
    NativeTypedData: function NativeTypedData() {
    },
    NativeTypedArray: function NativeTypedArray() {
    },
    NativeTypedArrayOfDouble: function NativeTypedArrayOfDouble() {
    },
    NativeTypedArrayOfInt: function NativeTypedArrayOfInt() {
    },
    NativeFloat32List: function NativeFloat32List() {
    },
    NativeInt16List: function NativeInt16List() {
    },
    NativeInt32List: function NativeInt32List() {
    },
    NativeInt8List: function NativeInt8List() {
    },
    NativeUint16List: function NativeUint16List() {
    },
    NativeUint32List: function NativeUint32List() {
    },
    NativeUint8ClampedList: function NativeUint8ClampedList() {
    },
    NativeUint8List: function NativeUint8List() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    Rti__getQuestionFromStar(universe, rti) {
      var question = rti._precomputed1;
      return question == null ? rti._precomputed1 = A._Universe__lookupQuestionRti(universe, rti._primary, true) : question;
    },
    Rti__getFutureFromFutureOr(universe, rti) {
      var future = rti._precomputed1;
      return future == null ? rti._precomputed1 = A._Universe__lookupInterfaceRti(universe, "Future", [rti._primary]) : future;
    },
    Rti__isUnionOfFunctionType(rti) {
      var kind = rti._kind;
      if (kind === 6 || kind === 7 || kind === 8)
        return A.Rti__isUnionOfFunctionType(rti._primary);
      return kind === 11 || kind === 12;
    },
    Rti__getCanonicalRecipe(rti) {
      return rti._canonicalRecipe;
    },
    findType(recipe) {
      return A._Universe_eval(init.typeUniverse, recipe, false);
    },
    _substitute(universe, rti, typeArguments, depth) {
      var baseType, substitutedBaseType, interfaceTypeArguments, substitutedInterfaceTypeArguments, base, substitutedBase, $arguments, substitutedArguments, returnType, substitutedReturnType, functionParameters, substitutedFunctionParameters, bounds, substitutedBounds, index, argument,
        kind = rti._kind;
      switch (kind) {
        case 5:
        case 1:
        case 2:
        case 3:
        case 4:
          return rti;
        case 6:
          baseType = rti._primary;
          substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return A._Universe__lookupStarRti(universe, substitutedBaseType, true);
        case 7:
          baseType = rti._primary;
          substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return A._Universe__lookupQuestionRti(universe, substitutedBaseType, true);
        case 8:
          baseType = rti._primary;
          substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return A._Universe__lookupFutureOrRti(universe, substitutedBaseType, true);
        case 9:
          interfaceTypeArguments = rti._rest;
          substitutedInterfaceTypeArguments = A._substituteArray(universe, interfaceTypeArguments, typeArguments, depth);
          if (substitutedInterfaceTypeArguments === interfaceTypeArguments)
            return rti;
          return A._Universe__lookupInterfaceRti(universe, rti._primary, substitutedInterfaceTypeArguments);
        case 10:
          base = rti._primary;
          substitutedBase = A._substitute(universe, base, typeArguments, depth);
          $arguments = rti._rest;
          substitutedArguments = A._substituteArray(universe, $arguments, typeArguments, depth);
          if (substitutedBase === base && substitutedArguments === $arguments)
            return rti;
          return A._Universe__lookupBindingRti(universe, substitutedBase, substitutedArguments);
        case 11:
          returnType = rti._primary;
          substitutedReturnType = A._substitute(universe, returnType, typeArguments, depth);
          functionParameters = rti._rest;
          substitutedFunctionParameters = A._substituteFunctionParameters(universe, functionParameters, typeArguments, depth);
          if (substitutedReturnType === returnType && substitutedFunctionParameters === functionParameters)
            return rti;
          return A._Universe__lookupFunctionRti(universe, substitutedReturnType, substitutedFunctionParameters);
        case 12:
          bounds = rti._rest;
          depth += bounds.length;
          substitutedBounds = A._substituteArray(universe, bounds, typeArguments, depth);
          base = rti._primary;
          substitutedBase = A._substitute(universe, base, typeArguments, depth);
          if (substitutedBounds === bounds && substitutedBase === base)
            return rti;
          return A._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, true);
        case 13:
          index = rti._primary;
          if (index < depth)
            return rti;
          argument = typeArguments[index - depth];
          if (argument == null)
            return rti;
          return argument;
        default:
          throw A.wrapException(A.AssertionError$("Attempted to substitute unexpected RTI kind " + kind));
      }
    },
    _substituteArray(universe, rtiArray, typeArguments, depth) {
      var changed, i, rti, substitutedRti,
        $length = rtiArray.length,
        result = A._Utils_newArrayOrEmpty($length);
      for (changed = false, i = 0; i < $length; ++i) {
        rti = rtiArray[i];
        substitutedRti = A._substitute(universe, rti, typeArguments, depth);
        if (substitutedRti !== rti)
          changed = true;
        result[i] = substitutedRti;
      }
      return changed ? result : rtiArray;
    },
    _substituteNamed(universe, namedArray, typeArguments, depth) {
      var changed, i, t1, t2, rti, substitutedRti,
        $length = namedArray.length,
        result = A._Utils_newArrayOrEmpty($length);
      for (changed = false, i = 0; i < $length; i += 3) {
        t1 = namedArray[i];
        t2 = namedArray[i + 1];
        rti = namedArray[i + 2];
        substitutedRti = A._substitute(universe, rti, typeArguments, depth);
        if (substitutedRti !== rti)
          changed = true;
        result.splice(i, 3, t1, t2, substitutedRti);
      }
      return changed ? result : namedArray;
    },
    _substituteFunctionParameters(universe, functionParameters, typeArguments, depth) {
      var result,
        requiredPositional = functionParameters._requiredPositional,
        substitutedRequiredPositional = A._substituteArray(universe, requiredPositional, typeArguments, depth),
        optionalPositional = functionParameters._optionalPositional,
        substitutedOptionalPositional = A._substituteArray(universe, optionalPositional, typeArguments, depth),
        named = functionParameters._named,
        substitutedNamed = A._substituteNamed(universe, named, typeArguments, depth);
      if (substitutedRequiredPositional === requiredPositional && substitutedOptionalPositional === optionalPositional && substitutedNamed === named)
        return functionParameters;
      result = new A._FunctionParameters();
      result._requiredPositional = substitutedRequiredPositional;
      result._optionalPositional = substitutedOptionalPositional;
      result._named = substitutedNamed;
      return result;
    },
    _setArrayType(target, rti) {
      target[init.arrayRti] = rti;
      return target;
    },
    closureFunctionType(closure) {
      var signature = closure.$signature;
      if (signature != null) {
        if (typeof signature == "number")
          return A.getTypeFromTypesTable(signature);
        return closure.$signature();
      }
      return null;
    },
    instanceOrFunctionType(object, testRti) {
      var rti;
      if (A.Rti__isUnionOfFunctionType(testRti))
        if (object instanceof A.Closure) {
          rti = A.closureFunctionType(object);
          if (rti != null)
            return rti;
        }
      return A.instanceType(object);
    },
    instanceType(object) {
      var rti;
      if (object instanceof A.Object) {
        rti = object.$ti;
        return rti != null ? rti : A._instanceTypeFromConstructor(object);
      }
      if (Array.isArray(object))
        return A._arrayInstanceType(object);
      return A._instanceTypeFromConstructor(J.getInterceptor$(object));
    },
    _arrayInstanceType(object) {
      var rti = object[init.arrayRti],
        defaultRti = type$.JSArray_dynamic;
      if (rti == null)
        return defaultRti;
      if (rti.constructor !== defaultRti.constructor)
        return defaultRti;
      return rti;
    },
    _instanceType(object) {
      var rti = object.$ti;
      return rti != null ? rti : A._instanceTypeFromConstructor(object);
    },
    _instanceTypeFromConstructor(instance) {
      var $constructor = instance.constructor,
        probe = $constructor.$ccache;
      if (probe != null)
        return probe;
      return A._instanceTypeFromConstructorMiss(instance, $constructor);
    },
    _instanceTypeFromConstructorMiss(instance, $constructor) {
      var effectiveConstructor = instance instanceof A.Closure ? instance.__proto__.__proto__.constructor : $constructor,
        rti = A._Universe_findErasedType(init.typeUniverse, effectiveConstructor.name);
      $constructor.$ccache = rti;
      return rti;
    },
    getTypeFromTypesTable(index) {
      var rti,
        table = init.types,
        type = table[index];
      if (typeof type == "string") {
        rti = A._Universe_eval(init.typeUniverse, type, false);
        table[index] = rti;
        return rti;
      }
      return type;
    },
    createRuntimeType(rti) {
      var recipe, starErasedRecipe, starErasedRti,
        type = rti._cachedRuntimeType;
      if (type != null)
        return type;
      recipe = rti._canonicalRecipe;
      starErasedRecipe = recipe.replace(/\*/g, "");
      if (starErasedRecipe === recipe)
        return rti._cachedRuntimeType = new A._Type(rti);
      starErasedRti = A._Universe_eval(init.typeUniverse, starErasedRecipe, true);
      type = starErasedRti._cachedRuntimeType;
      return rti._cachedRuntimeType = type == null ? starErasedRti._cachedRuntimeType = new A._Type(starErasedRti) : type;
    },
    typeLiteral(recipe) {
      return A.createRuntimeType(A._Universe_eval(init.typeUniverse, recipe, false));
    },
    _installSpecializedIsTest(object) {
      var t1, unstarred, isFn, $name, testRti = this;
      if (testRti === type$.Object)
        return A._finishIsFn(testRti, object, A._isObject);
      if (!A.isStrongTopType(testRti))
        if (!(testRti === type$.legacy_Object))
          t1 = false;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        return A._finishIsFn(testRti, object, A._isTop);
      t1 = testRti._kind;
      unstarred = t1 === 6 ? testRti._primary : testRti;
      if (unstarred === type$.int)
        isFn = A._isInt;
      else if (unstarred === type$.double || unstarred === type$.num)
        isFn = A._isNum;
      else if (unstarred === type$.String)
        isFn = A._isString;
      else
        isFn = unstarred === type$.bool ? A._isBool : null;
      if (isFn != null)
        return A._finishIsFn(testRti, object, isFn);
      if (unstarred._kind === 9) {
        $name = unstarred._primary;
        if (unstarred._rest.every(A.isTopType)) {
          testRti._specializedTestResource = "$is" + $name;
          if ($name === "List")
            return A._finishIsFn(testRti, object, A._isListTestViaProperty);
          return A._finishIsFn(testRti, object, A._isTestViaProperty);
        }
      } else if (t1 === 7)
        return A._finishIsFn(testRti, object, A._generalNullableIsTestImplementation);
      return A._finishIsFn(testRti, object, A._generalIsTestImplementation);
    },
    _finishIsFn(testRti, object, isFn) {
      testRti._is = isFn;
      return testRti._is(object);
    },
    _installSpecializedAsCheck(object) {
      var t1, testRti = this,
        asFn = A._generalAsCheckImplementation;
      if (!A.isStrongTopType(testRti))
        if (!(testRti === type$.legacy_Object))
          t1 = false;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        asFn = A._asTop;
      else if (testRti === type$.Object)
        asFn = A._asObject;
      else {
        t1 = A.isNullable(testRti);
        if (t1)
          asFn = A._generalNullableAsCheckImplementation;
      }
      testRti._as = asFn;
      return testRti._as(object);
    },
    _nullIs(testRti) {
      var t1,
        kind = testRti._kind;
      if (!A.isStrongTopType(testRti))
        if (!(testRti === type$.legacy_Object))
          if (!(testRti === type$.legacy_Never))
            if (kind !== 7)
              t1 = kind === 8 && A._nullIs(testRti._primary) || testRti === type$.Null || testRti === type$.JSNull;
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    _generalIsTestImplementation(object) {
      var testRti = this;
      if (object == null)
        return A._nullIs(testRti);
      return A._isSubtype(init.typeUniverse, A.instanceOrFunctionType(object, testRti), null, testRti, null);
    },
    _generalNullableIsTestImplementation(object) {
      if (object == null)
        return true;
      return this._primary._is(object);
    },
    _isTestViaProperty(object) {
      var tag, testRti = this;
      if (object == null)
        return A._nullIs(testRti);
      tag = testRti._specializedTestResource;
      if (object instanceof A.Object)
        return !!object[tag];
      return !!J.getInterceptor$(object)[tag];
    },
    _isListTestViaProperty(object) {
      var tag, testRti = this;
      if (object == null)
        return A._nullIs(testRti);
      if (typeof object != "object")
        return false;
      if (Array.isArray(object))
        return true;
      tag = testRti._specializedTestResource;
      if (object instanceof A.Object)
        return !!object[tag];
      return !!J.getInterceptor$(object)[tag];
    },
    _generalAsCheckImplementation(object) {
      var t1, testRti = this;
      if (object == null) {
        t1 = A.isNullable(testRti);
        if (t1)
          return object;
      } else if (testRti._is(object))
        return object;
      A._failedAsCheck(object, testRti);
    },
    _generalNullableAsCheckImplementation(object) {
      var testRti = this;
      if (object == null)
        return object;
      else if (testRti._is(object))
        return object;
      A._failedAsCheck(object, testRti);
    },
    _failedAsCheck(object, testRti) {
      throw A.wrapException(A._TypeError$fromMessage(A._Error_compose(object, A.instanceOrFunctionType(object, testRti), A._rtiToString(testRti, null))));
    },
    _Error_compose(object, objectRti, checkedTypeDescription) {
      var objectDescription = A.Error_safeToString(object),
        objectTypeDescription = A._rtiToString(objectRti == null ? A.instanceType(object) : objectRti, null);
      return objectDescription + ": type '" + objectTypeDescription + "' is not a subtype of type '" + checkedTypeDescription + "'";
    },
    _TypeError$fromMessage(message) {
      return new A._TypeError("TypeError: " + message);
    },
    _TypeError__TypeError$forType(object, type) {
      return new A._TypeError("TypeError: " + A._Error_compose(object, null, type));
    },
    _isObject(object) {
      return object != null;
    },
    _asObject(object) {
      if (object != null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "Object"));
    },
    _isTop(object) {
      return true;
    },
    _asTop(object) {
      return object;
    },
    _isBool(object) {
      return true === object || false === object;
    },
    _asBool(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "bool"));
    },
    _asBoolS(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "bool"));
    },
    _asBoolQ(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "bool?"));
    },
    _asDouble(object) {
      if (typeof object == "number")
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "double"));
    },
    _asDoubleS(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "double"));
    },
    _asDoubleQ(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "double?"));
    },
    _isInt(object) {
      return typeof object == "number" && Math.floor(object) === object;
    },
    _asInt(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "int"));
    },
    _asIntS(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "int"));
    },
    _asIntQ(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "int?"));
    },
    _isNum(object) {
      return typeof object == "number";
    },
    _asNum(object) {
      if (typeof object == "number")
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "num"));
    },
    _asNumS(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "num"));
    },
    _asNumQ(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "num?"));
    },
    _isString(object) {
      return typeof object == "string";
    },
    _asString(object) {
      if (typeof object == "string")
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "String"));
    },
    _asStringS(object) {
      if (typeof object == "string")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "String"));
    },
    _asStringQ(object) {
      if (typeof object == "string")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "String?"));
    },
    _rtiArrayToString(array, genericContext) {
      var s, sep, i;
      for (s = "", sep = "", i = 0; i < array.length; ++i, sep = ", ")
        s += sep + A._rtiToString(array[i], genericContext);
      return s;
    },
    _functionRtiToString(functionType, genericContext, bounds) {
      var boundsLength, outerContextLength, offset, i, t1, t2, typeParametersText, typeSep, t3, t4, boundRti, kind, parameters, requiredPositional, requiredPositionalLength, optionalPositional, optionalPositionalLength, named, namedLength, returnTypeText, argumentsText, sep, _s2_ = ", ";
      if (bounds != null) {
        boundsLength = bounds.length;
        if (genericContext == null) {
          genericContext = A._setArrayType([], type$.JSArray_String);
          outerContextLength = null;
        } else
          outerContextLength = genericContext.length;
        offset = genericContext.length;
        for (i = boundsLength; i > 0; --i)
          B.JSArray_methods.add$1(genericContext, "T" + (offset + i));
        for (t1 = type$.nullable_Object, t2 = type$.legacy_Object, typeParametersText = "<", typeSep = "", i = 0; i < boundsLength; ++i, typeSep = _s2_) {
          typeParametersText += typeSep;
          t3 = genericContext.length;
          t4 = t3 - 1 - i;
          if (!(t4 >= 0))
            return A.ioore(genericContext, t4);
          typeParametersText = B.JSString_methods.$add(typeParametersText, genericContext[t4]);
          boundRti = bounds[i];
          kind = boundRti._kind;
          if (!(kind === 2 || kind === 3 || kind === 4 || kind === 5 || boundRti === t1))
            if (!(boundRti === t2))
              t3 = false;
            else
              t3 = true;
          else
            t3 = true;
          if (!t3)
            typeParametersText += " extends " + A._rtiToString(boundRti, genericContext);
        }
        typeParametersText += ">";
      } else {
        typeParametersText = "";
        outerContextLength = null;
      }
      t1 = functionType._primary;
      parameters = functionType._rest;
      requiredPositional = parameters._requiredPositional;
      requiredPositionalLength = requiredPositional.length;
      optionalPositional = parameters._optionalPositional;
      optionalPositionalLength = optionalPositional.length;
      named = parameters._named;
      namedLength = named.length;
      returnTypeText = A._rtiToString(t1, genericContext);
      for (argumentsText = "", sep = "", i = 0; i < requiredPositionalLength; ++i, sep = _s2_)
        argumentsText += sep + A._rtiToString(requiredPositional[i], genericContext);
      if (optionalPositionalLength > 0) {
        argumentsText += sep + "[";
        for (sep = "", i = 0; i < optionalPositionalLength; ++i, sep = _s2_)
          argumentsText += sep + A._rtiToString(optionalPositional[i], genericContext);
        argumentsText += "]";
      }
      if (namedLength > 0) {
        argumentsText += sep + "{";
        for (sep = "", i = 0; i < namedLength; i += 3, sep = _s2_) {
          argumentsText += sep;
          if (named[i + 1])
            argumentsText += "required ";
          argumentsText += A._rtiToString(named[i + 2], genericContext) + " " + named[i];
        }
        argumentsText += "}";
      }
      if (outerContextLength != null) {
        genericContext.toString;
        genericContext.length = outerContextLength;
      }
      return typeParametersText + "(" + argumentsText + ") => " + returnTypeText;
    },
    _rtiToString(rti, genericContext) {
      var s, questionArgument, argumentKind, $name, $arguments, t1, t2,
        kind = rti._kind;
      if (kind === 5)
        return "erased";
      if (kind === 2)
        return "dynamic";
      if (kind === 3)
        return "void";
      if (kind === 1)
        return "Never";
      if (kind === 4)
        return "any";
      if (kind === 6) {
        s = A._rtiToString(rti._primary, genericContext);
        return s;
      }
      if (kind === 7) {
        questionArgument = rti._primary;
        s = A._rtiToString(questionArgument, genericContext);
        argumentKind = questionArgument._kind;
        return (argumentKind === 11 || argumentKind === 12 ? "(" + s + ")" : s) + "?";
      }
      if (kind === 8)
        return "FutureOr<" + A._rtiToString(rti._primary, genericContext) + ">";
      if (kind === 9) {
        $name = A._unminifyOrTag(rti._primary);
        $arguments = rti._rest;
        return $arguments.length > 0 ? $name + ("<" + A._rtiArrayToString($arguments, genericContext) + ">") : $name;
      }
      if (kind === 11)
        return A._functionRtiToString(rti, genericContext, null);
      if (kind === 12)
        return A._functionRtiToString(rti._primary, genericContext, rti._rest);
      if (kind === 13) {
        t1 = rti._primary;
        t2 = genericContext.length;
        t1 = t2 - 1 - t1;
        if (!(t1 >= 0 && t1 < t2))
          return A.ioore(genericContext, t1);
        return genericContext[t1];
      }
      return "?";
    },
    _unminifyOrTag(rawClassName) {
      var preserved = init.mangledGlobalNames[rawClassName];
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    _Universe_findRule(universe, targetType) {
      var rule = universe.tR[targetType];
      for (; typeof rule == "string";)
        rule = universe.tR[rule];
      return rule;
    },
    _Universe_findErasedType(universe, cls) {
      var $length, erased, $arguments, i, $interface,
        t1 = universe.eT,
        probe = t1[cls];
      if (probe == null)
        return A._Universe_eval(universe, cls, false);
      else if (typeof probe == "number") {
        $length = probe;
        erased = A._Universe__lookupTerminalRti(universe, 5, "#");
        $arguments = A._Utils_newArrayOrEmpty($length);
        for (i = 0; i < $length; ++i)
          $arguments[i] = erased;
        $interface = A._Universe__lookupInterfaceRti(universe, cls, $arguments);
        t1[cls] = $interface;
        return $interface;
      } else
        return probe;
    },
    _Universe_addRules(universe, rules) {
      return A._Utils_objectAssign(universe.tR, rules);
    },
    _Universe_addErasedTypes(universe, types) {
      return A._Utils_objectAssign(universe.eT, types);
    },
    _Universe_eval(universe, recipe, normalize) {
      var rti,
        t1 = universe.eC,
        probe = t1.get(recipe);
      if (probe != null)
        return probe;
      rti = A._Parser_parse(A._Parser_create(universe, null, recipe, normalize));
      t1.set(recipe, rti);
      return rti;
    },
    _Universe_evalInEnvironment(universe, environment, recipe) {
      var probe, rti,
        cache = environment._evalCache;
      if (cache == null)
        cache = environment._evalCache = new Map();
      probe = cache.get(recipe);
      if (probe != null)
        return probe;
      rti = A._Parser_parse(A._Parser_create(universe, environment, recipe, true));
      cache.set(recipe, rti);
      return rti;
    },
    _Universe_bind(universe, environment, argumentsRti) {
      var argumentsRecipe, probe, rti,
        cache = environment._bindCache;
      if (cache == null)
        cache = environment._bindCache = new Map();
      argumentsRecipe = argumentsRti._canonicalRecipe;
      probe = cache.get(argumentsRecipe);
      if (probe != null)
        return probe;
      rti = A._Universe__lookupBindingRti(universe, environment, argumentsRti._kind === 10 ? argumentsRti._rest : [argumentsRti]);
      cache.set(argumentsRecipe, rti);
      return rti;
    },
    _Universe__installTypeTests(universe, rti) {
      rti._as = A._installSpecializedAsCheck;
      rti._is = A._installSpecializedIsTest;
      return rti;
    },
    _Universe__lookupTerminalRti(universe, kind, key) {
      var rti, t1,
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = kind;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupStarRti(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "*",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createStarRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createStarRti(universe, baseType, key, normalize) {
      var baseKind, t1, rti;
      if (normalize) {
        baseKind = baseType._kind;
        if (!A.isStrongTopType(baseType))
          t1 = baseType === type$.Null || baseType === type$.JSNull || baseKind === 7 || baseKind === 6;
        else
          t1 = true;
        if (t1)
          return baseType;
      }
      rti = new A.Rti(null, null);
      rti._kind = 6;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupQuestionRti(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "?",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createQuestionRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createQuestionRti(universe, baseType, key, normalize) {
      var baseKind, t1, starArgument, rti;
      if (normalize) {
        baseKind = baseType._kind;
        if (!A.isStrongTopType(baseType))
          if (!(baseType === type$.Null || baseType === type$.JSNull))
            if (baseKind !== 7)
              t1 = baseKind === 8 && A.isNullable(baseType._primary);
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
        if (t1)
          return baseType;
        else if (baseKind === 1 || baseType === type$.legacy_Never)
          return type$.Null;
        else if (baseKind === 6) {
          starArgument = baseType._primary;
          if (starArgument._kind === 8 && A.isNullable(starArgument._primary))
            return starArgument;
          else
            return A.Rti__getQuestionFromStar(universe, baseType);
        }
      }
      rti = new A.Rti(null, null);
      rti._kind = 7;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupFutureOrRti(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "/",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createFutureOrRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createFutureOrRti(universe, baseType, key, normalize) {
      var t1, t2, rti;
      if (normalize) {
        t1 = baseType._kind;
        if (!A.isStrongTopType(baseType))
          if (!(baseType === type$.legacy_Object))
            t2 = false;
          else
            t2 = true;
        else
          t2 = true;
        if (t2 || baseType === type$.Object)
          return baseType;
        else if (t1 === 1)
          return A._Universe__lookupInterfaceRti(universe, "Future", [baseType]);
        else if (baseType === type$.Null || baseType === type$.JSNull)
          return type$.nullable_Future_Null;
      }
      rti = new A.Rti(null, null);
      rti._kind = 8;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupGenericFunctionParameterRti(universe, index) {
      var rti, t1,
        key = "" + index + "^",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 13;
      rti._primary = index;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__canonicalRecipeJoin($arguments) {
      var s, sep, i,
        $length = $arguments.length;
      for (s = "", sep = "", i = 0; i < $length; ++i, sep = ",")
        s += sep + $arguments[i]._canonicalRecipe;
      return s;
    },
    _Universe__canonicalRecipeJoinNamed($arguments) {
      var s, sep, i, t1, nameSep, s0,
        $length = $arguments.length;
      for (s = "", sep = "", i = 0; i < $length; i += 3, sep = ",") {
        t1 = $arguments[i];
        nameSep = $arguments[i + 1] ? "!" : ":";
        s0 = $arguments[i + 2]._canonicalRecipe;
        s += sep + t1 + nameSep + s0;
      }
      return s;
    },
    _Universe__lookupInterfaceRti(universe, $name, $arguments) {
      var probe, rti, t1,
        s = $name;
      if ($arguments.length > 0)
        s += "<" + A._Universe__canonicalRecipeJoin($arguments) + ">";
      probe = universe.eC.get(s);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 9;
      rti._primary = $name;
      rti._rest = $arguments;
      if ($arguments.length > 0)
        rti._precomputed1 = $arguments[0];
      rti._canonicalRecipe = s;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(s, t1);
      return t1;
    },
    _Universe__lookupBindingRti(universe, base, $arguments) {
      var newBase, newArguments, key, probe, rti, t1;
      if (base._kind === 10) {
        newBase = base._primary;
        newArguments = base._rest.concat($arguments);
      } else {
        newArguments = $arguments;
        newBase = base;
      }
      key = newBase._canonicalRecipe + (";<" + A._Universe__canonicalRecipeJoin(newArguments) + ">");
      probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 10;
      rti._primary = newBase;
      rti._rest = newArguments;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupFunctionRti(universe, returnType, parameters) {
      var sep, t1, key, probe, rti,
        s = returnType._canonicalRecipe,
        requiredPositional = parameters._requiredPositional,
        requiredPositionalLength = requiredPositional.length,
        optionalPositional = parameters._optionalPositional,
        optionalPositionalLength = optionalPositional.length,
        named = parameters._named,
        namedLength = named.length,
        recipe = "(" + A._Universe__canonicalRecipeJoin(requiredPositional);
      if (optionalPositionalLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        t1 = A._Universe__canonicalRecipeJoin(optionalPositional);
        recipe += sep + "[" + t1 + "]";
      }
      if (namedLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        t1 = A._Universe__canonicalRecipeJoinNamed(named);
        recipe += sep + "{" + t1 + "}";
      }
      key = s + (recipe + ")");
      probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 11;
      rti._primary = returnType;
      rti._rest = parameters;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupGenericFunctionRti(universe, baseFunctionType, bounds, normalize) {
      var t1,
        key = baseFunctionType._canonicalRecipe + ("<" + A._Universe__canonicalRecipeJoin(bounds) + ">"),
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createGenericFunctionRti(universe, baseFunctionType, bounds, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createGenericFunctionRti(universe, baseFunctionType, bounds, key, normalize) {
      var $length, typeArguments, count, i, bound, substitutedBase, substitutedBounds, rti;
      if (normalize) {
        $length = bounds.length;
        typeArguments = A._Utils_newArrayOrEmpty($length);
        for (count = 0, i = 0; i < $length; ++i) {
          bound = bounds[i];
          if (bound._kind === 1) {
            typeArguments[i] = bound;
            ++count;
          }
        }
        if (count > 0) {
          substitutedBase = A._substitute(universe, baseFunctionType, typeArguments, 0);
          substitutedBounds = A._substituteArray(universe, bounds, typeArguments, 0);
          return A._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, bounds !== substitutedBounds);
        }
      }
      rti = new A.Rti(null, null);
      rti._kind = 12;
      rti._primary = baseFunctionType;
      rti._rest = bounds;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Parser_create(universe, environment, recipe, normalize) {
      return {u: universe, e: environment, r: recipe, s: [], p: 0, n: normalize};
    },
    _Parser_parse(parser) {
      var t2, i, ch, t3, array, head, base, parameters, optionalPositional, named, item,
        source = parser.r,
        t1 = parser.s;
      for (t2 = source.length, i = 0; i < t2;) {
        ch = source.charCodeAt(i);
        if (ch >= 48 && ch <= 57)
          i = A._Parser_handleDigit(i + 1, ch, source, t1);
        else if ((((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36)
          i = A._Parser_handleIdentifier(parser, i, source, t1, false);
        else if (ch === 46)
          i = A._Parser_handleIdentifier(parser, i, source, t1, true);
        else {
          ++i;
          switch (ch) {
            case 44:
              break;
            case 58:
              t1.push(false);
              break;
            case 33:
              t1.push(true);
              break;
            case 59:
              t1.push(A._Parser_toType(parser.u, parser.e, t1.pop()));
              break;
            case 94:
              t1.push(A._Universe__lookupGenericFunctionParameterRti(parser.u, t1.pop()));
              break;
            case 35:
              t1.push(A._Universe__lookupTerminalRti(parser.u, 5, "#"));
              break;
            case 64:
              t1.push(A._Universe__lookupTerminalRti(parser.u, 2, "@"));
              break;
            case 126:
              t1.push(A._Universe__lookupTerminalRti(parser.u, 3, "~"));
              break;
            case 60:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 62:
              t3 = parser.u;
              array = t1.splice(parser.p);
              A._Parser_toTypes(parser.u, parser.e, array);
              parser.p = t1.pop();
              head = t1.pop();
              if (typeof head == "string")
                t1.push(A._Universe__lookupInterfaceRti(t3, head, array));
              else {
                base = A._Parser_toType(t3, parser.e, head);
                switch (base._kind) {
                  case 11:
                    t1.push(A._Universe__lookupGenericFunctionRti(t3, base, array, parser.n));
                    break;
                  default:
                    t1.push(A._Universe__lookupBindingRti(t3, base, array));
                    break;
                }
              }
              break;
            case 38:
              A._Parser_handleExtendedOperations(parser, t1);
              break;
            case 42:
              t3 = parser.u;
              t1.push(A._Universe__lookupStarRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 63:
              t3 = parser.u;
              t1.push(A._Universe__lookupQuestionRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 47:
              t3 = parser.u;
              t1.push(A._Universe__lookupFutureOrRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 40:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 41:
              t3 = parser.u;
              parameters = new A._FunctionParameters();
              optionalPositional = t3.sEA;
              named = t3.sEA;
              head = t1.pop();
              if (typeof head == "number")
                switch (head) {
                  case -1:
                    optionalPositional = t1.pop();
                    break;
                  case -2:
                    named = t1.pop();
                    break;
                  default:
                    t1.push(head);
                    break;
                }
              else
                t1.push(head);
              array = t1.splice(parser.p);
              A._Parser_toTypes(parser.u, parser.e, array);
              parser.p = t1.pop();
              parameters._requiredPositional = array;
              parameters._optionalPositional = optionalPositional;
              parameters._named = named;
              t1.push(A._Universe__lookupFunctionRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parameters));
              break;
            case 91:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 93:
              array = t1.splice(parser.p);
              A._Parser_toTypes(parser.u, parser.e, array);
              parser.p = t1.pop();
              t1.push(array);
              t1.push(-1);
              break;
            case 123:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 125:
              array = t1.splice(parser.p);
              A._Parser_toTypesNamed(parser.u, parser.e, array);
              parser.p = t1.pop();
              t1.push(array);
              t1.push(-2);
              break;
            default:
              throw "Bad character " + ch;
          }
        }
      }
      item = t1.pop();
      return A._Parser_toType(parser.u, parser.e, item);
    },
    _Parser_handleDigit(i, digit, source, stack) {
      var t1, ch,
        value = digit - 48;
      for (t1 = source.length; i < t1; ++i) {
        ch = source.charCodeAt(i);
        if (!(ch >= 48 && ch <= 57))
          break;
        value = value * 10 + (ch - 48);
      }
      stack.push(value);
      return i;
    },
    _Parser_handleIdentifier(parser, start, source, stack, hasPeriod) {
      var t1, ch, t2, string, environment, recipe,
        i = start + 1;
      for (t1 = source.length; i < t1; ++i) {
        ch = source.charCodeAt(i);
        if (ch === 46) {
          if (hasPeriod)
            break;
          hasPeriod = true;
        } else {
          if (!((((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36))
            t2 = ch >= 48 && ch <= 57;
          else
            t2 = true;
          if (!t2)
            break;
        }
      }
      string = source.substring(start, i);
      if (hasPeriod) {
        t1 = parser.u;
        environment = parser.e;
        if (environment._kind === 10)
          environment = environment._primary;
        recipe = A._Universe_findRule(t1, environment._primary)[string];
        if (recipe == null)
          A.throwExpression('No "' + string + '" in "' + A.Rti__getCanonicalRecipe(environment) + '"');
        stack.push(A._Universe_evalInEnvironment(t1, environment, recipe));
      } else
        stack.push(string);
      return i;
    },
    _Parser_handleExtendedOperations(parser, stack) {
      var $top = stack.pop();
      if (0 === $top) {
        stack.push(A._Universe__lookupTerminalRti(parser.u, 1, "0&"));
        return;
      }
      if (1 === $top) {
        stack.push(A._Universe__lookupTerminalRti(parser.u, 4, "1&"));
        return;
      }
      throw A.wrapException(A.AssertionError$("Unexpected extended operation " + A.S($top)));
    },
    _Parser_toType(universe, environment, item) {
      if (typeof item == "string")
        return A._Universe__lookupInterfaceRti(universe, item, universe.sEA);
      else if (typeof item == "number")
        return A._Parser_indexToType(universe, environment, item);
      else
        return item;
    },
    _Parser_toTypes(universe, environment, items) {
      var i,
        $length = items.length;
      for (i = 0; i < $length; ++i)
        items[i] = A._Parser_toType(universe, environment, items[i]);
    },
    _Parser_toTypesNamed(universe, environment, items) {
      var i,
        $length = items.length;
      for (i = 2; i < $length; i += 3)
        items[i] = A._Parser_toType(universe, environment, items[i]);
    },
    _Parser_indexToType(universe, environment, index) {
      var typeArguments, len,
        kind = environment._kind;
      if (kind === 10) {
        if (index === 0)
          return environment._primary;
        typeArguments = environment._rest;
        len = typeArguments.length;
        if (index <= len)
          return typeArguments[index - 1];
        index -= len;
        environment = environment._primary;
        kind = environment._kind;
      } else if (index === 0)
        return environment;
      if (kind !== 9)
        throw A.wrapException(A.AssertionError$("Indexed base must be an interface type"));
      typeArguments = environment._rest;
      if (index <= typeArguments.length)
        return typeArguments[index - 1];
      throw A.wrapException(A.AssertionError$("Bad index " + index + " for " + environment.toString$0(0)));
    },
    _isSubtype(universe, s, sEnv, t, tEnv) {
      var t1, sKind, leftTypeVariable, tKind, sBounds, tBounds, sLength, i, sBound, tBound;
      if (s === t)
        return true;
      if (!A.isStrongTopType(t))
        if (!(t === type$.legacy_Object))
          t1 = false;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        return true;
      sKind = s._kind;
      if (sKind === 4)
        return true;
      if (A.isStrongTopType(s))
        return false;
      if (s._kind !== 1)
        t1 = false;
      else
        t1 = true;
      if (t1)
        return true;
      leftTypeVariable = sKind === 13;
      if (leftTypeVariable)
        if (A._isSubtype(universe, sEnv[s._primary], sEnv, t, tEnv))
          return true;
      tKind = t._kind;
      t1 = s === type$.Null || s === type$.JSNull;
      if (t1) {
        if (tKind === 8)
          return A._isSubtype(universe, s, sEnv, t._primary, tEnv);
        return t === type$.Null || t === type$.JSNull || tKind === 7 || tKind === 6;
      }
      if (t === type$.Object) {
        if (sKind === 8)
          return A._isSubtype(universe, s._primary, sEnv, t, tEnv);
        if (sKind === 6)
          return A._isSubtype(universe, s._primary, sEnv, t, tEnv);
        return sKind !== 7;
      }
      if (sKind === 6)
        return A._isSubtype(universe, s._primary, sEnv, t, tEnv);
      if (tKind === 6) {
        t1 = A.Rti__getQuestionFromStar(universe, t);
        return A._isSubtype(universe, s, sEnv, t1, tEnv);
      }
      if (sKind === 8) {
        if (!A._isSubtype(universe, s._primary, sEnv, t, tEnv))
          return false;
        return A._isSubtype(universe, A.Rti__getFutureFromFutureOr(universe, s), sEnv, t, tEnv);
      }
      if (sKind === 7) {
        t1 = A._isSubtype(universe, type$.Null, sEnv, t, tEnv);
        return t1 && A._isSubtype(universe, s._primary, sEnv, t, tEnv);
      }
      if (tKind === 8) {
        if (A._isSubtype(universe, s, sEnv, t._primary, tEnv))
          return true;
        return A._isSubtype(universe, s, sEnv, A.Rti__getFutureFromFutureOr(universe, t), tEnv);
      }
      if (tKind === 7) {
        t1 = A._isSubtype(universe, s, sEnv, type$.Null, tEnv);
        return t1 || A._isSubtype(universe, s, sEnv, t._primary, tEnv);
      }
      if (leftTypeVariable)
        return false;
      t1 = sKind !== 11;
      if ((!t1 || sKind === 12) && t === type$.Function)
        return true;
      if (tKind === 12) {
        if (s === type$.JavaScriptFunction)
          return true;
        if (sKind !== 12)
          return false;
        sBounds = s._rest;
        tBounds = t._rest;
        sLength = sBounds.length;
        if (sLength !== tBounds.length)
          return false;
        sEnv = sEnv == null ? sBounds : sBounds.concat(sEnv);
        tEnv = tEnv == null ? tBounds : tBounds.concat(tEnv);
        for (i = 0; i < sLength; ++i) {
          sBound = sBounds[i];
          tBound = tBounds[i];
          if (!A._isSubtype(universe, sBound, sEnv, tBound, tEnv) || !A._isSubtype(universe, tBound, tEnv, sBound, sEnv))
            return false;
        }
        return A._isFunctionSubtype(universe, s._primary, sEnv, t._primary, tEnv);
      }
      if (tKind === 11) {
        if (s === type$.JavaScriptFunction)
          return true;
        if (t1)
          return false;
        return A._isFunctionSubtype(universe, s, sEnv, t, tEnv);
      }
      if (sKind === 9) {
        if (tKind !== 9)
          return false;
        return A._isInterfaceSubtype(universe, s, sEnv, t, tEnv);
      }
      return false;
    },
    _isFunctionSubtype(universe, s, sEnv, t, tEnv) {
      var sParameters, tParameters, sRequiredPositional, tRequiredPositional, sRequiredPositionalLength, tRequiredPositionalLength, requiredPositionalDelta, sOptionalPositional, tOptionalPositional, sOptionalPositionalLength, tOptionalPositionalLength, i, t1, sNamed, tNamed, sNamedLength, tNamedLength, sIndex, tIndex, tName, sName, sIsRequired;
      if (!A._isSubtype(universe, s._primary, sEnv, t._primary, tEnv))
        return false;
      sParameters = s._rest;
      tParameters = t._rest;
      sRequiredPositional = sParameters._requiredPositional;
      tRequiredPositional = tParameters._requiredPositional;
      sRequiredPositionalLength = sRequiredPositional.length;
      tRequiredPositionalLength = tRequiredPositional.length;
      if (sRequiredPositionalLength > tRequiredPositionalLength)
        return false;
      requiredPositionalDelta = tRequiredPositionalLength - sRequiredPositionalLength;
      sOptionalPositional = sParameters._optionalPositional;
      tOptionalPositional = tParameters._optionalPositional;
      sOptionalPositionalLength = sOptionalPositional.length;
      tOptionalPositionalLength = tOptionalPositional.length;
      if (sRequiredPositionalLength + sOptionalPositionalLength < tRequiredPositionalLength + tOptionalPositionalLength)
        return false;
      for (i = 0; i < sRequiredPositionalLength; ++i) {
        t1 = sRequiredPositional[i];
        if (!A._isSubtype(universe, tRequiredPositional[i], tEnv, t1, sEnv))
          return false;
      }
      for (i = 0; i < requiredPositionalDelta; ++i) {
        t1 = sOptionalPositional[i];
        if (!A._isSubtype(universe, tRequiredPositional[sRequiredPositionalLength + i], tEnv, t1, sEnv))
          return false;
      }
      for (i = 0; i < tOptionalPositionalLength; ++i) {
        t1 = sOptionalPositional[requiredPositionalDelta + i];
        if (!A._isSubtype(universe, tOptionalPositional[i], tEnv, t1, sEnv))
          return false;
      }
      sNamed = sParameters._named;
      tNamed = tParameters._named;
      sNamedLength = sNamed.length;
      tNamedLength = tNamed.length;
      for (sIndex = 0, tIndex = 0; tIndex < tNamedLength; tIndex += 3) {
        tName = tNamed[tIndex];
        for (; true;) {
          if (sIndex >= sNamedLength)
            return false;
          sName = sNamed[sIndex];
          sIndex += 3;
          if (tName < sName)
            return false;
          sIsRequired = sNamed[sIndex - 2];
          if (sName < tName) {
            if (sIsRequired)
              return false;
            continue;
          }
          t1 = tNamed[tIndex + 1];
          if (sIsRequired && !t1)
            return false;
          t1 = sNamed[sIndex - 1];
          if (!A._isSubtype(universe, tNamed[tIndex + 2], tEnv, t1, sEnv))
            return false;
          break;
        }
      }
      for (; sIndex < sNamedLength;) {
        if (sNamed[sIndex + 1])
          return false;
        sIndex += 3;
      }
      return true;
    },
    _isInterfaceSubtype(universe, s, sEnv, t, tEnv) {
      var rule, recipes, $length, supertypeArgs, i, t1, t2,
        sName = s._primary,
        tName = t._primary;
      for (; sName !== tName;) {
        rule = universe.tR[sName];
        if (rule == null)
          return false;
        if (typeof rule == "string") {
          sName = rule;
          continue;
        }
        recipes = rule[tName];
        if (recipes == null)
          return false;
        $length = recipes.length;
        supertypeArgs = $length > 0 ? new Array($length) : init.typeUniverse.sEA;
        for (i = 0; i < $length; ++i)
          supertypeArgs[i] = A._Universe_evalInEnvironment(universe, s, recipes[i]);
        return A._areArgumentsSubtypes(universe, supertypeArgs, null, sEnv, t._rest, tEnv);
      }
      t1 = s._rest;
      t2 = t._rest;
      return A._areArgumentsSubtypes(universe, t1, null, sEnv, t2, tEnv);
    },
    _areArgumentsSubtypes(universe, sArgs, sVariances, sEnv, tArgs, tEnv) {
      var i, t1, t2,
        $length = sArgs.length;
      for (i = 0; i < $length; ++i) {
        t1 = sArgs[i];
        t2 = tArgs[i];
        if (!A._isSubtype(universe, t1, sEnv, t2, tEnv))
          return false;
      }
      return true;
    },
    isNullable(t) {
      var t1,
        kind = t._kind;
      if (!(t === type$.Null || t === type$.JSNull))
        if (!A.isStrongTopType(t))
          if (kind !== 7)
            if (!(kind === 6 && A.isNullable(t._primary)))
              t1 = kind === 8 && A.isNullable(t._primary);
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    isTopType(t) {
      var t1;
      if (!A.isStrongTopType(t))
        if (!(t === type$.legacy_Object))
          t1 = false;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    isStrongTopType(t) {
      var kind = t._kind;
      return kind === 2 || kind === 3 || kind === 4 || kind === 5 || t === type$.nullable_Object;
    },
    _Utils_objectAssign(o, other) {
      var i, key,
        keys = Object.keys(other),
        $length = keys.length;
      for (i = 0; i < $length; ++i) {
        key = keys[i];
        o[key] = other[key];
      }
    },
    _Utils_newArrayOrEmpty($length) {
      return $length > 0 ? new Array($length) : init.typeUniverse.sEA;
    },
    Rti: function Rti(t0, t1) {
      var _ = this;
      _._as = t0;
      _._is = t1;
      _._cachedRuntimeType = _._specializedTestResource = _._precomputed1 = null;
      _._kind = 0;
      _._canonicalRecipe = _._bindCache = _._evalCache = _._rest = _._primary = null;
    },
    _FunctionParameters: function _FunctionParameters() {
      this._named = this._optionalPositional = this._requiredPositional = null;
    },
    _Type: function _Type(t0) {
      this._rti = t0;
    },
    _Error: function _Error() {
    },
    _TypeError: function _TypeError(t0) {
      this.__rti$_message = t0;
    },
    _AsyncRun__initializeScheduleImmediate() {
      var div, span, t1 = {};
      if (self.scheduleImmediate != null)
        return A.async__AsyncRun__scheduleImmediateJsOverride$closure();
      if (self.MutationObserver != null && self.document != null) {
        div = self.document.createElement("div");
        span = self.document.createElement("span");
        t1.storedCallback = null;
        new self.MutationObserver(A.convertDartClosureToJS(new A._AsyncRun__initializeScheduleImmediate_internalCallback(t1), 1)).observe(div, {childList: true});
        return new A._AsyncRun__initializeScheduleImmediate_closure(t1, div, span);
      } else if (self.setImmediate != null)
        return A.async__AsyncRun__scheduleImmediateWithSetImmediate$closure();
      return A.async__AsyncRun__scheduleImmediateWithTimer$closure();
    },
    _AsyncRun__scheduleImmediateJsOverride(callback) {
      self.scheduleImmediate(A.convertDartClosureToJS(new A._AsyncRun__scheduleImmediateJsOverride_internalCallback(type$.void_Function._as(callback)), 0));
    },
    _AsyncRun__scheduleImmediateWithSetImmediate(callback) {
      self.setImmediate(A.convertDartClosureToJS(new A._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(type$.void_Function._as(callback)), 0));
    },
    _AsyncRun__scheduleImmediateWithTimer(callback) {
      type$.void_Function._as(callback);
      A._TimerImpl$(0, callback);
    },
    _TimerImpl$(milliseconds, callback) {
      var t1 = new A._TimerImpl();
      t1._TimerImpl$2(milliseconds, callback);
      return t1;
    },
    AsyncError$(error, stackTrace) {
      var t1 = A.checkNotNullable(error, "error", type$.Object);
      return new A.AsyncError(t1, stackTrace == null ? A.AsyncError_defaultStackTrace(error) : stackTrace);
    },
    AsyncError_defaultStackTrace(error) {
      var stackTrace;
      if (type$.Error._is(error)) {
        stackTrace = error.get$stackTrace();
        if (stackTrace != null)
          return stackTrace;
      }
      return B.C__StringStackTrace;
    },
    _Future__chainCoreFuture(source, target) {
      var t1, t2, listeners;
      for (t1 = type$._Future_dynamic; t2 = source._state, (t2 & 4) !== 0;)
        source = t1._as(source._resultOrListeners);
      if ((t2 & 24) !== 0) {
        listeners = target._removeListeners$0();
        target._cloneResult$1(source);
        A._Future__propagateToListeners(target, listeners);
      } else {
        listeners = type$.nullable__FutureListener_dynamic_dynamic._as(target._resultOrListeners);
        target._state = target._state & 1 | 4;
        target._resultOrListeners = source;
        source._prependListeners$1(listeners);
      }
    },
    _Future__propagateToListeners(source, listeners) {
      var t2, t3, t4, _box_0, t5, t6, hasError, asyncError, nextListener, nextListener0, sourceResult, t7, zone, oldZone, result, current, _box_1 = {},
        t1 = _box_1.source = source;
      for (t2 = type$.AsyncError, t3 = type$.nullable__FutureListener_dynamic_dynamic, t4 = type$.Future_dynamic; true;) {
        _box_0 = {};
        t5 = t1._state;
        t6 = (t5 & 16) === 0;
        hasError = !t6;
        if (listeners == null) {
          if (hasError && (t5 & 1) === 0) {
            asyncError = t2._as(t1._resultOrListeners);
            A._rootHandleError(asyncError.error, asyncError.stackTrace);
          }
          return;
        }
        _box_0.listener = listeners;
        nextListener = listeners._nextListener;
        for (t1 = listeners; nextListener != null; t1 = nextListener, nextListener = nextListener0) {
          t1._nextListener = null;
          A._Future__propagateToListeners(_box_1.source, t1);
          _box_0.listener = nextListener;
          nextListener0 = nextListener._nextListener;
        }
        t5 = _box_1.source;
        sourceResult = t5._resultOrListeners;
        _box_0.listenerHasError = hasError;
        _box_0.listenerValueOrError = sourceResult;
        if (t6) {
          t7 = t1.state;
          t7 = (t7 & 1) !== 0 || (t7 & 15) === 8;
        } else
          t7 = true;
        if (t7) {
          zone = t1.result._zone;
          if (hasError) {
            t5 = t5._zone === zone;
            t5 = !(t5 || t5);
          } else
            t5 = false;
          if (t5) {
            t2._as(sourceResult);
            A._rootHandleError(sourceResult.error, sourceResult.stackTrace);
            return;
          }
          oldZone = $.Zone__current;
          if (oldZone !== zone)
            $.Zone__current = zone;
          else
            oldZone = null;
          t1 = t1.state;
          if ((t1 & 15) === 8)
            new A._Future__propagateToListeners_handleWhenCompleteCallback(_box_0, _box_1, hasError).call$0();
          else if (t6) {
            if ((t1 & 1) !== 0)
              new A._Future__propagateToListeners_handleValueCallback(_box_0, sourceResult).call$0();
          } else if ((t1 & 2) !== 0)
            new A._Future__propagateToListeners_handleError(_box_1, _box_0).call$0();
          if (oldZone != null)
            $.Zone__current = oldZone;
          t1 = _box_0.listenerValueOrError;
          if (t4._is(t1)) {
            t5 = _box_0.listener.$ti;
            t5 = t5._eval$1("Future<2>")._is(t1) || !t5._rest[1]._is(t1);
          } else
            t5 = false;
          if (t5) {
            t4._as(t1);
            result = _box_0.listener.result;
            if ((t1._state & 24) !== 0) {
              current = t3._as(result._resultOrListeners);
              result._resultOrListeners = null;
              listeners = result._reverseListeners$1(current);
              result._state = t1._state & 30 | result._state & 1;
              result._resultOrListeners = t1._resultOrListeners;
              _box_1.source = t1;
              continue;
            } else
              A._Future__chainCoreFuture(t1, result);
            return;
          }
        }
        result = _box_0.listener.result;
        current = t3._as(result._resultOrListeners);
        result._resultOrListeners = null;
        listeners = result._reverseListeners$1(current);
        t1 = _box_0.listenerHasError;
        t5 = _box_0.listenerValueOrError;
        if (!t1) {
          result.$ti._precomputed1._as(t5);
          result._state = 8;
          result._resultOrListeners = t5;
        } else {
          t2._as(t5);
          result._state = result._state & 1 | 16;
          result._resultOrListeners = t5;
        }
        _box_1.source = result;
        t1 = result;
      }
    },
    _registerErrorHandler(errorHandler, zone) {
      var t1 = type$.dynamic_Function_Object_StackTrace;
      if (t1._is(errorHandler))
        return t1._as(errorHandler);
      t1 = type$.dynamic_Function_Object;
      if (t1._is(errorHandler))
        return t1._as(errorHandler);
      throw A.wrapException(A.ArgumentError$value(errorHandler, "onError", string$.Error_));
    },
    _microtaskLoop() {
      var entry, next;
      for (entry = $._nextCallback; entry != null; entry = $._nextCallback) {
        $._lastPriorityCallback = null;
        next = entry.next;
        $._nextCallback = next;
        if (next == null)
          $._lastCallback = null;
        entry.callback.call$0();
      }
    },
    _startMicrotaskLoop() {
      $._isInCallbackLoop = true;
      try {
        A._microtaskLoop();
      } finally {
        $._lastPriorityCallback = null;
        $._isInCallbackLoop = false;
        if ($._nextCallback != null)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(A.async___startMicrotaskLoop$closure());
      }
    },
    _scheduleAsyncCallback(callback) {
      var newEntry = new A._AsyncCallbackEntry(callback),
        lastCallback = $._lastCallback;
      if (lastCallback == null) {
        $._nextCallback = $._lastCallback = newEntry;
        if (!$._isInCallbackLoop)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(A.async___startMicrotaskLoop$closure());
      } else
        $._lastCallback = lastCallback.next = newEntry;
    },
    _schedulePriorityAsyncCallback(callback) {
      var entry, lastPriorityCallback, next,
        t1 = $._nextCallback;
      if (t1 == null) {
        A._scheduleAsyncCallback(callback);
        $._lastPriorityCallback = $._lastCallback;
        return;
      }
      entry = new A._AsyncCallbackEntry(callback);
      lastPriorityCallback = $._lastPriorityCallback;
      if (lastPriorityCallback == null) {
        entry.next = t1;
        $._nextCallback = $._lastPriorityCallback = entry;
      } else {
        next = lastPriorityCallback.next;
        entry.next = next;
        $._lastPriorityCallback = lastPriorityCallback.next = entry;
        if (next == null)
          $._lastCallback = entry;
      }
    },
    _rootHandleError(error, stackTrace) {
      A._schedulePriorityAsyncCallback(new A._rootHandleError_closure(error, stackTrace));
    },
    _rootRun($self, $parent, zone, f, $R) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$0();
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$0();
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunUnary($self, $parent, zone, f, arg, $R, $T) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$1(arg);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$1(arg);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunBinary($self, $parent, zone, f, arg1, arg2, $R, T1, T2) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$2(arg1, arg2);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$2(arg1, arg2);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootScheduleMicrotask($self, $parent, zone, f) {
      type$.void_Function._as(f);
      if (B.C__RootZone !== zone)
        f = zone.bindCallbackGuarded$1(f);
      A._scheduleAsyncCallback(f);
    },
    _AsyncRun__initializeScheduleImmediate_internalCallback: function _AsyncRun__initializeScheduleImmediate_internalCallback(t0) {
      this._box_0 = t0;
    },
    _AsyncRun__initializeScheduleImmediate_closure: function _AsyncRun__initializeScheduleImmediate_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.div = t1;
      this.span = t2;
    },
    _AsyncRun__scheduleImmediateJsOverride_internalCallback: function _AsyncRun__scheduleImmediateJsOverride_internalCallback(t0) {
      this.callback = t0;
    },
    _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback: function _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(t0) {
      this.callback = t0;
    },
    _TimerImpl: function _TimerImpl() {
    },
    _TimerImpl_internalCallback: function _TimerImpl_internalCallback(t0, t1) {
      this.$this = t0;
      this.callback = t1;
    },
    AsyncError: function AsyncError(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    _Completer: function _Completer() {
    },
    _AsyncCompleter: function _AsyncCompleter(t0, t1) {
      this.future = t0;
      this.$ti = t1;
    },
    _FutureListener: function _FutureListener(t0, t1, t2, t3, t4) {
      var _ = this;
      _._nextListener = null;
      _.result = t0;
      _.state = t1;
      _.callback = t2;
      _.errorCallback = t3;
      _.$ti = t4;
    },
    _Future: function _Future(t0, t1) {
      var _ = this;
      _._state = 0;
      _._zone = t0;
      _._resultOrListeners = null;
      _.$ti = t1;
    },
    _Future__addListener_closure: function _Future__addListener_closure(t0, t1) {
      this.$this = t0;
      this.listener = t1;
    },
    _Future__prependListeners_closure: function _Future__prependListeners_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _Future__asyncCompleteWithValue_closure: function _Future__asyncCompleteWithValue_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback: function _Future__propagateToListeners_handleWhenCompleteCallback(t0, t1, t2) {
      this._box_0 = t0;
      this._box_1 = t1;
      this.hasError = t2;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback_closure: function _Future__propagateToListeners_handleWhenCompleteCallback_closure(t0) {
      this.originalSource = t0;
    },
    _Future__propagateToListeners_handleValueCallback: function _Future__propagateToListeners_handleValueCallback(t0, t1) {
      this._box_0 = t0;
      this.sourceResult = t1;
    },
    _Future__propagateToListeners_handleError: function _Future__propagateToListeners_handleError(t0, t1) {
      this._box_1 = t0;
      this._box_0 = t1;
    },
    _AsyncCallbackEntry: function _AsyncCallbackEntry(t0) {
      this.callback = t0;
      this.next = null;
    },
    Stream: function Stream() {
    },
    Stream_length_closure: function Stream_length_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    Stream_length_closure0: function Stream_length_closure0(t0, t1) {
      this._box_0 = t0;
      this.future = t1;
    },
    StreamSubscription: function StreamSubscription() {
    },
    _Zone: function _Zone() {
    },
    _rootHandleError_closure: function _rootHandleError_closure(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    _RootZone: function _RootZone() {
    },
    _RootZone_bindCallbackGuarded_closure: function _RootZone_bindCallbackGuarded_closure(t0, t1) {
      this.$this = t0;
      this.f = t1;
    },
    _RootZone_bindUnaryCallbackGuarded_closure: function _RootZone_bindUnaryCallbackGuarded_closure(t0, t1, t2) {
      this.$this = t0;
      this.f = t1;
      this.T = t2;
    },
    LinkedHashMap_LinkedHashMap$_empty($K, $V) {
      return new A.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"));
    },
    LinkedHashSet_LinkedHashSet$_empty($E) {
      return new A._LinkedHashSet($E._eval$1("_LinkedHashSet<0>"));
    },
    _LinkedHashSet__newHashTable() {
      var table = Object.create(null);
      table["<non-identifier-key>"] = table;
      delete table["<non-identifier-key>"];
      return table;
    },
    IterableBase_iterableToShortString(iterable, leftDelimiter, rightDelimiter) {
      var parts, t1;
      if (A._isToStringVisiting(iterable)) {
        if (leftDelimiter === "(" && rightDelimiter === ")")
          return "(...)";
        return leftDelimiter + "..." + rightDelimiter;
      }
      parts = A._setArrayType([], type$.JSArray_String);
      B.JSArray_methods.add$1($._toStringVisiting, iterable);
      try {
        A._iterablePartsToStrings(iterable, parts);
      } finally {
        if (0 >= $._toStringVisiting.length)
          return A.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
      }
      t1 = A.StringBuffer__writeAll(leftDelimiter, type$.Iterable_dynamic._as(parts), ", ") + rightDelimiter;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    IterableBase_iterableToFullString(iterable, leftDelimiter, rightDelimiter) {
      var buffer, t1;
      if (A._isToStringVisiting(iterable))
        return leftDelimiter + "..." + rightDelimiter;
      buffer = new A.StringBuffer(leftDelimiter);
      B.JSArray_methods.add$1($._toStringVisiting, iterable);
      try {
        t1 = buffer;
        t1._contents = A.StringBuffer__writeAll(t1._contents, iterable, ", ");
      } finally {
        if (0 >= $._toStringVisiting.length)
          return A.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
      }
      buffer._contents += rightDelimiter;
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _isToStringVisiting(o) {
      var t1, i;
      for (t1 = $._toStringVisiting.length, i = 0; i < t1; ++i)
        if (o === $._toStringVisiting[i])
          return true;
      return false;
    },
    _iterablePartsToStrings(iterable, parts) {
      var next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision,
        it = iterable.get$iterator(iterable),
        $length = 0, count = 0;
      while (true) {
        if (!($length < 80 || count < 3))
          break;
        if (!it.moveNext$0())
          return;
        next = A.S(it.get$current(it));
        B.JSArray_methods.add$1(parts, next);
        $length += next.length + 2;
        ++count;
      }
      if (!it.moveNext$0()) {
        if (count <= 5)
          return;
        if (0 >= parts.length)
          return A.ioore(parts, -1);
        ultimateString = parts.pop();
        if (0 >= parts.length)
          return A.ioore(parts, -1);
        penultimateString = parts.pop();
      } else {
        penultimate = it.get$current(it);
        ++count;
        if (!it.moveNext$0()) {
          if (count <= 4) {
            B.JSArray_methods.add$1(parts, A.S(penultimate));
            return;
          }
          ultimateString = A.S(penultimate);
          if (0 >= parts.length)
            return A.ioore(parts, -1);
          penultimateString = parts.pop();
          $length += ultimateString.length + 2;
        } else {
          ultimate = it.get$current(it);
          ++count;
          for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
            ultimate0 = it.get$current(it);
            ++count;
            if (count > 100) {
              while (true) {
                if (!($length > 75 && count > 3))
                  break;
                if (0 >= parts.length)
                  return A.ioore(parts, -1);
                $length -= parts.pop().length + 2;
                --count;
              }
              B.JSArray_methods.add$1(parts, "...");
              return;
            }
          }
          penultimateString = A.S(penultimate);
          ultimateString = A.S(ultimate);
          $length += ultimateString.length + penultimateString.length + 4;
        }
      }
      if (count > parts.length + 2) {
        $length += 5;
        elision = "...";
      } else
        elision = null;
      while (true) {
        if (!($length > 80 && parts.length > 3))
          break;
        if (0 >= parts.length)
          return A.ioore(parts, -1);
        $length -= parts.pop().length + 2;
        if (elision == null) {
          $length += 5;
          elision = "...";
        }
      }
      if (elision != null)
        B.JSArray_methods.add$1(parts, elision);
      B.JSArray_methods.add$1(parts, penultimateString);
      B.JSArray_methods.add$1(parts, ultimateString);
    },
    MapBase_mapToString(m) {
      var result, t1 = {};
      if (A._isToStringVisiting(m))
        return "{...}";
      result = new A.StringBuffer("");
      try {
        B.JSArray_methods.add$1($._toStringVisiting, m);
        result._contents += "{";
        t1.first = true;
        J.forEach$1$ax(m, new A.MapBase_mapToString_closure(t1, result));
        result._contents += "}";
      } finally {
        if (0 >= $._toStringVisiting.length)
          return A.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
      }
      t1 = result._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _LinkedHashSet: function _LinkedHashSet(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._collection$_last = _._collection$_first = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _._collection$_modifications = 0;
      _.$ti = t0;
    },
    _LinkedHashSetCell: function _LinkedHashSetCell(t0) {
      this._element = t0;
      this._collection$_next = null;
    },
    _LinkedHashSetIterator: function _LinkedHashSetIterator(t0, t1, t2) {
      var _ = this;
      _._set = t0;
      _._collection$_modifications = t1;
      _._collection$_current = _._collection$_cell = null;
      _.$ti = t2;
    },
    ListMixin: function ListMixin() {
    },
    MapBase: function MapBase() {
    },
    MapBase_mapToString_closure: function MapBase_mapToString_closure(t0, t1) {
      this._box_0 = t0;
      this.result = t1;
    },
    MapMixin: function MapMixin() {
    },
    SetMixin: function SetMixin() {
    },
    _SetBase: function _SetBase() {
    },
    __SetBase_Object_SetMixin: function __SetBase_Object_SetMixin() {
    },
    Error__objectToString(object) {
      if (object instanceof A.Closure)
        return object.toString$0(0);
      return "Instance of '" + A.Primitives_objectTypeName(object) + "'";
    },
    List_List$filled($length, fill, $E) {
      var i,
        result = J.JSArray_JSArray$fixed($length, $E);
      if ($length !== 0 && fill != null)
        for (i = 0; i < $length; ++i)
          result[i] = fill;
      return result;
    },
    List_List$of(elements, $E) {
      var t1 = A.List_List$_of(elements, $E);
      return t1;
    },
    List_List$_of(elements, $E) {
      var t1 = A._setArrayType(elements.slice(0), $E._eval$1("JSArray<0>"));
      return t1;
    },
    List_List$generate($length, generator, $E) {
      var i,
        result = J.JSArray_JSArray$growable($length, $E);
      for (i = 0; i < $length; ++i)
        B.JSArray_methods.$indexSet(result, i, generator.call$1(i));
      return result;
    },
    StringBuffer__writeAll(string, objects, separator) {
      var iterator = J.get$iterator$ax(objects);
      if (!iterator.moveNext$0())
        return string;
      if (separator.length === 0) {
        do
          string += A.S(iterator.get$current(iterator));
        while (iterator.moveNext$0());
      } else {
        string += A.S(iterator.get$current(iterator));
        for (; iterator.moveNext$0();)
          string = string + separator + A.S(iterator.get$current(iterator));
      }
      return string;
    },
    Error_safeToString(object) {
      if (typeof object == "number" || A._isBool(object) || object == null)
        return J.toString$0$(object);
      if (typeof object == "string")
        return JSON.stringify(object);
      return A.Error__objectToString(object);
    },
    AssertionError$(message) {
      return new A.AssertionError(message);
    },
    ArgumentError$(message, $name) {
      return new A.ArgumentError(false, null, $name, message);
    },
    ArgumentError$value(value, $name, message) {
      return new A.ArgumentError(true, value, $name, message);
    },
    RangeError$(message) {
      var _null = null;
      return new A.RangeError(_null, _null, false, _null, _null, message);
    },
    RangeError$range(invalidValue, minValue, maxValue, $name, message) {
      return new A.RangeError(minValue, maxValue, true, invalidValue, $name, "Invalid value");
    },
    RangeError_checkValidRange(start, end, $length) {
      if (0 > start || start > $length)
        throw A.wrapException(A.RangeError$range(start, 0, $length, "start", null));
      if (start > end || end > $length)
        throw A.wrapException(A.RangeError$range(end, start, $length, "end", null));
      return end;
    },
    RangeError_checkNotNegative(value, $name) {
      return value;
    },
    IndexError$(invalidValue, indexable, $name, message, $length) {
      var t1 = A._asInt($length == null ? J.get$length$asx(indexable) : $length);
      return new A.IndexError(t1, true, invalidValue, $name, "Index out of range");
    },
    UnsupportedError$(message) {
      return new A.UnsupportedError(message);
    },
    UnimplementedError$(message) {
      return new A.UnimplementedError(message);
    },
    StateError$(message) {
      return new A.StateError(message);
    },
    ConcurrentModificationError$(modifiedObject) {
      return new A.ConcurrentModificationError(modifiedObject);
    },
    Exception_Exception(message) {
      return new A._Exception(message);
    },
    Object_hash(object1, object2, object3, object4) {
      var t1, t2;
      if (B.C_SentinelValue === object3) {
        t1 = B.JSNumber_methods.get$hashCode(object1);
        object2 = B.JSNumber_methods.get$hashCode(object2);
        return A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine($.$get$_hashSeed(), t1), object2));
      }
      if (B.C_SentinelValue === object4) {
        t1 = B.JSNumber_methods.get$hashCode(object1);
        object2 = B.JSNumber_methods.get$hashCode(object2);
        object3 = J.get$hashCode$(object3);
        return A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine($.$get$_hashSeed(), t1), object2), object3));
      }
      t1 = B.JSNumber_methods.get$hashCode(object1);
      object2 = B.JSNumber_methods.get$hashCode(object2);
      object3 = J.get$hashCode$(object3);
      object4 = J.get$hashCode$(object4);
      t2 = $.$get$_hashSeed();
      return A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(t2, t1), object2), object3), object4));
    },
    _Enum: function _Enum() {
    },
    Error: function Error() {
    },
    AssertionError: function AssertionError(t0) {
      this.message = t0;
    },
    TypeError: function TypeError() {
    },
    NullThrownError: function NullThrownError() {
    },
    ArgumentError: function ArgumentError(t0, t1, t2, t3) {
      var _ = this;
      _._hasValue = t0;
      _.invalidValue = t1;
      _.name = t2;
      _.message = t3;
    },
    RangeError: function RangeError(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.start = t0;
      _.end = t1;
      _._hasValue = t2;
      _.invalidValue = t3;
      _.name = t4;
      _.message = t5;
    },
    IndexError: function IndexError(t0, t1, t2, t3, t4) {
      var _ = this;
      _.length = t0;
      _._hasValue = t1;
      _.invalidValue = t2;
      _.name = t3;
      _.message = t4;
    },
    UnsupportedError: function UnsupportedError(t0) {
      this.message = t0;
    },
    UnimplementedError: function UnimplementedError(t0) {
      this.message = t0;
    },
    StateError: function StateError(t0) {
      this.message = t0;
    },
    ConcurrentModificationError: function ConcurrentModificationError(t0) {
      this.modifiedObject = t0;
    },
    OutOfMemoryError: function OutOfMemoryError() {
    },
    StackOverflowError: function StackOverflowError() {
    },
    CyclicInitializationError: function CyclicInitializationError(t0) {
      this.variableName = t0;
    },
    _Exception: function _Exception(t0) {
      this.message = t0;
    },
    Iterable: function Iterable() {
    },
    Iterator: function Iterator() {
    },
    Null: function Null() {
    },
    Object: function Object() {
    },
    _StringStackTrace: function _StringStackTrace() {
    },
    StringBuffer: function StringBuffer(t0) {
      this._contents = t0;
    },
    document() {
      return document;
    },
    _EventStreamSubscription$(_target, _eventType, onData, _useCapture, $T) {
      var t1 = A._wrapZone(new A._EventStreamSubscription_closure(onData), type$.Event);
      if (t1 != null && true)
        J.addEventListener$3$x(_target, _eventType, t1, false);
      return new A._EventStreamSubscription(_target, _eventType, t1, false, $T._eval$1("_EventStreamSubscription<0>"));
    },
    _wrapZone(callback, $T) {
      var t1 = $.Zone__current;
      if (t1 === B.C__RootZone)
        return callback;
      return t1.bindUnaryCallbackGuarded$1$1(callback, $T);
    },
    HtmlElement: function HtmlElement() {
    },
    AccessibleNodeList: function AccessibleNodeList() {
    },
    AnchorElement: function AnchorElement() {
    },
    AreaElement: function AreaElement() {
    },
    Blob: function Blob() {
    },
    BodyElement: function BodyElement() {
    },
    CanvasElement: function CanvasElement() {
    },
    CharacterData: function CharacterData() {
    },
    CssPerspective: function CssPerspective() {
    },
    CssRule: function CssRule() {
    },
    CssStyleDeclaration: function CssStyleDeclaration() {
    },
    CssStyleDeclarationBase: function CssStyleDeclarationBase() {
    },
    CssStyleValue: function CssStyleValue() {
    },
    CssTransformComponent: function CssTransformComponent() {
    },
    CssTransformValue: function CssTransformValue() {
    },
    CssUnparsedValue: function CssUnparsedValue() {
    },
    DataTransferItemList: function DataTransferItemList() {
    },
    DomException: function DomException() {
    },
    DomRectList: function DomRectList() {
    },
    DomRectReadOnly: function DomRectReadOnly() {
    },
    DomStringList: function DomStringList() {
    },
    DomTokenList: function DomTokenList() {
    },
    Element: function Element() {
    },
    Event: function Event() {
    },
    EventTarget: function EventTarget() {
    },
    File: function File() {
    },
    FileList: function FileList() {
    },
    FileWriter: function FileWriter() {
    },
    FormElement: function FormElement() {
    },
    Gamepad: function Gamepad() {
    },
    History: function History() {
    },
    HtmlCollection: function HtmlCollection() {
    },
    ImageElement: function ImageElement() {
    },
    KeyboardEvent: function KeyboardEvent() {
    },
    Location: function Location() {
    },
    MediaElement: function MediaElement() {
    },
    MediaList: function MediaList() {
    },
    MidiInputMap: function MidiInputMap() {
    },
    MidiInputMap_keys_closure: function MidiInputMap_keys_closure(t0) {
      this.keys = t0;
    },
    MidiOutputMap: function MidiOutputMap() {
    },
    MidiOutputMap_keys_closure: function MidiOutputMap_keys_closure(t0) {
      this.keys = t0;
    },
    MimeType: function MimeType() {
    },
    MimeTypeArray: function MimeTypeArray() {
    },
    Node: function Node() {
    },
    NodeList: function NodeList() {
    },
    Plugin: function Plugin() {
    },
    PluginArray: function PluginArray() {
    },
    RtcStatsReport: function RtcStatsReport() {
    },
    RtcStatsReport_keys_closure: function RtcStatsReport_keys_closure(t0) {
      this.keys = t0;
    },
    SelectElement: function SelectElement() {
    },
    SourceBuffer: function SourceBuffer() {
    },
    SourceBufferList: function SourceBufferList() {
    },
    SpeechGrammar: function SpeechGrammar() {
    },
    SpeechGrammarList: function SpeechGrammarList() {
    },
    SpeechRecognitionResult: function SpeechRecognitionResult() {
    },
    Storage: function Storage() {
    },
    Storage_keys_closure: function Storage_keys_closure(t0) {
      this.keys = t0;
    },
    StyleSheet: function StyleSheet() {
    },
    TextTrack: function TextTrack() {
    },
    TextTrackCue: function TextTrackCue() {
    },
    TextTrackCueList: function TextTrackCueList() {
    },
    TextTrackList: function TextTrackList() {
    },
    TimeRanges: function TimeRanges() {
    },
    Touch: function Touch() {
    },
    TouchList: function TouchList() {
    },
    TrackDefaultList: function TrackDefaultList() {
    },
    UIEvent: function UIEvent() {
    },
    Url: function Url() {
    },
    VideoElement: function VideoElement() {
    },
    VideoTrackList: function VideoTrackList() {
    },
    Window: function Window() {
    },
    _CssRuleList: function _CssRuleList() {
    },
    _DomRect: function _DomRect() {
    },
    _GamepadList: function _GamepadList() {
    },
    _NamedNodeMap: function _NamedNodeMap() {
    },
    _SpeechRecognitionResultList: function _SpeechRecognitionResultList() {
    },
    _StyleSheetList: function _StyleSheetList() {
    },
    EventStreamProvider: function EventStreamProvider(t0, t1) {
      this._eventType = t0;
      this.$ti = t1;
    },
    _EventStream: function _EventStream(t0, t1, t2, t3) {
      var _ = this;
      _._target = t0;
      _._eventType = t1;
      _._useCapture = t2;
      _.$ti = t3;
    },
    _ElementEventStreamImpl: function _ElementEventStreamImpl(t0, t1, t2, t3) {
      var _ = this;
      _._target = t0;
      _._eventType = t1;
      _._useCapture = t2;
      _.$ti = t3;
    },
    _EventStreamSubscription: function _EventStreamSubscription(t0, t1, t2, t3, t4) {
      var _ = this;
      _._target = t0;
      _._eventType = t1;
      _._onData = t2;
      _._useCapture = t3;
      _.$ti = t4;
    },
    _EventStreamSubscription_closure: function _EventStreamSubscription_closure(t0) {
      this.onData = t0;
    },
    ImmutableListMixin: function ImmutableListMixin() {
    },
    FixedSizeListIterator: function FixedSizeListIterator(t0, t1, t2) {
      var _ = this;
      _._array = t0;
      _._html$_length = t1;
      _._position = -1;
      _._html$_current = null;
      _.$ti = t2;
    },
    _CssStyleDeclaration_Interceptor_CssStyleDeclarationBase: function _CssStyleDeclaration_Interceptor_CssStyleDeclarationBase() {
    },
    _DomRectList_Interceptor_ListMixin: function _DomRectList_Interceptor_ListMixin() {
    },
    _DomRectList_Interceptor_ListMixin_ImmutableListMixin: function _DomRectList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _DomStringList_Interceptor_ListMixin: function _DomStringList_Interceptor_ListMixin() {
    },
    _DomStringList_Interceptor_ListMixin_ImmutableListMixin: function _DomStringList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _FileList_Interceptor_ListMixin: function _FileList_Interceptor_ListMixin() {
    },
    _FileList_Interceptor_ListMixin_ImmutableListMixin: function _FileList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _HtmlCollection_Interceptor_ListMixin: function _HtmlCollection_Interceptor_ListMixin() {
    },
    _HtmlCollection_Interceptor_ListMixin_ImmutableListMixin: function _HtmlCollection_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _MidiInputMap_Interceptor_MapMixin: function _MidiInputMap_Interceptor_MapMixin() {
    },
    _MidiOutputMap_Interceptor_MapMixin: function _MidiOutputMap_Interceptor_MapMixin() {
    },
    _MimeTypeArray_Interceptor_ListMixin: function _MimeTypeArray_Interceptor_ListMixin() {
    },
    _MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin: function _MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _NodeList_Interceptor_ListMixin: function _NodeList_Interceptor_ListMixin() {
    },
    _NodeList_Interceptor_ListMixin_ImmutableListMixin: function _NodeList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _PluginArray_Interceptor_ListMixin: function _PluginArray_Interceptor_ListMixin() {
    },
    _PluginArray_Interceptor_ListMixin_ImmutableListMixin: function _PluginArray_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _RtcStatsReport_Interceptor_MapMixin: function _RtcStatsReport_Interceptor_MapMixin() {
    },
    _SourceBufferList_EventTarget_ListMixin: function _SourceBufferList_EventTarget_ListMixin() {
    },
    _SourceBufferList_EventTarget_ListMixin_ImmutableListMixin: function _SourceBufferList_EventTarget_ListMixin_ImmutableListMixin() {
    },
    _SpeechGrammarList_Interceptor_ListMixin: function _SpeechGrammarList_Interceptor_ListMixin() {
    },
    _SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin: function _SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _Storage_Interceptor_MapMixin: function _Storage_Interceptor_MapMixin() {
    },
    _TextTrackCueList_Interceptor_ListMixin: function _TextTrackCueList_Interceptor_ListMixin() {
    },
    _TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin: function _TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _TextTrackList_EventTarget_ListMixin: function _TextTrackList_EventTarget_ListMixin() {
    },
    _TextTrackList_EventTarget_ListMixin_ImmutableListMixin: function _TextTrackList_EventTarget_ListMixin_ImmutableListMixin() {
    },
    _TouchList_Interceptor_ListMixin: function _TouchList_Interceptor_ListMixin() {
    },
    _TouchList_Interceptor_ListMixin_ImmutableListMixin: function _TouchList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    __CssRuleList_Interceptor_ListMixin: function __CssRuleList_Interceptor_ListMixin() {
    },
    __CssRuleList_Interceptor_ListMixin_ImmutableListMixin: function __CssRuleList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    __GamepadList_Interceptor_ListMixin: function __GamepadList_Interceptor_ListMixin() {
    },
    __GamepadList_Interceptor_ListMixin_ImmutableListMixin: function __GamepadList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    __NamedNodeMap_Interceptor_ListMixin: function __NamedNodeMap_Interceptor_ListMixin() {
    },
    __NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin: function __NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin() {
    },
    __SpeechRecognitionResultList_Interceptor_ListMixin: function __SpeechRecognitionResultList_Interceptor_ListMixin() {
    },
    __SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin: function __SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    __StyleSheetList_Interceptor_ListMixin: function __StyleSheetList_Interceptor_ListMixin() {
    },
    __StyleSheetList_Interceptor_ListMixin_ImmutableListMixin: function __StyleSheetList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    Random_Random() {
      return B.C__JSRandom;
    },
    _JSRandom: function _JSRandom() {
    },
    Length: function Length() {
    },
    LengthList: function LengthList() {
    },
    Number: function Number() {
    },
    NumberList: function NumberList() {
    },
    PointList: function PointList() {
    },
    StringList: function StringList() {
    },
    SvgElement: function SvgElement() {
    },
    Transform: function Transform() {
    },
    TransformList: function TransformList() {
    },
    _LengthList_Interceptor_ListMixin: function _LengthList_Interceptor_ListMixin() {
    },
    _LengthList_Interceptor_ListMixin_ImmutableListMixin: function _LengthList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _NumberList_Interceptor_ListMixin: function _NumberList_Interceptor_ListMixin() {
    },
    _NumberList_Interceptor_ListMixin_ImmutableListMixin: function _NumberList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _StringList_Interceptor_ListMixin: function _StringList_Interceptor_ListMixin() {
    },
    _StringList_Interceptor_ListMixin_ImmutableListMixin: function _StringList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _TransformList_Interceptor_ListMixin: function _TransformList_Interceptor_ListMixin() {
    },
    _TransformList_Interceptor_ListMixin_ImmutableListMixin: function _TransformList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    AudioBuffer: function AudioBuffer() {
    },
    AudioParamMap: function AudioParamMap() {
    },
    AudioParamMap_keys_closure: function AudioParamMap_keys_closure(t0) {
      this.keys = t0;
    },
    AudioTrackList: function AudioTrackList() {
    },
    BaseAudioContext: function BaseAudioContext() {
    },
    OfflineAudioContext: function OfflineAudioContext() {
    },
    _AudioParamMap_Interceptor_MapMixin: function _AudioParamMap_Interceptor_MapMixin() {
    },
    Buffer: function Buffer() {
    },
    Program: function Program() {
    },
    RenderingContext2: function RenderingContext2() {
    },
    Texture: function Texture() {
    },
    UniformLocation: function UniformLocation() {
    },
    VertexArrayObject: function VertexArrayObject() {
    },
    SqlResultSetRowList: function SqlResultSetRowList() {
    },
    _SqlResultSetRowList_Interceptor_ListMixin: function _SqlResultSetRowList_Interceptor_ListMixin() {
    },
    _SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin: function _SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    Renderer$(gl, world) {
      var t1 = new A.Renderer(world, gl);
      t1.Renderer$2(gl, world);
      return t1;
    },
    loadTexture(gl, url) {
      var texture = gl.createTexture(),
        image = document.createElement("img"),
        t1 = new A._Future($.Zone__current, type$._Future_Texture),
        t2 = J.get$onLoad$x(image),
        t3 = t2.$ti,
        t4 = t3._eval$1("~(1)?")._as(new A.loadTexture_closure(gl, texture, image, new A._AsyncCompleter(t1, type$._AsyncCompleter_Texture)));
      type$.nullable_void_Function._as(null);
      A._EventStreamSubscription$(t2._target, t2._eventType, t4, false, t3._precomputed1);
      image.setAttribute("src", url);
      return t1;
    },
    Renderer: function Renderer(t0, t1) {
      var _ = this;
      _.world = t0;
      _.gl = t1;
      _.__Renderer_lightingRenderer = _.__Renderer_fovRenderer = _.__Renderer_dotRenderer = _.__Renderer_terrainRenderer = _.__Renderer_sprites = $;
      _.ready = false;
      _.time = 0;
    },
    Renderer_closure: function Renderer_closure(t0) {
      this.$this = t0;
    },
    Renderer_closure0: function Renderer_closure0(t0) {
      this.$this = t0;
    },
    loadTexture_closure: function loadTexture_closure(t0, t1, t2, t3) {
      var _ = this;
      _.gl = t0;
      _.texture = t1;
      _.image = t2;
      _.completer = t3;
    },
    Color$(value) {
      return new A.Color(value);
    },
    Color: function Color(t0) {
      this.value = t0;
    },
    Grid: function Grid(t0, t1, t2, t3) {
      var _ = this;
      _.width = t0;
      _.height = t1;
      _._storage = t2;
      _.$ti = t3;
    },
    Tile$() {
      var t1 = A._setArrayType([], type$.JSArray_Item);
      return new A.Tile(B.TileType_0, t1);
    },
    Point$from(dx, dy) {
      return new A.Point(dx, dy);
    },
    ItemType: function ItemType(t0) {
      this._name = t0;
    },
    Item: function Item(t0, t1) {
      this.item = t0;
      this.type = t1;
    },
    Armor: function Armor(t0, t1) {
      this.name = t0;
      this.level = t1;
    },
    HandRequirement: function HandRequirement(t0) {
      this._name = t0;
    },
    DamageType: function DamageType(t0) {
      this._name = t0;
    },
    DiceType: function DiceType(t0) {
      this._name = t0;
    },
    WeaponProperties: function WeaponProperties(t0) {
      this._name = t0;
    },
    MeleePower: function MeleePower() {
    },
    Critical: function Critical() {
    },
    CriticalEffect: function CriticalEffect(t0) {
      this._name = t0;
    },
    MeleeWeapon: function MeleeWeapon(t0, t1) {
      this.level = t0;
      this.name = t1;
    },
    AmmoType: function AmmoType(t0) {
      this._name = t0;
    },
    AmmoUsage: function AmmoUsage() {
    },
    RangedWeapon: function RangedWeapon(t0, t1) {
      this.name = t0;
      this.level = t1;
    },
    ArmorUpgradeType: function ArmorUpgradeType(t0) {
      this._name = t0;
    },
    ArmorUpgrade: function ArmorUpgrade(t0) {
      this.level = t0;
    },
    TileType: function TileType(t0) {
      this._name = t0;
    },
    MapConfig: function MapConfig(t0, t1, t2) {
      this.biome = t0;
      this.river = t1;
      this.level = t2;
    },
    TerrainType: function TerrainType(t0) {
      this._name = t0;
    },
    TerrainWidget: function TerrainWidget(t0) {
      this._name = t0;
    },
    LockState: function LockState(t0) {
      this._name = t0;
    },
    Biome: function Biome(t0) {
      this._name = t0;
    },
    Tile: function Tile(t0, t1) {
      this.tileType = t0;
      this.items = t1;
    },
    Point: function Point(t0, t1) {
      this.dx = t0;
      this.dy = t1;
    },
    MapDescription: function MapDescription(t0, t1) {
      this.tiles = t0;
      this.config = t1;
    },
    Agent: function Agent(t0) {
      this.sprite = t0;
    },
    DotRenderer: function DotRenderer(t0, t1) {
      var _ = this;
      _._dots$_gl = t0;
      _._dots$_backingPosition = t1;
      _._dots$_positionBuffer = _._dots$_vao = _._dots$_program = null;
      _._dots$_positionAttributeLocation = -1;
      _._dots$_screenSizeLocation = null;
      _._dots$_dirty = false;
      _._stage = null;
      _._lastSize = 0;
    },
    FOVSystem: function FOVSystem(t0, t1, t2, t3) {
      var _ = this;
      _._buffer = t0;
      _._collision = t1;
      _.playerAgentView = t2;
      _._scanStack = t3;
    },
    VisibilityGrid: function VisibilityGrid(t0, t1) {
      this.kWidth = t0;
      this._buffer = t1;
    },
    Cardinal: function Cardinal(t0) {
      this._name = t0;
    },
    Quadrant: function Quadrant(t0, t1) {
      this.cardinal = t0;
      this.origin = t1;
    },
    Row: function Row(t0, t1, t2) {
      this.depth = t0;
      this.startSlope = t1;
      this.endSlope = t2;
    },
    LightingRenderer: function LightingRenderer(t0, t1, t2, t3, t4) {
      var _ = this;
      _._lighting$_gl = t0;
      _._fovSystem = t1;
      _._lighting$_backingPosition = t2;
      _._lightingTextures = t3;
      _._lighting$_vao = _._lighting$_program = null;
      _._positionAttributeLocation = -1;
      _._playerVisibleTexture = _._visibleTexture = _._sourceColorLocation = _._sourcePositionLocation = _._lighting$_screenSizeLocation = null;
      _._lighting$_lastPoint = t4;
    },
    DirectionsHelper_get_reversed(_this) {
      switch (_this) {
        case B.Directions_0:
          return B.Directions_3;
        case B.Directions_1:
          return B.Directions_2;
        case B.Directions_2:
          return B.Directions_1;
        case B.Directions_3:
          return B.Directions_0;
        case B.Directions_4:
          return B.Directions_6;
        case B.Directions_5:
          return B.Directions_7;
        case B.Directions_6:
          return B.Directions_4;
        case B.Directions_7:
          return B.Directions_5;
      }
    },
    DirectionsHelper_get_adjacent(_this) {
      switch (_this) {
        case B.Directions_4:
          return B.List_Directions_5_Directions_7;
        case B.Directions_5:
          return B.List_Directions_4_Directions_6;
        case B.Directions_6:
          return B.List_Directions_5_Directions_7;
        case B.Directions_7:
          return B.List_Directions_4_Directions_6;
        default:
          return B.List_empty;
      }
    },
    moveBy(start, direction) {
      switch (direction) {
        case B.Directions_4:
          return start.$add(0, new A.Point(0, -1));
        case B.Directions_1:
          return start.$add(0, new A.Point(1, -1));
        case B.Directions_5:
          return start.$add(0, new A.Point(1, 0));
        case B.Directions_0:
          return start.$add(0, new A.Point(1, 1));
        case B.Directions_6:
          return start.$add(0, new A.Point(0, 1));
        case B.Directions_2:
          return start.$add(0, new A.Point(-1, 1));
        case B.Directions_7:
          return start.$add(0, new A.Point(-1, 0));
        case B.Directions_3:
          return start.$add(0, new A.Point(-1, -1));
      }
    },
    Directions: function Directions(t0) {
      this._name = t0;
    },
    SpriteRenderer: function SpriteRenderer(t0, t1, t2, t3, t4) {
      var _ = this;
      _._sprites$_gl = t0;
      _._atlas = t1;
      _._sprites = t2;
      _._sprites$_backingPosition = t3;
      _._backingIndexes = t4;
      _._texCoordBuffer = _._positionBuffer = _._sprites$_vao = _._sprites$_program = null;
      _._texcoordAttributeLocation = _._sprites$_positionAttributeLocation = -1;
      _._sprites$_screenSizeLocation = _._textureUniformLocation = null;
      _._sprites$_dirty = false;
    },
    Sprite: function Sprite(t0, t1, t2, t3) {
      var _ = this;
      _._renderer = null;
      _._sx = t0;
      _._sy = t1;
      _._dx = t2;
      _._dy = t3;
    },
    MapTheme: function MapTheme(t0, t1, t2) {
      this.wallLowerColor = t0;
      this.wallUpperColor = t1;
      this.floorColor = t2;
    },
    TerrainRenderer: function TerrainRenderer(t0, t1, t2, t3) {
      var _ = this;
      _._gl = t0;
      _._terrain$_backingPosition = t1;
      _._terrain$_backingColors = t2;
      _._terrain$_stage = _._terrain$_colorBuffer = _._vao = _._program = null;
      _._terrain$_colorAttributeLocation = _._terrain$_positionAttributeLocation = -1;
      _._screenSizeLocation = null;
      _._dirty = false;
      _._theme = t3;
    },
    FOVRenderer: function FOVRenderer(t0, t1, t2, t3, t4) {
      var _ = this;
      _._visibility$_gl = t0;
      _._visibility$_fovSystem = t1;
      _._backingPosition = t2;
      _._backingColors = t3;
      _._colorBuffer = _._visibility$_vao = _._visibility$_program = null;
      _._colorAttributeLocation = _._visibility$_positionAttributeLocation = -1;
      _._visibility$_screenSizeLocation = null;
      _._lastPoint = t4;
    },
    blueprintToStage(blueprint) {
      var t3, t4, i,
        t1 = A.List_List$generate(4000, new A.blueprintToStage_closure(blueprint), type$.TileInstance),
        t2 = new Uint8Array(4000);
      for (t3 = blueprint.tiles._storage, t4 = t3.length, i = 0; i < 4000; ++i) {
        if (!(i < t4))
          return A.ioore(t3, i);
        t3[i].toString;
        t2[i] = 0;
      }
      return new A.Stage(t2, new A.Grid(100, 40, t1, type$.Grid_TileInstance));
    },
    World: function World(t0, t1, t2) {
      this.fovSystem = t0;
      this.playerAgent = t1;
      this.current = t2;
    },
    blueprintToStage_closure: function blueprintToStage_closure(t0) {
      this.blueprint = t0;
    },
    Stage: function Stage(t0, t1) {
      this.visited = t0;
      this.tiles = t1;
    },
    TileInstance: function TileInstance(t0) {
      this._tile = t0;
    },
    CellularAutomata: function CellularAutomata(t0) {
      this.context = t0;
    },
    CellularAutomata_simulate_alive: function CellularAutomata_simulate_alive(t0) {
      this._box_0 = t0;
    },
    GeneratorBase: function GeneratorBase() {
    },
    GeneratorBase_tryToConnect_countWalls: function GeneratorBase_tryToConnect_countWalls(t0) {
      this.context = t0;
    },
    CaveGenerator: function CaveGenerator(t0) {
      this.random = t0;
    },
    CaveGenerator_generateCaves_isFloor: function CaveGenerator_generateCaves_isFloor(t0) {
      this.context = t0;
    },
    CaveGenerator_generateCaves_isWall: function CaveGenerator_generateCaves_isWall(t0) {
      this.context = t0;
    },
    walkUntilWall(start, direction, context) {
      var t1 = context.collision,
        t2 = context.widgets,
        current = start,
        score = 0;
      while (true) {
        if (!(t1.$index(0, current) !== B.TileType_1 && t2.$index(0, current) !== B.TerrainWidget_0))
          break;
        current = A.moveBy(current, direction);
        ++score;
      }
      return score;
    },
    nextToWallNotDoor(start, direction, context) {
      var next = A.moveBy(start, direction);
      if (context.widgets.$index(0, next) === B.TerrainWidget_0)
        return 1 / 0;
      if (context.collision.$index(0, next) === B.TileType_1)
        return 1;
      return 0;
    },
    WidgetPlacement$(constraint, onPlaced) {
      return new A.WidgetPlacement(constraint, onPlaced);
    },
    solveRoom(room, placements, context) {
      var t1, t2, t3, t4, t5, _i, placement, viable, scores, t6, total, t7, score, rolling, i, newScore, selection, candidate, prev,
        failed = A._setArrayType([], type$.JSArray_WidgetPlacement);
      for (t1 = placements.length, t2 = room.points, t3 = J.getInterceptor$ax(t2), t4 = type$.JSArray_Point, t5 = type$.JSArray_double, _i = 0; _i < placements.length; placements.length === t1 || (0, A.throwConcurrentModificationError)(placements), ++_i) {
        placement = placements[_i];
        viable = A._setArrayType([], t4);
        scores = A._setArrayType([], t5);
        for (t6 = t3.get$iterator(t2), total = 0; t6.moveNext$0();) {
          t7 = t6.get$current(t6);
          score = placement.constraint.score$2(t7, context);
          if (score < 1000) {
            B.JSArray_methods.add$1(viable, t7);
            B.JSArray_methods.add$1(scores, score);
            total += score;
          }
        }
        if (viable.length === 0) {
          B.JSArray_methods.add$1(failed, placement);
          continue;
        }
        for (rolling = 0, i = 0; i < scores.length; ++i, rolling = newScore) {
          newScore = scores[i] / total + rolling;
          B.JSArray_methods.$indexSet(scores, i, newScore);
        }
        selection = $.$get$_random().nextDouble$0();
        for (t6 = scores.length, t7 = viable.length, candidate = B.Point_0_0, prev = -1, i = 0; i < t6; ++i, prev = score) {
          score = scores[i];
          if (selection >= prev && selection < score) {
            if (!(i < t7))
              return A.ioore(viable, i);
            candidate = viable[i];
          }
        }
        t6 = 0 === candidate.dx && 0 === candidate.dy;
        if (t6) {
          B.JSArray_methods.add$1(failed, placement);
          continue;
        }
        placement.onPlaced$2(candidate, context);
      }
      for (t1 = t3.get$iterator(t2), t2 = context.widgets, t3 = room.containers; t1.moveNext$0();) {
        t4 = t1.get$current(t1);
        if (t2.$index(0, t4) === B.TerrainWidget_6 || t2.$index(0, t4) === B.TerrainWidget_7)
          B.JSArray_methods.add$1(t3, t4);
      }
      return failed;
    },
    solveMap(rooms, context) {
      var t1, t2, t3, _i, t4, needLock, t5, t6, t7;
      B.JSArray_methods.sort$1(rooms, new A.solveMap_closure());
      if (0 >= rooms.length)
        return A.ioore(rooms, 0);
      A.solveRoom(rooms[0], $.$get$treasureRoom(), context);
      if (0 >= rooms.length)
        return A.ioore(rooms, 0);
      t1 = rooms[0].entrances;
      t2 = t1.length;
      t3 = context.locks;
      _i = 0;
      for (; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i)
        t3.$indexSet(0, t1[_i], B.LockState_0);
      for (t1 = A.SubListIterable$(rooms, 1, null, A._arrayInstanceType(rooms)._precomputed1), t2 = t1.$ti, t1 = new A.ListIterator(t1, t1.get$length(t1), t2._eval$1("ListIterator<1>")), t2 = t2._precomputed1, t4 = type$.WidgetPlacement, needLock = 2; t1.moveNext$0();) {
        t5 = t2._as(t1.__internal$_current);
        t6 = t5.points;
        t7 = J.getInterceptor$asx(t6);
        if (t7.get$length(t6) < 30) {
          if (needLock > 0) {
            t6 = A.List_List$of($.$get$messRoom(), t4);
            t6.push($.$get$placeMechanism());
          } else
            t6 = $.$get$messRoom();
          if (!B.JSArray_methods.contains$1(A.solveRoom(t5, t6, context), $.$get$placeMechanism()))
            --needLock;
        } else if (t7.get$length(t6) < 60)
          A.solveRoom(t5, $.$get$libraryRoom(), context);
        else if (t7.get$length(t6) < 100)
          A.solveRoom(t5, $.$get$largeRoom(), context);
        else
          A.solveRoom(t5, $.$get$hugeRoom(), context);
      }
      if (needLock === 2) {
        if (0 >= rooms.length)
          return A.ioore(rooms, 0);
        t1 = rooms[0].entrances;
        t2 = t1.length;
        _i = 0;
        for (; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i)
          t3.$indexSet(0, t1[_i], B.LockState_4);
      }
    },
    Constraint: function Constraint() {
    },
    WidgetConstraint: function WidgetConstraint() {
    },
    And: function And(t0) {
      this.$ti = t0;
    },
    Or: function Or(t0) {
      this.$ti = t0;
    },
    CenteredConstraint: function CenteredConstraint() {
    },
    AgainstSingleWallConstraint: function AgainstSingleWallConstraint() {
    },
    CornerConstraint: function CornerConstraint() {
    },
    AdjacentConstraint: function AdjacentConstraint(t0) {
      this.type = t0;
    },
    WidgetPlacement: function WidgetPlacement(t0, t1) {
      this.constraint = t0;
      this.onPlaced = t1;
    },
    placeTable_closure: function placeTable_closure() {
    },
    placeChair_closure: function placeChair_closure() {
    },
    placeLight_closure: function placeLight_closure() {
    },
    placeCenterLight_closure: function placeCenterLight_closure() {
    },
    placeChest_closure: function placeChest_closure() {
    },
    placeMechanism_closure: function placeMechanism_closure() {
    },
    placeBookshelf_closure: function placeBookshelf_closure() {
    },
    solveMap_closure: function solveMap_closure() {
    },
    EncounterRoom$(points) {
      var t1 = type$.JSArray_Point;
      return new A.EncounterRoom(points, A._setArrayType([], t1), A._setArrayType([], t1), A.EncounterRoom__center(points));
    },
    EncounterRoom__center(points) {
      var i, point,
        t1 = J.getInterceptor$asx(points),
        dx = t1.$index(points, 0).dx,
        dy = t1.$index(points, 0).dy;
      for (i = 1; i < t1.get$length(points); ++i) {
        point = t1.$index(points, i);
        dx += point.dx;
        dy += point.dy;
      }
      return new A.Point(B.JSNumber_methods.round$0(dx / t1.get$length(points)), B.JSNumber_methods.round$0(dy / t1.get$length(points)));
    },
    GeneratorContext: function GeneratorContext(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _.config = t0;
      _.collision = t1;
      _.liquid = t2;
      _.materials = t3;
      _.widgets = t4;
      _.locks = t5;
      _.items = t6;
      _.connections = t7;
      _.rooms = t8;
    },
    BoardGenerator: function BoardGenerator(t0, t1) {
      this.random = t0;
      this.itemGenerator = t1;
    },
    BoardGenerator_generate_closure: function BoardGenerator_generate_closure() {
    },
    Tunneled: function Tunneled(t0, t1, t2, t3) {
      var _ = this;
      _.start = t0;
      _.end = t1;
      _.points = t2;
      _.dest = t3;
    },
    EncounterConnections: function EncounterConnections(t0, t1) {
      this.rooms = t0;
      this.connections = t1;
    },
    EncounterRoom: function EncounterRoom(t0, t1, t2, t3) {
      var _ = this;
      _.points = t0;
      _.entrances = t1;
      _.containers = t2;
      _.center = t3;
    },
    FloodFiller: function FloodFiller(t0, t1, t2) {
      this.context = t0;
      this.rooms = t1;
      this.visited = t2;
    },
    ItemTable: function ItemTable(t0, t1, t2) {
      var _ = this;
      _.items = t0;
      _.types = t1;
      _.weights = t2;
      _.total = 0;
    },
    ItemTable_pick_closure: function ItemTable_pick_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    Nothing: function Nothing() {
    },
    ItemGenerator: function ItemGenerator(t0) {
      this.random = t0;
    },
    ItemGenerator_generate_closure: function ItemGenerator_generate_closure() {
    },
    ItemGenerator_generate_closure0: function ItemGenerator_generate_closure0() {
    },
    ItemGenerator_generate_closure1: function ItemGenerator_generate_closure1() {
    },
    ItemGenerator_generate_closure2: function ItemGenerator_generate_closure2() {
    },
    PerlinNoise: function PerlinNoise() {
    },
    RuinOrientation: function RuinOrientation(t0) {
      this._name = t0;
    },
    RoomSizeKind: function RoomSizeKind(t0) {
      this._name = t0;
    },
    RuinGenerator: function RuinGenerator(t0, t1) {
      this.occupied = t0;
      this.random = t1;
    },
    RoomSize: function RoomSize(t0, t1) {
      this.width = t0;
      this.height = t1;
    },
    SurfaceGenerator: function SurfaceGenerator(t0) {
      this.random = t0;
    },
    SurfaceGenerator_generateField_closure: function SurfaceGenerator_generateField_closure() {
    },
    SurfaceGenerator_generateField_isValidForDoor: function SurfaceGenerator_generateField_isValidForDoor(t0) {
      this.context = t0;
    },
    throwLateFieldADI(fieldName) {
      return A.throwExpression(A.LateError$fieldADI(fieldName));
    },
    _lateReadCheck(value, $name) {
      if (value === $)
        throw A.wrapException(new A.LateError("Field '" + $name + "' has not been initialized."));
      return value;
    },
    _lateWriteOnceCheck(value, $name) {
      if (value !== $)
        throw A.wrapException(new A.LateError("Field '" + $name + "' has already been initialized."));
    },
    _lateInitializeOnceCheck(value, $name) {
      if (value !== $)
        throw A.wrapException(A.LateError$fieldADI($name));
    },
    _convertNativeToDart_Value(value) {
      var proto, values, i;
      if (value == null)
        return value;
      if (typeof value == "string" || typeof value == "number" || A._isBool(value))
        return value;
      proto = Object.getPrototypeOf(value);
      if (proto === Object.prototype || proto === null)
        return A.convertNativeToDart_Dictionary(value);
      if (Array.isArray(value)) {
        values = [];
        for (i = 0; i < value.length; ++i)
          values.push(A._convertNativeToDart_Value(value[i]));
        return values;
      }
      return value;
    },
    convertNativeToDart_Dictionary(object) {
      var dict, keys, t1, _i, key;
      if (object == null)
        return null;
      dict = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic);
      keys = Object.getOwnPropertyNames(object);
      for (t1 = keys.length, _i = 0; _i < keys.length; keys.length === t1 || (0, A.throwConcurrentModificationError)(keys), ++_i) {
        key = keys[_i];
        dict.$indexSet(0, key, A._convertNativeToDart_Value(object[key]));
      }
      return dict;
    },
    createProgram(gl, vertex, fragment) {
      var vertexShader = A._createShader(gl, vertex, 35633),
        fragmentShader = A._createShader(gl, fragment, 35632),
        program = gl.createProgram();
      gl.attachShader(program, vertexShader);
      gl.attachShader(program, fragmentShader);
      gl.linkProgram(program);
      if (!J.$eq$(gl.getProgramParameter(program, 35714), true))
        throw A.wrapException(A.StateError$(J.toString$0$(gl.getProgramInfoLog(program))));
      return program;
    },
    _createShader(gl, source, type) {
      var shader = gl.createShader(type);
      gl.shaderSource(shader, source);
      gl.compileShader(shader);
      if (!J.$eq$(gl.getShaderParameter(shader, 35713), true))
        throw A.wrapException(A.StateError$(J.toString$0$(gl.getShaderInfoLog(shader))));
      return shader;
    },
    repainter(x) {
      var t1, t2, t3, t4, t5, value, result, program, playerTexture, texture, lowerTexture, t6, colorBuffer, _null = null, _2400 = 2400, _1440 = 1440,
        _s10_ = "a_position",
        _s12_ = "u_resolution",
        _34962 = 34962;
      A._asNum(x);
      t1 = $.$get$renderer();
      t1.time += x;
      t2 = t1.gl;
      t2.viewport(0, 0, _2400, _1440);
      t2.clearColor(0, 0, 0, 1);
      t2.clearDepth(1);
      t2.enable(2929);
      t2.depthFunc(515);
      t2.clear(16640);
      if (t1.ready) {
        t3 = t1.get$terrainRenderer();
        if (t3._dirty) {
          t3._updateTerrain$0();
          t3._dirty = false;
        }
        t4 = t3._gl;
        t5 = t3._program;
        t5.toString;
        B.RenderingContext2_methods.useProgram$1(t4, t5);
        B.RenderingContext2_methods.bindVertexArray$1(t4, t3._vao);
        B.RenderingContext2_methods.uniform2f$3(t4, t3._screenSizeLocation, _2400, _1440);
        t4.drawArrays(4, 0, 48000);
        t4 = t1.get$dotRenderer();
        if (t4._dots$_dirty) {
          t4._update$0(0);
          t4._dots$_dirty = false;
        }
        t3 = t4._dots$_gl;
        t5 = t4._dots$_program;
        t5.toString;
        B.RenderingContext2_methods.useProgram$1(t3, t5);
        B.RenderingContext2_methods.bindVertexArray$1(t3, t4._dots$_vao);
        t3.enable(3042);
        t3.blendFuncSeparate(770, 771, 1, 771);
        B.RenderingContext2_methods.uniform2f$3(t3, t4._dots$_screenSizeLocation, _2400, _1440);
        t3.drawArrays(0, 0, B.JSInt_methods._tdivFast$1(t4._lastSize, 2));
        A._lateReadCheck(t1.__Renderer_sprites, "sprites").draw$0();
        value = t1.__Renderer_lightingRenderer;
        if (value === $) {
          t3 = t1.world;
          t4 = new Float32Array(A._ensureNativeList(A._setArrayType([-1, 3, -1, -1, 3, -1], type$.JSArray_double)));
          result = new A.LightingRenderer(t2, t3.fovSystem, t4, A.LinkedHashMap_LinkedHashMap$_empty(type$.Point, type$.Texture), new A.Point(-1, -1));
          t3 = t2.createVertexArray();
          t3.toString;
          result._lighting$_vao = t3;
          B.RenderingContext2_methods.bindVertexArray$1(t2, t3);
          program = result._lighting$_program = A.createProgram(t2, "#version 300 es\nin vec2 a_position;\nout vec4 v_color;\n\nvoid main() {\n  gl_Position = vec4(a_position, 0, 1);\n}\n", "#version 300 es\nprecision highp float;\n\nin vec4 v_color;\n\nuniform vec2 u_resolution;\nuniform vec2 u_source_position;\nuniform vec4 u_source_color;\n\nuniform sampler2D u_visible_texture;\nuniform sampler2D u_player_visible_texture;\n\nout vec4 outColor;\n\nconst int nearest_x = 24;\nconst int nearest_y = 36;\n\nfloat snapTo(float raw_position, int snap) {\n  int d = int(raw_position);\n  int rem = int(d) % snap;\n  return float(d - rem) + float(snap / 2);\n}\n\nvoid main() {\n    vec2 snapped_position = vec2(snapTo(gl_FragCoord.x, nearest_x), snapTo(u_resolution.y - gl_FragCoord.y, nearest_y));\n    vec2 tex_position = snapped_position / u_resolution;\n\n    vec4 tex_result = texture(u_visible_texture, tex_position);\n    vec4 player_tex_result = texture(u_player_visible_texture, tex_position);\n\n    if (tex_result.a > 0.0 || player_tex_result.a > 0.0) {\n      discard;\n      return;\n    }\n\n    float dist = distance(gl_FragCoord.xy, u_source_position) / 50.0;\n    if (dist > 10.0) {\n      discard;\n      return;\n    }\n    float scale = 1.0 - smoothstep(0.0, 10.0, dist);\n    outColor = vec4(u_source_color.rgb * scale, scale / 2.0);\n}\n");
          t3 = result._positionAttributeLocation = t2.getAttribLocation(program, _s10_);
          result._lighting$_screenSizeLocation = t2.getUniformLocation(program, _s12_);
          result._sourcePositionLocation = t2.getUniformLocation(program, "u_source_position");
          result._sourceColorLocation = t2.getUniformLocation(program, "u_source_color");
          result._visibleTexture = t2.getUniformLocation(program, "u_visible_texture");
          result._playerVisibleTexture = t2.getUniformLocation(program, "u_player_visible_texture");
          B.RenderingContext2_methods.bindBuffer$2(t2, _34962, t2.createBuffer());
          t2.bufferData(_34962, t4, 35044);
          t2.enableVertexAttribArray(t3);
          t2.vertexAttribPointer(t3, 2, 5126, false, 0, 0);
          A._lateInitializeOnceCheck(t1.__Renderer_lightingRenderer, "lightingRenderer");
          t1.__Renderer_lightingRenderer = result;
          value = result;
        }
        t3 = t1.time;
        t4 = value._fovSystem;
        playerTexture = value._getTextureForPoint$1(t4.playerAgentView);
        texture = value._getTextureForPoint$1(t4.playerAgentView);
        lowerTexture = value._getTextureForPoint$1(new A.Point(10, 23));
        t5 = value._lighting$_gl;
        B.RenderingContext2_methods.bindVertexArray$1(t5, value._lighting$_vao);
        t6 = value._lighting$_program;
        t6.toString;
        B.RenderingContext2_methods.useProgram$1(t5, t6);
        t5.activeTexture(33985);
        B.RenderingContext2_methods.bindTexture$2(t5, 3553, playerTexture);
        B.RenderingContext2_methods.uniform2f$3(t5, value._lighting$_screenSizeLocation, _2400, _1440);
        t6 = value._sourcePositionLocation;
        t4 = t4.playerAgentView;
        B.RenderingContext2_methods.uniform2f$3(t5, t6, t4.dx * 24 + 12, 1440 - (t4.dy * 36 + 18));
        B.RenderingContext2_methods.uniform4f$5(t5, value._sourceColorLocation, 0.5, 0, 0, 0.5);
        B.RenderingContext2_methods.uniform1f$2(t5, _null, 5);
        t3 = B.JSNumber_methods.round$0(t3);
        B.RenderingContext2_methods.uniform1i$2(t5, _null, t3);
        t5.activeTexture(33984);
        B.RenderingContext2_methods.bindTexture$2(t5, 3553, texture);
        B.RenderingContext2_methods.uniform1i$2(t5, value._visibleTexture, 0);
        B.RenderingContext2_methods.uniform1i$2(t5, value._playerVisibleTexture, 1);
        t5.drawArrays(4, 0, 3);
        B.RenderingContext2_methods.uniform2f$3(t5, value._sourcePositionLocation, 252, 594);
        B.RenderingContext2_methods.uniform4f$5(t5, value._sourceColorLocation, 0, 0.5, 0, 0.5);
        B.RenderingContext2_methods.uniform1f$2(t5, _null, 5);
        B.RenderingContext2_methods.uniform1i$2(t5, _null, t3);
        t5.activeTexture(33984);
        B.RenderingContext2_methods.bindTexture$2(t5, 3553, lowerTexture);
        B.RenderingContext2_methods.uniform1i$2(t5, value._visibleTexture, 0);
        B.RenderingContext2_methods.uniform1i$2(t5, value._playerVisibleTexture, 1);
        t5.drawArrays(4, 0, 3);
        value = t1.__Renderer_fovRenderer;
        if (value === $) {
          t3 = t1.world;
          t4 = new Float32Array(96000);
          t5 = new Float32Array(192000);
          result = new A.FOVRenderer(t2, t3.fovSystem, t4, t5, new A.Point(-1, -1));
          result._initTerrainMesh$0();
          program = result._visibility$_program = A.createProgram(t2, string$._versi_, string$._versip);
          result._visibility$_positionAttributeLocation = t2.getAttribLocation(program, _s10_);
          result._colorAttributeLocation = t2.getAttribLocation(program, "a_color");
          result._visibility$_screenSizeLocation = t2.getUniformLocation(program, _s12_);
          t3 = t2.createVertexArray();
          t3.toString;
          result._visibility$_vao = t3;
          B.RenderingContext2_methods.bindVertexArray$1(t2, t3);
          B.RenderingContext2_methods.bindBuffer$2(t2, _34962, t2.createBuffer());
          t2.bufferData(_34962, t4, 35044);
          t2.enableVertexAttribArray(result._visibility$_positionAttributeLocation);
          t2.vertexAttribPointer(result._visibility$_positionAttributeLocation, 2, 5126, false, 0, 0);
          colorBuffer = t2.createBuffer();
          result._colorBuffer = colorBuffer;
          B.RenderingContext2_methods.bindBuffer$2(t2, _34962, colorBuffer);
          t2.bufferData(_34962, t5, 35048);
          t2.enableVertexAttribArray(result._colorAttributeLocation);
          t2.vertexAttribPointer(result._colorAttributeLocation, 4, 5126, false, 0, 0);
          A._lateInitializeOnceCheck(t1.__Renderer_fovRenderer, "fovRenderer");
          t1.__Renderer_fovRenderer = result;
          value = result;
        }
        if (!value._visibility$_fovSystem.playerAgentView.$eq(0, value._lastPoint))
          value._visibility$_updateTerrain$0();
        t1 = value._visibility$_gl;
        t2 = value._visibility$_program;
        t2.toString;
        B.RenderingContext2_methods.useProgram$1(t1, t2);
        B.RenderingContext2_methods.bindVertexArray$1(t1, value._visibility$_vao);
        B.RenderingContext2_methods.uniform2f$3(t1, value._visibility$_screenSizeLocation, _2400, _1440);
        t1.drawArrays(4, 0, 48000);
      }
      B.Window_methods.requestAnimationFrame$1(window, A.main__repainter$closure());
    },
    main() {
      B.Window_methods.requestAnimationFrame$1(window, A.main__repainter$closure());
    }
  },
  J = {
    makeDispatchRecord(interceptor, proto, extension, indexability) {
      return {i: interceptor, p: proto, e: extension, x: indexability};
    },
    getNativeInterceptor(object) {
      var proto, objectProto, $constructor, interceptor, t1,
        record = object[init.dispatchPropertyName];
      if (record == null)
        if ($.initNativeDispatchFlag == null) {
          A.initNativeDispatch();
          record = object[init.dispatchPropertyName];
        }
      if (record != null) {
        proto = record.p;
        if (false === proto)
          return record.i;
        if (true === proto)
          return object;
        objectProto = Object.getPrototypeOf(object);
        if (proto === objectProto)
          return record.i;
        if (record.e === objectProto)
          throw A.wrapException(A.UnimplementedError$("Return interceptor for " + A.S(proto(object, record))));
      }
      $constructor = object.constructor;
      if ($constructor == null)
        interceptor = null;
      else {
        t1 = $._JS_INTEROP_INTERCEPTOR_TAG;
        if (t1 == null)
          t1 = $._JS_INTEROP_INTERCEPTOR_TAG = init.getIsolateTag("_$dart_js");
        interceptor = $constructor[t1];
      }
      if (interceptor != null)
        return interceptor;
      interceptor = A.lookupAndCacheInterceptor(object);
      if (interceptor != null)
        return interceptor;
      if (typeof object == "function")
        return B.JavaScriptFunction_methods;
      proto = Object.getPrototypeOf(object);
      if (proto == null)
        return B.PlainJavaScriptObject_methods;
      if (proto === Object.prototype)
        return B.PlainJavaScriptObject_methods;
      if (typeof $constructor == "function") {
        t1 = $._JS_INTEROP_INTERCEPTOR_TAG;
        if (t1 == null)
          t1 = $._JS_INTEROP_INTERCEPTOR_TAG = init.getIsolateTag("_$dart_js");
        Object.defineProperty($constructor, t1, {value: B.UnknownJavaScriptObject_methods, enumerable: false, writable: true, configurable: true});
        return B.UnknownJavaScriptObject_methods;
      }
      return B.UnknownJavaScriptObject_methods;
    },
    JSArray_JSArray$fixed($length, $E) {
      if ($length > 4294967295)
        throw A.wrapException(A.RangeError$range($length, 0, 4294967295, "length", null));
      return J.JSArray_markFixedList(A._setArrayType(new Array($length), $E._eval$1("JSArray<0>")), $E);
    },
    JSArray_JSArray$growable($length, $E) {
      return A._setArrayType(new Array($length), $E._eval$1("JSArray<0>"));
    },
    JSArray_markFixedList(list, $T) {
      list.fixed$length = Array;
      return list;
    },
    getInterceptor$(receiver) {
      if (typeof receiver == "number") {
        if (Math.floor(receiver) == receiver)
          return J.JSInt.prototype;
        return J.JSNumNotInt.prototype;
      }
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return J.JSNull.prototype;
      if (typeof receiver == "boolean")
        return J.JSBool.prototype;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$asx(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ax(receiver) {
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$x(receiver) {
      if (receiver == null)
        return receiver;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    get$hashCode$(receiver) {
      return J.getInterceptor$(receiver).get$hashCode(receiver);
    },
    get$iterator$ax(receiver) {
      return J.getInterceptor$ax(receiver).get$iterator(receiver);
    },
    get$length$asx(receiver) {
      return J.getInterceptor$asx(receiver).get$length(receiver);
    },
    get$onLoad$x(receiver) {
      return J.getInterceptor$x(receiver).get$onLoad(receiver);
    },
    $eq$(receiver, a0) {
      if (receiver == null)
        return a0 == null;
      if (typeof receiver != "object")
        return a0 != null && receiver === a0;
      return J.getInterceptor$(receiver).$eq(receiver, a0);
    },
    $index$asx(receiver, a0) {
      if (typeof a0 === "number")
        if (receiver.constructor == Array || typeof receiver == "string" || A.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
          if (a0 >>> 0 === a0 && a0 < receiver.length)
            return receiver[a0];
      return J.getInterceptor$asx(receiver).$index(receiver, a0);
    },
    addEventListener$3$x(receiver, a0, a1, a2) {
      return J.getInterceptor$x(receiver).addEventListener$3(receiver, a0, a1, a2);
    },
    elementAt$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
    },
    forEach$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
    },
    toString$0$(receiver) {
      return J.getInterceptor$(receiver).toString$0(receiver);
    },
    Interceptor: function Interceptor() {
    },
    JSBool: function JSBool() {
    },
    JSNull: function JSNull() {
    },
    JavaScriptObject: function JavaScriptObject() {
    },
    PlainJavaScriptObject: function PlainJavaScriptObject() {
    },
    UnknownJavaScriptObject: function UnknownJavaScriptObject() {
    },
    JavaScriptFunction: function JavaScriptFunction() {
    },
    JSArray: function JSArray(t0) {
      this.$ti = t0;
    },
    JSUnmodifiableArray: function JSUnmodifiableArray(t0) {
      this.$ti = t0;
    },
    ArrayIterator: function ArrayIterator(t0, t1, t2) {
      var _ = this;
      _._iterable = t0;
      _.__interceptors$_length = t1;
      _._index = 0;
      _._current = null;
      _.$ti = t2;
    },
    JSNumber: function JSNumber() {
    },
    JSInt: function JSInt() {
    },
    JSNumNotInt: function JSNumNotInt() {
    },
    JSString: function JSString() {
    }
  },
  B = {};
  var holders = [A, J, B];
  hunkHelpers.setFunctionNamesIfNecessary(holders);
  var $ = {};
  A.JS_CONST.prototype = {};
  J.Interceptor.prototype = {
    $eq(receiver, other) {
      return receiver === other;
    },
    get$hashCode(receiver) {
      return A.Primitives_objectHashCode(receiver);
    },
    toString$0(receiver) {
      return "Instance of '" + A.Primitives_objectTypeName(receiver) + "'";
    }
  };
  J.JSBool.prototype = {
    toString$0(receiver) {
      return String(receiver);
    },
    get$hashCode(receiver) {
      return receiver ? 519018 : 218159;
    },
    $isbool: 1
  };
  J.JSNull.prototype = {
    $eq(receiver, other) {
      return null == other;
    },
    toString$0(receiver) {
      return "null";
    },
    get$hashCode(receiver) {
      return 0;
    },
    $isNull: 1
  };
  J.JavaScriptObject.prototype = {
    get$hashCode(receiver) {
      return 0;
    },
    toString$0(receiver) {
      return String(receiver);
    }
  };
  J.PlainJavaScriptObject.prototype = {};
  J.UnknownJavaScriptObject.prototype = {};
  J.JavaScriptFunction.prototype = {
    toString$0(receiver) {
      var dartClosure = receiver[$.$get$DART_CLOSURE_PROPERTY_NAME()];
      if (dartClosure == null)
        return this.super$JavaScriptObject$toString(receiver);
      return "JavaScript function for " + J.toString$0$(dartClosure);
    },
    $isFunction: 1
  };
  J.JSArray.prototype = {
    add$1(receiver, value) {
      A._arrayInstanceType(receiver)._precomputed1._as(value);
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("add"));
      receiver.push(value);
    },
    remove$1(receiver, element) {
      var i;
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("remove"));
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq$(receiver[i], element)) {
          receiver.splice(i, 1);
          return true;
        }
      return false;
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    sort$1(receiver, compare) {
      var t1 = A._arrayInstanceType(receiver);
      t1._eval$1("int(1,1)?")._as(compare);
      if (!!receiver.immutable$list)
        A.throwExpression(A.UnsupportedError$("sort"));
      A.Sort_sort(receiver, compare, t1._precomputed1);
    },
    shuffle$0(receiver) {
      var $length, pos, t1, tmp;
      if (!!receiver.immutable$list)
        A.throwExpression(A.UnsupportedError$("shuffle"));
      $length = receiver.length;
      for (; $length > 1;) {
        pos = B.C__JSRandom.nextInt$1($length);
        --$length;
        t1 = receiver.length;
        if (!($length < t1))
          return A.ioore(receiver, $length);
        tmp = receiver[$length];
        if (!(pos >= 0 && pos < t1))
          return A.ioore(receiver, pos);
        this.$indexSet(receiver, $length, receiver[pos]);
        this.$indexSet(receiver, pos, tmp);
      }
    },
    indexOf$1(receiver, element) {
      var i,
        $length = receiver.length;
      if (0 >= $length)
        return -1;
      for (i = 0; i < $length; ++i) {
        if (!(i < receiver.length))
          return A.ioore(receiver, i);
        if (J.$eq$(receiver[i], element))
          return i;
      }
      return -1;
    },
    contains$1(receiver, other) {
      var i;
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq$(receiver[i], other))
          return true;
      return false;
    },
    toString$0(receiver) {
      return A.IterableBase_iterableToFullString(receiver, "[", "]");
    },
    get$iterator(receiver) {
      return new J.ArrayIterator(receiver, receiver.length, A._arrayInstanceType(receiver)._eval$1("ArrayIterator<1>"));
    },
    get$hashCode(receiver) {
      return A.Primitives_objectHashCode(receiver);
    },
    get$length(receiver) {
      return receiver.length;
    },
    set$length(receiver, newLength) {
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("set length"));
      if (newLength > receiver.length)
        A._arrayInstanceType(receiver)._precomputed1._as(null);
      receiver.length = newLength;
    },
    $index(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      A._arrayInstanceType(receiver)._precomputed1._as(value);
      if (!!receiver.immutable$list)
        A.throwExpression(A.UnsupportedError$("indexed set"));
      if (!(index >= 0 && index < receiver.length))
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      receiver[index] = value;
    },
    $isIterable: 1,
    $isList: 1
  };
  J.JSUnmodifiableArray.prototype = {};
  J.ArrayIterator.prototype = {
    get$current(_) {
      return this.$ti._precomputed1._as(this._current);
    },
    moveNext$0() {
      var t2, _this = this,
        t1 = _this._iterable,
        $length = t1.length;
      if (_this.__interceptors$_length !== $length)
        throw A.wrapException(A.throwConcurrentModificationError(t1));
      t2 = _this._index;
      if (t2 >= $length) {
        _this.set$_current(null);
        return false;
      }
      _this.set$_current(t1[t2]);
      ++_this._index;
      return true;
    },
    set$_current(_current) {
      this._current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  J.JSNumber.prototype = {
    toInt$0(receiver) {
      var t1;
      if (receiver >= -2147483648 && receiver <= 2147483647)
        return receiver | 0;
      if (isFinite(receiver)) {
        t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
        return t1 + 0;
      }
      throw A.wrapException(A.UnsupportedError$("" + receiver + ".toInt()"));
    },
    ceil$0(receiver) {
      var truncated, d;
      if (receiver >= 0) {
        if (receiver <= 2147483647) {
          truncated = receiver | 0;
          return receiver === truncated ? truncated : truncated + 1;
        }
      } else if (receiver >= -2147483648)
        return receiver | 0;
      d = Math.ceil(receiver);
      if (isFinite(d))
        return d;
      throw A.wrapException(A.UnsupportedError$("" + receiver + ".ceil()"));
    },
    floor$0(receiver) {
      var truncated, d;
      if (receiver >= 0) {
        if (receiver <= 2147483647)
          return receiver | 0;
      } else if (receiver >= -2147483648) {
        truncated = receiver | 0;
        return receiver === truncated ? truncated : truncated - 1;
      }
      d = Math.floor(receiver);
      if (isFinite(d))
        return d;
      throw A.wrapException(A.UnsupportedError$("" + receiver + ".floor()"));
    },
    round$0(receiver) {
      if (receiver > 0) {
        if (receiver !== 1 / 0)
          return Math.round(receiver);
      } else if (receiver > -1 / 0)
        return 0 - Math.round(0 - receiver);
      throw A.wrapException(A.UnsupportedError$("" + receiver + ".round()"));
    },
    toRadixString$1(receiver, radix) {
      var result, match, t1, exponent;
      if (radix < 2 || radix > 36)
        throw A.wrapException(A.RangeError$range(radix, 2, 36, "radix", null));
      result = receiver.toString(radix);
      if (B.JSString_methods.codeUnitAt$1(result, result.length - 1) !== 41)
        return result;
      match = /^([\da-z]+)(?:\.([\da-z]+))?\(e\+(\d+)\)$/.exec(result);
      if (match == null)
        A.throwExpression(A.UnsupportedError$("Unexpected toString result: " + result));
      t1 = match.length;
      if (1 >= t1)
        return A.ioore(match, 1);
      result = match[1];
      if (3 >= t1)
        return A.ioore(match, 3);
      exponent = +match[3];
      t1 = match[2];
      if (t1 != null) {
        result += t1;
        exponent -= t1.length;
      }
      return result + B.JSString_methods.$mul("0", exponent);
    },
    toString$0(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    get$hashCode(receiver) {
      var absolute, floorLog2, factor, scaled,
        intValue = receiver | 0;
      if (receiver === intValue)
        return intValue & 536870911;
      absolute = Math.abs(receiver);
      floorLog2 = Math.log(absolute) / 0.6931471805599453 | 0;
      factor = Math.pow(2, floorLog2);
      scaled = absolute < 1 ? absolute / factor : factor / absolute;
      return ((scaled * 9007199254740992 | 0) + (scaled * 3542243181176521 | 0)) * 599197 + floorLog2 * 1259 & 536870911;
    },
    $tdiv(receiver, other) {
      if ((receiver | 0) === receiver)
        if (other >= 1 || other < -1)
          return receiver / other | 0;
      return this._tdivSlow$1(receiver, other);
    },
    _tdivFast$1(receiver, other) {
      return (receiver | 0) === receiver ? receiver / other | 0 : this._tdivSlow$1(receiver, other);
    },
    _tdivSlow$1(receiver, other) {
      var quotient = receiver / other;
      if (quotient >= -2147483648 && quotient <= 2147483647)
        return quotient | 0;
      if (quotient > 0) {
        if (quotient !== 1 / 0)
          return Math.floor(quotient);
      } else if (quotient > -1 / 0)
        return Math.ceil(quotient);
      throw A.wrapException(A.UnsupportedError$("Result of truncating division is " + A.S(quotient) + ": " + A.S(receiver) + " ~/ " + other));
    },
    _shrOtherPositive$1(receiver, other) {
      var t1;
      if (receiver > 0)
        t1 = this._shrBothPositive$1(receiver, other);
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrBothPositive$1(receiver, other) {
      return other > 31 ? 0 : receiver >>> other;
    },
    $isdouble: 1,
    $isnum: 1
  };
  J.JSInt.prototype = {$isint: 1};
  J.JSNumNotInt.prototype = {};
  J.JSString.prototype = {
    codeUnitAt$1(receiver, index) {
      if (index < 0)
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      if (index >= receiver.length)
        A.throwExpression(A.diagnoseIndexError(receiver, index));
      return receiver.charCodeAt(index);
    },
    $add(receiver, other) {
      return receiver + other;
    },
    $mul(receiver, times) {
      var s, result;
      if (0 >= times)
        return "";
      if (times === 1 || receiver.length === 0)
        return receiver;
      if (times !== times >>> 0)
        throw A.wrapException(B.C_OutOfMemoryError);
      for (s = receiver, result = ""; true;) {
        if ((times & 1) === 1)
          result = s + result;
        times = times >>> 1;
        if (times === 0)
          break;
        s += s;
      }
      return result;
    },
    padLeft$2(receiver, width, padding) {
      var delta = width - receiver.length;
      if (delta <= 0)
        return receiver;
      return this.$mul(padding, delta) + receiver;
    },
    toString$0(receiver) {
      return receiver;
    },
    get$hashCode(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = hash + receiver.charCodeAt(i) & 536870911;
        hash = hash + ((hash & 524287) << 10) & 536870911;
        hash ^= hash >> 6;
      }
      hash = hash + ((hash & 67108863) << 3) & 536870911;
      hash ^= hash >> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    get$length(receiver) {
      return receiver.length;
    },
    $isString: 1
  };
  A.LateError.prototype = {
    toString$0(_) {
      var t1 = "LateInitializationError: " + this._message;
      return t1;
    }
  };
  A.SentinelValue.prototype = {};
  A.EfficientLengthIterable.prototype = {};
  A.ListIterable.prototype = {
    get$iterator(_) {
      var _this = this;
      return new A.ListIterator(_this, _this.get$length(_this), _this.$ti._eval$1("ListIterator<1>"));
    }
  };
  A.SubListIterable.prototype = {
    get$_endIndex() {
      var $length = J.get$length$asx(this.__internal$_iterable);
      return $length;
    },
    get$_startIndex() {
      var $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this._start;
      if (t1 > $length)
        return $length;
      return t1;
    },
    get$length(_) {
      var $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this._start;
      if (t1 >= $length)
        return 0;
      return $length - t1;
    },
    elementAt$1(_, index) {
      var _this = this,
        realIndex = _this.get$_startIndex() + index,
        t1 = _this.get$_endIndex();
      if (realIndex >= t1)
        throw A.wrapException(A.IndexError$(index, _this, "index", null, null));
      return J.elementAt$1$ax(_this.__internal$_iterable, realIndex);
    }
  };
  A.ListIterator.prototype = {
    get$current(_) {
      return this.$ti._precomputed1._as(this.__internal$_current);
    },
    moveNext$0() {
      var t3, _this = this,
        t1 = _this.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1),
        $length = t2.get$length(t1);
      if (_this.__internal$_length !== $length)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      t3 = _this.__internal$_index;
      if (t3 >= $length) {
        _this.set$__internal$_current(null);
        return false;
      }
      _this.set$__internal$_current(t2.elementAt$1(t1, t3));
      ++_this.__internal$_index;
      return true;
    },
    set$__internal$_current(_current) {
      this.__internal$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  A.MappedIterable.prototype = {
    get$iterator(_) {
      var t1 = this.__internal$_iterable,
        t2 = t1._map,
        t3 = A._instanceType(this);
      return new A.MappedIterator(A.LinkedHashMapKeyIterator$(t2, t2._modifications, t1.$ti._precomputed1), this._f, t3._eval$1("@<1>")._bind$1(t3._rest[1])._eval$1("MappedIterator<1,2>"));
    },
    get$length(_) {
      return this.__internal$_iterable._map._length;
    }
  };
  A.EfficientLengthMappedIterable.prototype = {};
  A.MappedIterator.prototype = {
    moveNext$0() {
      var _this = this,
        t1 = _this._iterator;
      if (t1.moveNext$0()) {
        _this.set$__internal$_current(_this._f.call$1(t1.__js_helper$_current));
        return true;
      }
      _this.set$__internal$_current(null);
      return false;
    },
    get$current(_) {
      return this.$ti._rest[1]._as(this.__internal$_current);
    },
    set$__internal$_current(_current) {
      this.__internal$_current = this.$ti._eval$1("2?")._as(_current);
    }
  };
  A.WhereIterable.prototype = {
    get$iterator(_) {
      return new A.WhereIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, this.$ti._eval$1("WhereIterator<1>"));
    }
  };
  A.WhereIterator.prototype = {
    moveNext$0() {
      var t1, t2;
      for (t1 = this._iterator, t2 = this._f; t1.moveNext$0();)
        if (A.boolConversionCheck(t2.call$1(t1.get$current(t1))))
          return true;
      return false;
    },
    get$current(_) {
      var t1 = this._iterator;
      return t1.get$current(t1);
    }
  };
  A.FixedLengthListMixin.prototype = {};
  A.TypeErrorDecoder.prototype = {
    matchTypeError$1(message) {
      var result, t1, _this = this,
        match = new RegExp(_this._pattern).exec(message);
      if (match == null)
        return null;
      result = Object.create(null);
      t1 = _this._arguments;
      if (t1 !== -1)
        result.arguments = match[t1 + 1];
      t1 = _this._argumentsExpr;
      if (t1 !== -1)
        result.argumentsExpr = match[t1 + 1];
      t1 = _this._expr;
      if (t1 !== -1)
        result.expr = match[t1 + 1];
      t1 = _this._method;
      if (t1 !== -1)
        result.method = match[t1 + 1];
      t1 = _this._receiver;
      if (t1 !== -1)
        result.receiver = match[t1 + 1];
      return result;
    }
  };
  A.NullError.prototype = {
    toString$0(_) {
      var t1 = this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + this.__js_helper$_message;
      return "NoSuchMethodError: method not found: '" + t1 + "' on null";
    }
  };
  A.JsNoSuchMethodError.prototype = {
    toString$0(_) {
      var t2, _this = this,
        _s38_ = "NoSuchMethodError: method not found: '",
        t1 = _this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + _this.__js_helper$_message;
      t2 = _this._receiver;
      if (t2 == null)
        return _s38_ + t1 + "' (" + _this.__js_helper$_message + ")";
      return _s38_ + t1 + "' on '" + t2 + "' (" + _this.__js_helper$_message + ")";
    }
  };
  A.UnknownJsTypeError.prototype = {
    toString$0(_) {
      var t1 = this.__js_helper$_message;
      return t1.length === 0 ? "Error" : "Error: " + t1;
    }
  };
  A.NullThrownFromJavaScriptException.prototype = {
    toString$0(_) {
      return "Throw of null ('" + (this._irritant === null ? "null" : "undefined") + "' from JavaScript)";
    }
  };
  A._StackTrace.prototype = {
    toString$0(_) {
      var trace,
        t1 = this._trace;
      if (t1 != null)
        return t1;
      t1 = this._exception;
      trace = t1 !== null && typeof t1 === "object" ? t1.stack : null;
      return this._trace = trace == null ? "" : trace;
    },
    $isStackTrace: 1
  };
  A.Closure.prototype = {
    toString$0(_) {
      var $constructor = this.constructor,
        $name = $constructor == null ? null : $constructor.name;
      return "Closure '" + A.unminifyOrTag($name == null ? "unknown" : $name) + "'";
    },
    $isFunction: 1,
    get$$call() {
      return this;
    },
    "call*": "call$1",
    $requiredArgCount: 1,
    $defaultValues: null
  };
  A.Closure0Args.prototype = {"call*": "call$0", $requiredArgCount: 0};
  A.Closure2Args.prototype = {"call*": "call$2", $requiredArgCount: 2};
  A.TearOffClosure.prototype = {};
  A.StaticClosure.prototype = {
    toString$0(_) {
      var $name = this.$static_name;
      if ($name == null)
        return "Closure of unknown static method";
      return "Closure '" + A.unminifyOrTag($name) + "'";
    }
  };
  A.BoundClosure.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof A.BoundClosure))
        return false;
      return this.$_target === other.$_target && this._receiver === other._receiver;
    },
    get$hashCode(_) {
      return (A.objectHashCode(this._receiver) ^ A.Primitives_objectHashCode(this.$_target)) >>> 0;
    },
    toString$0(_) {
      return "Closure '" + this.$_name + "' of " + ("Instance of '" + A.Primitives_objectTypeName(type$.Object._as(this._receiver)) + "'");
    }
  };
  A.RuntimeError.prototype = {
    toString$0(_) {
      return "RuntimeError: " + this.message;
    }
  };
  A._AssertionError.prototype = {
    toString$0(_) {
      return "Assertion failed: " + A.Error_safeToString(this.message);
    }
  };
  A.JsLinkedHashMap.prototype = {
    get$length(_) {
      return this._length;
    },
    get$keys(_) {
      return new A.LinkedHashMapKeyIterable(this, A._instanceType(this)._eval$1("LinkedHashMapKeyIterable<1>"));
    },
    get$values(_) {
      var t1 = A._instanceType(this);
      return A.MappedIterable_MappedIterable(new A.LinkedHashMapKeyIterable(this, t1._eval$1("LinkedHashMapKeyIterable<1>")), new A.JsLinkedHashMap_values_closure(this), t1._precomputed1, t1._rest[1]);
    },
    containsKey$1(_, key) {
      var t1 = this.internalContainsKey$1(key);
      return t1;
    },
    internalContainsKey$1(key) {
      var rest = this.__js_helper$_rest;
      if (rest == null)
        return false;
      return this.internalFindBucketIndex$2(this._getTableBucket$2(rest, key.get$hashCode(key) & 0x3ffffff), key) >= 0;
    },
    $index(_, key) {
      var strings, cell, t1, nums, _this = this, _null = null;
      if (typeof key == "string") {
        strings = _this._strings;
        if (strings == null)
          return _null;
        cell = _this._getTableCell$2(strings, key);
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
      } else if (typeof key == "number" && (key & 0x3ffffff) === key) {
        nums = _this._nums;
        if (nums == null)
          return _null;
        cell = _this._getTableCell$2(nums, key);
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
      } else
        return _this.internalGet$1(key);
    },
    internalGet$1(key) {
      var bucket, index,
        rest = this.__js_helper$_rest;
      if (rest == null)
        return null;
      bucket = this._getTableBucket$2(rest, J.get$hashCode$(key) & 0x3ffffff);
      index = this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return null;
      return bucket[index].hashMapCellValue;
    },
    $indexSet(_, key, value) {
      var strings, nums, rest, hash, bucket, index, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      if (typeof key == "string") {
        strings = _this._strings;
        _this._addHashTableEntry$3(strings == null ? _this._strings = _this._newHashTable$0() : strings, key, value);
      } else if (typeof key == "number" && (key & 0x3ffffff) === key) {
        nums = _this._nums;
        _this._addHashTableEntry$3(nums == null ? _this._nums = _this._newHashTable$0() : nums, key, value);
      } else {
        rest = _this.__js_helper$_rest;
        if (rest == null)
          rest = _this.__js_helper$_rest = _this._newHashTable$0();
        hash = J.get$hashCode$(key) & 0x3ffffff;
        bucket = _this._getTableBucket$2(rest, hash);
        if (bucket == null)
          _this._setTableEntry$3(rest, hash, [_this._newLinkedCell$2(key, value)]);
        else {
          index = _this.internalFindBucketIndex$2(bucket, key);
          if (index >= 0)
            bucket[index].hashMapCellValue = value;
          else
            bucket.push(_this._newLinkedCell$2(key, value));
        }
      }
    },
    forEach$1(_, action) {
      var cell, modifications, _this = this;
      A._instanceType(_this)._eval$1("~(1,2)")._as(action);
      cell = _this._first;
      modifications = _this._modifications;
      for (; cell != null;) {
        action.call$2(cell.hashMapCellKey, cell.hashMapCellValue);
        if (modifications !== _this._modifications)
          throw A.wrapException(A.ConcurrentModificationError$(_this));
        cell = cell._next;
      }
    },
    _addHashTableEntry$3(table, key, value) {
      var cell, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      cell = _this._getTableCell$2(table, key);
      if (cell == null)
        _this._setTableEntry$3(table, key, _this._newLinkedCell$2(key, value));
      else
        cell.hashMapCellValue = value;
    },
    _newLinkedCell$2(key, value) {
      var _this = this,
        t1 = A._instanceType(_this),
        cell = new A.LinkedHashMapCell(t1._precomputed1._as(key), t1._rest[1]._as(value));
      if (_this._first == null)
        _this._first = _this._last = cell;
      else
        _this._last = _this._last._next = cell;
      ++_this._length;
      _this._modifications = _this._modifications + 1 & 67108863;
      return cell;
    },
    internalFindBucketIndex$2(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i].hashMapCellKey, key))
          return i;
      return -1;
    },
    toString$0(_) {
      return A.MapBase_mapToString(this);
    },
    _getTableCell$2(table, key) {
      return table[key];
    },
    _getTableBucket$2(table, key) {
      return table[key];
    },
    _setTableEntry$3(table, key, value) {
      table[key] = value;
    },
    _deleteTableEntry$2(table, key) {
      delete table[key];
    },
    _newHashTable$0() {
      var _s20_ = "<non-identifier-key>",
        table = Object.create(null);
      this._setTableEntry$3(table, _s20_, table);
      this._deleteTableEntry$2(table, _s20_);
      return table;
    }
  };
  A.JsLinkedHashMap_values_closure.prototype = {
    call$1(each) {
      var t1 = this.$this,
        t2 = A._instanceType(t1);
      return t2._rest[1]._as(t1.$index(0, t2._precomputed1._as(each)));
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("2(1)");
    }
  };
  A.LinkedHashMapCell.prototype = {};
  A.LinkedHashMapKeyIterable.prototype = {
    get$length(_) {
      return this._map._length;
    },
    get$iterator(_) {
      var t1 = this._map,
        t2 = new A.LinkedHashMapKeyIterator(t1, t1._modifications, this.$ti._eval$1("LinkedHashMapKeyIterator<1>"));
      t2._cell = t1._first;
      return t2;
    }
  };
  A.LinkedHashMapKeyIterator.prototype = {
    get$current(_) {
      return this.__js_helper$_current;
    },
    moveNext$0() {
      var cell, _this = this,
        t1 = _this._map;
      if (_this._modifications !== t1._modifications)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      cell = _this._cell;
      if (cell == null) {
        _this.set$__js_helper$_current(null);
        return false;
      } else {
        _this.set$__js_helper$_current(cell.hashMapCellKey);
        _this._cell = cell._next;
        return true;
      }
    },
    set$__js_helper$_current(_current) {
      this.__js_helper$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  A.initHooks_closure.prototype = {
    call$1(o) {
      return this.getTag(o);
    },
    $signature: 7
  };
  A.initHooks_closure0.prototype = {
    call$2(o, tag) {
      return this.getUnknownTag(o, tag);
    },
    $signature: 8
  };
  A.initHooks_closure1.prototype = {
    call$1(tag) {
      return this.prototypeForTag(A._asString(tag));
    },
    $signature: 9
  };
  A.NativeTypedData.prototype = {$isTypedData: 1};
  A.NativeTypedArray.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $isJavaScriptIndexingBehavior: 1
  };
  A.NativeTypedArrayOfDouble.prototype = {
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      A._asDouble(value);
      A._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    $isIterable: 1,
    $isList: 1
  };
  A.NativeTypedArrayOfInt.prototype = {
    $indexSet(receiver, index, value) {
      A._asInt(value);
      A._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    $isIterable: 1,
    $isList: 1
  };
  A.NativeFloat32List.prototype = {$isFloat32List: 1};
  A.NativeInt16List.prototype = {
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  A.NativeInt32List.prototype = {
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  A.NativeInt8List.prototype = {
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  A.NativeUint16List.prototype = {
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  A.NativeUint32List.prototype = {
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  A.NativeUint8ClampedList.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  A.NativeUint8List.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $isUint8List: 1
  };
  A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.prototype = {};
  A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {};
  A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.prototype = {};
  A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {};
  A.Rti.prototype = {
    _eval$1(recipe) {
      return A._Universe_evalInEnvironment(init.typeUniverse, this, recipe);
    },
    _bind$1(typeOrTuple) {
      return A._Universe_bind(init.typeUniverse, this, typeOrTuple);
    }
  };
  A._FunctionParameters.prototype = {};
  A._Type.prototype = {
    toString$0(_) {
      return A._rtiToString(this._rti, null);
    }
  };
  A._Error.prototype = {
    toString$0(_) {
      return this.__rti$_message;
    }
  };
  A._TypeError.prototype = {$isTypeError: 1};
  A._AsyncRun__initializeScheduleImmediate_internalCallback.prototype = {
    call$1(_) {
      var t1 = this._box_0,
        f = t1.storedCallback;
      t1.storedCallback = null;
      f.call$0();
    },
    $signature: 10
  };
  A._AsyncRun__initializeScheduleImmediate_closure.prototype = {
    call$1(callback) {
      var t1, t2;
      this._box_0.storedCallback = type$.void_Function._as(callback);
      t1 = this.div;
      t2 = this.span;
      t1.firstChild ? t1.removeChild(t2) : t1.appendChild(t2);
    },
    $signature: 11
  };
  A._AsyncRun__scheduleImmediateJsOverride_internalCallback.prototype = {
    call$0() {
      this.callback.call$0();
    },
    $signature: 4
  };
  A._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback.prototype = {
    call$0() {
      this.callback.call$0();
    },
    $signature: 4
  };
  A._TimerImpl.prototype = {
    _TimerImpl$2(milliseconds, callback) {
      if (self.setTimeout != null)
        self.setTimeout(A.convertDartClosureToJS(new A._TimerImpl_internalCallback(this, callback), 0), milliseconds);
      else
        throw A.wrapException(A.UnsupportedError$("`setTimeout()` not found."));
    }
  };
  A._TimerImpl_internalCallback.prototype = {
    call$0() {
      this.callback.call$0();
    },
    $signature: 0
  };
  A.AsyncError.prototype = {
    toString$0(_) {
      return A.S(this.error);
    },
    $isError: 1,
    get$stackTrace() {
      return this.stackTrace;
    }
  };
  A._Completer.prototype = {};
  A._AsyncCompleter.prototype = {};
  A._FutureListener.prototype = {
    matchesErrorTest$1(asyncError) {
      if ((this.state & 15) !== 6)
        return true;
      return this.result._zone.runUnary$2$2(type$.bool_Function_Object._as(this.callback), asyncError.error, type$.bool, type$.Object);
    },
    handleError$1(asyncError) {
      var exception, _this = this,
        errorCallback = _this.errorCallback,
        result = null,
        t1 = type$.dynamic,
        t2 = type$.Object,
        t3 = asyncError.error,
        t4 = _this.result._zone;
      if (type$.dynamic_Function_Object_StackTrace._is(errorCallback))
        result = t4.runBinary$3$3(errorCallback, t3, asyncError.stackTrace, t1, t2, type$.StackTrace);
      else
        result = t4.runUnary$2$2(type$.dynamic_Function_Object._as(errorCallback), t3, t1, t2);
      try {
        t1 = _this.$ti._eval$1("2/")._as(result);
        return t1;
      } catch (exception) {
        if (type$.TypeError._is(A.unwrapException(exception))) {
          if ((_this.state & 1) !== 0)
            throw A.wrapException(A.ArgumentError$("The error handler of Future.then must return a value of the returned future's type", "onError"));
          throw A.wrapException(A.ArgumentError$("The error handler of Future.catchError must return a value of the future's type", "onError"));
        } else
          throw exception;
      }
    }
  };
  A._Future.prototype = {
    then$1$2$onError(f, onError, $R) {
      var currentZone, result, t2,
        t1 = this.$ti;
      t1._bind$1($R)._eval$1("1/(2)")._as(f);
      currentZone = $.Zone__current;
      if (currentZone === B.C__RootZone) {
        if (onError != null && !type$.dynamic_Function_Object_StackTrace._is(onError) && !type$.dynamic_Function_Object._is(onError))
          throw A.wrapException(A.ArgumentError$value(onError, "onError", string$.Error_));
      } else {
        $R._eval$1("@<0/>")._bind$1(t1._precomputed1)._eval$1("1(2)")._as(f);
        if (onError != null)
          onError = A._registerErrorHandler(onError, currentZone);
      }
      result = new A._Future(currentZone, $R._eval$1("_Future<0>"));
      t2 = onError == null ? 1 : 3;
      this._addListener$1(new A._FutureListener(result, t2, f, onError, t1._eval$1("@<1>")._bind$1($R)._eval$1("_FutureListener<1,2>")));
      return result;
    },
    then$1$1(f, $R) {
      return this.then$1$2$onError(f, null, $R);
    },
    _cloneResult$1(source) {
      this._state = source._state & 30 | this._state & 1;
      this._resultOrListeners = source._resultOrListeners;
    },
    _addListener$1(listener) {
      var source, _this = this,
        t1 = _this._state;
      if (t1 <= 3) {
        listener._nextListener = type$.nullable__FutureListener_dynamic_dynamic._as(_this._resultOrListeners);
        _this._resultOrListeners = listener;
      } else {
        if ((t1 & 4) !== 0) {
          source = type$._Future_dynamic._as(_this._resultOrListeners);
          if ((source._state & 24) === 0) {
            source._addListener$1(listener);
            return;
          }
          _this._cloneResult$1(source);
        }
        A._rootScheduleMicrotask(null, null, _this._zone, type$.void_Function._as(new A._Future__addListener_closure(_this, listener)));
      }
    },
    _prependListeners$1(listeners) {
      var t1, existingListeners, next, cursor, next0, source, _this = this, _box_0 = {};
      _box_0.listeners = listeners;
      if (listeners == null)
        return;
      t1 = _this._state;
      if (t1 <= 3) {
        existingListeners = type$.nullable__FutureListener_dynamic_dynamic._as(_this._resultOrListeners);
        _this._resultOrListeners = listeners;
        if (existingListeners != null) {
          next = listeners._nextListener;
          for (cursor = listeners; next != null; cursor = next, next = next0)
            next0 = next._nextListener;
          cursor._nextListener = existingListeners;
        }
      } else {
        if ((t1 & 4) !== 0) {
          source = type$._Future_dynamic._as(_this._resultOrListeners);
          if ((source._state & 24) === 0) {
            source._prependListeners$1(listeners);
            return;
          }
          _this._cloneResult$1(source);
        }
        _box_0.listeners = _this._reverseListeners$1(listeners);
        A._rootScheduleMicrotask(null, null, _this._zone, type$.void_Function._as(new A._Future__prependListeners_closure(_box_0, _this)));
      }
    },
    _removeListeners$0() {
      var current = type$.nullable__FutureListener_dynamic_dynamic._as(this._resultOrListeners);
      this._resultOrListeners = null;
      return this._reverseListeners$1(current);
    },
    _reverseListeners$1(listeners) {
      var current, prev, next;
      for (current = listeners, prev = null; current != null; prev = current, current = next) {
        next = current._nextListener;
        current._nextListener = prev;
      }
      return prev;
    },
    _completeWithValue$1(value) {
      var listeners, _this = this;
      _this.$ti._precomputed1._as(value);
      listeners = _this._removeListeners$0();
      _this._state = 8;
      _this._resultOrListeners = value;
      A._Future__propagateToListeners(_this, listeners);
    },
    _asyncComplete$1(value) {
      var t1 = this.$ti;
      t1._eval$1("1/")._as(value);
      this._asyncCompleteWithValue$1(t1._precomputed1._as(value));
    },
    _asyncCompleteWithValue$1(value) {
      var _this = this;
      _this.$ti._precomputed1._as(value);
      _this._state ^= 2;
      A._rootScheduleMicrotask(null, null, _this._zone, type$.void_Function._as(new A._Future__asyncCompleteWithValue_closure(_this, value)));
    },
    $isFuture: 1
  };
  A._Future__addListener_closure.prototype = {
    call$0() {
      A._Future__propagateToListeners(this.$this, this.listener);
    },
    $signature: 0
  };
  A._Future__prependListeners_closure.prototype = {
    call$0() {
      A._Future__propagateToListeners(this.$this, this._box_0.listeners);
    },
    $signature: 0
  };
  A._Future__asyncCompleteWithValue_closure.prototype = {
    call$0() {
      this.$this._completeWithValue$1(this.value);
    },
    $signature: 0
  };
  A._Future__propagateToListeners_handleWhenCompleteCallback.prototype = {
    call$0() {
      var e, s, t1, exception, t2, originalSource, _this = this, completeResult = null;
      try {
        t1 = _this._box_0.listener;
        completeResult = t1.result._zone.run$1$1(type$.dynamic_Function._as(t1.callback), type$.dynamic);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = _this.hasError && type$.AsyncError._as(_this._box_1.source._resultOrListeners).error === e;
        t2 = _this._box_0;
        if (t1)
          t2.listenerValueOrError = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        else
          t2.listenerValueOrError = A.AsyncError$(e, s);
        t2.listenerHasError = true;
        return;
      }
      if (completeResult instanceof A._Future && (completeResult._state & 24) !== 0) {
        if ((completeResult._state & 16) !== 0) {
          t1 = _this._box_0;
          t1.listenerValueOrError = type$.AsyncError._as(completeResult._resultOrListeners);
          t1.listenerHasError = true;
        }
        return;
      }
      if (type$.Future_dynamic._is(completeResult)) {
        originalSource = _this._box_1.source;
        t1 = _this._box_0;
        t1.listenerValueOrError = completeResult.then$1$1(new A._Future__propagateToListeners_handleWhenCompleteCallback_closure(originalSource), type$.dynamic);
        t1.listenerHasError = false;
      }
    },
    $signature: 0
  };
  A._Future__propagateToListeners_handleWhenCompleteCallback_closure.prototype = {
    call$1(_) {
      return this.originalSource;
    },
    $signature: 12
  };
  A._Future__propagateToListeners_handleValueCallback.prototype = {
    call$0() {
      var e, s, t1, t2, t3, t4, t5, exception;
      try {
        t1 = this._box_0;
        t2 = t1.listener;
        t3 = t2.$ti;
        t4 = t3._precomputed1;
        t5 = t4._as(this.sourceResult);
        t1.listenerValueOrError = t2.result._zone.runUnary$2$2(t3._eval$1("2/(1)")._as(t2.callback), t5, t3._eval$1("2/"), t4);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = this._box_0;
        t1.listenerValueOrError = A.AsyncError$(e, s);
        t1.listenerHasError = true;
      }
    },
    $signature: 0
  };
  A._Future__propagateToListeners_handleError.prototype = {
    call$0() {
      var asyncError, e, s, t1, exception, t2, _this = this;
      try {
        asyncError = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        t1 = _this._box_0;
        if (t1.listener.matchesErrorTest$1(asyncError) && t1.listener.errorCallback != null) {
          t1.listenerValueOrError = t1.listener.handleError$1(asyncError);
          t1.listenerHasError = false;
        }
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        t2 = _this._box_0;
        if (t1.error === e)
          t2.listenerValueOrError = t1;
        else
          t2.listenerValueOrError = A.AsyncError$(e, s);
        t2.listenerHasError = true;
      }
    },
    $signature: 0
  };
  A._AsyncCallbackEntry.prototype = {};
  A.Stream.prototype = {
    get$length(_) {
      var t2, t3, _this = this, t1 = {},
        future = new A._Future($.Zone__current, type$._Future_int);
      t1.count = 0;
      t2 = A._instanceType(_this);
      t3 = t2._eval$1("~(1)?")._as(new A.Stream_length_closure(t1, _this));
      type$.nullable_void_Function._as(new A.Stream_length_closure0(t1, future));
      A._EventStreamSubscription$(_this._target, _this._eventType, t3, false, t2._precomputed1);
      return future;
    }
  };
  A.Stream_length_closure.prototype = {
    call$1(_) {
      A._instanceType(this.$this)._precomputed1._as(_);
      ++this._box_0.count;
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("~(1)");
    }
  };
  A.Stream_length_closure0.prototype = {
    call$0() {
      var t1 = this.future,
        t2 = t1.$ti,
        t3 = t2._eval$1("1/")._as(this._box_0.count),
        listeners = t1._removeListeners$0();
      t2._precomputed1._as(t3);
      t1._state = 8;
      t1._resultOrListeners = t3;
      A._Future__propagateToListeners(t1, listeners);
    },
    $signature: 0
  };
  A.StreamSubscription.prototype = {};
  A._Zone.prototype = {$isZone: 1};
  A._rootHandleError_closure.prototype = {
    call$0() {
      var error = type$.Object._as(A.wrapException(this.error));
      error.stack = this.stackTrace.toString$0(0);
      throw error;
    },
    $signature: 0
  };
  A._RootZone.prototype = {
    runGuarded$1(f) {
      var e, s, exception, t1, t2;
      type$.void_Function._as(f);
      try {
        if (B.C__RootZone === $.Zone__current) {
          f.call$0();
          return;
        }
        A._rootRun(null, null, this, f, type$.void);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = type$.Object._as(e);
        t2 = type$.StackTrace._as(s);
        A._rootHandleError(t1, t2);
      }
    },
    runUnaryGuarded$1$2(f, arg, $T) {
      var e, s, exception, t1, t2;
      $T._eval$1("~(0)")._as(f);
      $T._as(arg);
      try {
        if (B.C__RootZone === $.Zone__current) {
          f.call$1(arg);
          return;
        }
        A._rootRunUnary(null, null, this, f, arg, type$.void, $T);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = type$.Object._as(e);
        t2 = type$.StackTrace._as(s);
        A._rootHandleError(t1, t2);
      }
    },
    bindCallbackGuarded$1(f) {
      return new A._RootZone_bindCallbackGuarded_closure(this, type$.void_Function._as(f));
    },
    bindUnaryCallbackGuarded$1$1(f, $T) {
      return new A._RootZone_bindUnaryCallbackGuarded_closure(this, $T._eval$1("~(0)")._as(f), $T);
    },
    run$1$1(f, $R) {
      $R._eval$1("0()")._as(f);
      if ($.Zone__current === B.C__RootZone)
        return f.call$0();
      return A._rootRun(null, null, this, f, $R);
    },
    runUnary$2$2(f, arg, $R, $T) {
      $R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(f);
      $T._as(arg);
      if ($.Zone__current === B.C__RootZone)
        return f.call$1(arg);
      return A._rootRunUnary(null, null, this, f, arg, $R, $T);
    },
    runBinary$3$3(f, arg1, arg2, $R, T1, T2) {
      $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(f);
      T1._as(arg1);
      T2._as(arg2);
      if ($.Zone__current === B.C__RootZone)
        return f.call$2(arg1, arg2);
      return A._rootRunBinary(null, null, this, f, arg1, arg2, $R, T1, T2);
    }
  };
  A._RootZone_bindCallbackGuarded_closure.prototype = {
    call$0() {
      return this.$this.runGuarded$1(this.f);
    },
    $signature: 0
  };
  A._RootZone_bindUnaryCallbackGuarded_closure.prototype = {
    call$1(arg) {
      var t1 = this.T;
      return this.$this.runUnaryGuarded$1$2(this.f, t1._as(arg), t1);
    },
    $signature() {
      return this.T._eval$1("~(0)");
    }
  };
  A._LinkedHashSet.prototype = {
    get$iterator(_) {
      var _this = this,
        t1 = new A._LinkedHashSetIterator(_this, _this._collection$_modifications, _this.$ti._eval$1("_LinkedHashSetIterator<1>"));
      t1._collection$_cell = _this._collection$_first;
      return t1;
    },
    get$length(_) {
      return this._collection$_length;
    },
    contains$1(_, object) {
      var t1 = this._contains$1(object);
      return t1;
    },
    _contains$1(object) {
      var rest = this._collection$_rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[object.get$hashCode(object) & 1073741823], object) >= 0;
    },
    add$1(_, element) {
      var strings, nums, _this = this;
      _this.$ti._precomputed1._as(element);
      if (typeof element == "string" && element !== "__proto__") {
        strings = _this._collection$_strings;
        return _this._collection$_addHashTableEntry$2(strings == null ? _this._collection$_strings = A._LinkedHashSet__newHashTable() : strings, element);
      } else if (typeof element == "number" && (element & 1073741823) === element) {
        nums = _this._collection$_nums;
        return _this._collection$_addHashTableEntry$2(nums == null ? _this._collection$_nums = A._LinkedHashSet__newHashTable() : nums, element);
      } else
        return _this._add$1(0, element);
    },
    _add$1(_, element) {
      var rest, hash, bucket, _this = this;
      _this.$ti._precomputed1._as(element);
      rest = _this._collection$_rest;
      if (rest == null)
        rest = _this._collection$_rest = A._LinkedHashSet__newHashTable();
      hash = J.get$hashCode$(element) & 1073741823;
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [_this._collection$_newLinkedCell$1(element)];
      else {
        if (_this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(_this._collection$_newLinkedCell$1(element));
      }
      return true;
    },
    _collection$_addHashTableEntry$2(table, element) {
      this.$ti._precomputed1._as(element);
      if (type$.nullable__LinkedHashSetCell._as(table[element]) != null)
        return false;
      table[element] = this._collection$_newLinkedCell$1(element);
      return true;
    },
    _collection$_newLinkedCell$1(element) {
      var _this = this,
        cell = new A._LinkedHashSetCell(_this.$ti._precomputed1._as(element));
      if (_this._collection$_first == null)
        _this._collection$_first = _this._collection$_last = cell;
      else
        _this._collection$_last = _this._collection$_last._collection$_next = cell;
      ++_this._collection$_length;
      _this._collection$_modifications = _this._collection$_modifications + 1 & 1073741823;
      return cell;
    },
    _findBucketIndex$2(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i]._element, element))
          return i;
      return -1;
    }
  };
  A._LinkedHashSetCell.prototype = {};
  A._LinkedHashSetIterator.prototype = {
    get$current(_) {
      return this.$ti._precomputed1._as(this._collection$_current);
    },
    moveNext$0() {
      var _this = this,
        cell = _this._collection$_cell,
        t1 = _this._set;
      if (_this._collection$_modifications !== t1._collection$_modifications)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      else if (cell == null) {
        _this.set$_collection$_current(null);
        return false;
      } else {
        _this.set$_collection$_current(_this.$ti._eval$1("1?")._as(cell._element));
        _this._collection$_cell = cell._collection$_next;
        return true;
      }
    },
    set$_collection$_current(_current) {
      this._collection$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  A.ListMixin.prototype = {
    get$iterator(receiver) {
      return new A.ListIterator(receiver, this.get$length(receiver), A.instanceType(receiver)._eval$1("ListIterator<ListMixin.E>"));
    },
    elementAt$1(receiver, index) {
      return this.$index(receiver, index);
    },
    toString$0(receiver) {
      return A.IterableBase_iterableToFullString(receiver, "[", "]");
    }
  };
  A.MapBase.prototype = {};
  A.MapBase_mapToString_closure.prototype = {
    call$2(k, v) {
      var t2,
        t1 = this._box_0;
      if (!t1.first)
        this.result._contents += ", ";
      t1.first = false;
      t1 = this.result;
      t2 = t1._contents += A.S(k);
      t1._contents = t2 + ": ";
      t1._contents += A.S(v);
    },
    $signature: 13
  };
  A.MapMixin.prototype = {
    forEach$1(receiver, action) {
      var t2, key,
        t1 = A.instanceType(receiver);
      t1._eval$1("~(MapMixin.K,MapMixin.V)")._as(action);
      for (t2 = J.get$iterator$ax(this.get$keys(receiver)), t1 = t1._eval$1("MapMixin.V"); t2.moveNext$0();) {
        key = t2.get$current(t2);
        action.call$2(key, t1._as(this.$index(receiver, key)));
      }
    },
    get$length(receiver) {
      return J.get$length$asx(this.get$keys(receiver));
    },
    toString$0(receiver) {
      return A.MapBase_mapToString(receiver);
    },
    $isMap: 1
  };
  A.SetMixin.prototype = {
    toString$0(_) {
      return A.IterableBase_iterableToFullString(this, "{", "}");
    }
  };
  A._SetBase.prototype = {$isIterable: 1, $isSet: 1};
  A.__SetBase_Object_SetMixin.prototype = {};
  A._Enum.prototype = {};
  A.Error.prototype = {
    get$stackTrace() {
      return A.getTraceFromException(this.$thrownJsError);
    }
  };
  A.AssertionError.prototype = {
    toString$0(_) {
      var t1 = this.message;
      if (t1 != null)
        return "Assertion failed: " + A.Error_safeToString(t1);
      return "Assertion failed";
    }
  };
  A.TypeError.prototype = {};
  A.NullThrownError.prototype = {
    toString$0(_) {
      return "Throw of null.";
    }
  };
  A.ArgumentError.prototype = {
    get$_errorName() {
      return "Invalid argument" + (!this._hasValue ? "(s)" : "");
    },
    get$_errorExplanation() {
      return "";
    },
    toString$0(_) {
      var explanation, errorValue, _this = this,
        $name = _this.name,
        nameString = $name == null ? "" : " (" + $name + ")",
        message = _this.message,
        messageString = message == null ? "" : ": " + message,
        prefix = _this.get$_errorName() + nameString + messageString;
      if (!_this._hasValue)
        return prefix;
      explanation = _this.get$_errorExplanation();
      errorValue = A.Error_safeToString(_this.invalidValue);
      return prefix + explanation + ": " + errorValue;
    }
  };
  A.RangeError.prototype = {
    get$_errorName() {
      return "RangeError";
    },
    get$_errorExplanation() {
      var explanation,
        start = this.start,
        end = this.end;
      if (start == null)
        explanation = end != null ? ": Not less than or equal to " + A.S(end) : "";
      else if (end == null)
        explanation = ": Not greater than or equal to " + A.S(start);
      else if (end > start)
        explanation = ": Not in inclusive range " + A.S(start) + ".." + A.S(end);
      else
        explanation = end < start ? ": Valid value range is empty" : ": Only valid value is " + A.S(start);
      return explanation;
    }
  };
  A.IndexError.prototype = {
    get$_errorName() {
      return "RangeError";
    },
    get$_errorExplanation() {
      if (A._asInt(this.invalidValue) < 0)
        return ": index must not be negative";
      var t1 = this.length;
      if (t1 === 0)
        return ": no indices are valid";
      return ": index should be less than " + t1;
    },
    get$length(receiver) {
      return this.length;
    }
  };
  A.UnsupportedError.prototype = {
    toString$0(_) {
      return "Unsupported operation: " + this.message;
    }
  };
  A.UnimplementedError.prototype = {
    toString$0(_) {
      var t1 = "UnimplementedError: " + this.message;
      return t1;
    }
  };
  A.StateError.prototype = {
    toString$0(_) {
      return "Bad state: " + this.message;
    }
  };
  A.ConcurrentModificationError.prototype = {
    toString$0(_) {
      var t1 = this.modifiedObject;
      if (t1 == null)
        return "Concurrent modification during iteration.";
      return "Concurrent modification during iteration: " + A.Error_safeToString(t1) + ".";
    }
  };
  A.OutOfMemoryError.prototype = {
    toString$0(_) {
      return "Out of Memory";
    },
    get$stackTrace() {
      return null;
    },
    $isError: 1
  };
  A.StackOverflowError.prototype = {
    toString$0(_) {
      return "Stack Overflow";
    },
    get$stackTrace() {
      return null;
    },
    $isError: 1
  };
  A.CyclicInitializationError.prototype = {
    toString$0(_) {
      var t1 = "Reading static variable '" + this.variableName + "' during its initialization";
      return t1;
    }
  };
  A._Exception.prototype = {
    toString$0(_) {
      return "Exception: " + this.message;
    }
  };
  A.Iterable.prototype = {
    forEach$1(_, action) {
      var t1;
      A._instanceType(this)._eval$1("~(Iterable.E)")._as(action);
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        action.call$1(t1.get$current(t1));
    },
    get$length(_) {
      var count,
        it = this.get$iterator(this);
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    toString$0(_) {
      return A.IterableBase_iterableToShortString(this, "(", ")");
    }
  };
  A.Iterator.prototype = {};
  A.Null.prototype = {
    get$hashCode(_) {
      return A.Object.prototype.get$hashCode.call(this, this);
    },
    toString$0(_) {
      return "null";
    }
  };
  A.Object.prototype = {$isObject: 1,
    $eq(_, other) {
      return this === other;
    },
    get$hashCode(_) {
      return A.Primitives_objectHashCode(this);
    },
    toString$0(_) {
      return "Instance of '" + A.Primitives_objectTypeName(this) + "'";
    },
    toString() {
      return this.toString$0(this);
    }
  };
  A._StringStackTrace.prototype = {
    toString$0(_) {
      return "";
    },
    $isStackTrace: 1
  };
  A.StringBuffer.prototype = {
    get$length(_) {
      return this._contents.length;
    },
    toString$0(_) {
      var t1 = this._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  A.HtmlElement.prototype = {};
  A.AccessibleNodeList.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.AnchorElement.prototype = {
    toString$0(receiver) {
      return String(receiver);
    }
  };
  A.AreaElement.prototype = {
    toString$0(receiver) {
      return String(receiver);
    }
  };
  A.Blob.prototype = {};
  A.BodyElement.prototype = {
    get$onLoad(receiver) {
      return new A._ElementEventStreamImpl(receiver, "load", false, type$._ElementEventStreamImpl_Event);
    }
  };
  A.CanvasElement.prototype = {
    getContext$1(receiver, contextId) {
      return receiver.getContext(contextId);
    },
    $isCanvasElement: 1
  };
  A.CharacterData.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.CssPerspective.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.CssRule.prototype = {$isCssRule: 1};
  A.CssStyleDeclaration.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.CssStyleDeclarationBase.prototype = {};
  A.CssStyleValue.prototype = {};
  A.CssTransformComponent.prototype = {};
  A.CssTransformValue.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.CssUnparsedValue.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.DataTransferItemList.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.DomException.prototype = {
    toString$0(receiver) {
      return String(receiver);
    }
  };
  A.DomRectList.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw A.wrapException(A.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      type$.Rectangle_num._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.DomRectReadOnly.prototype = {
    toString$0(receiver) {
      var t2,
        t1 = receiver.left;
      t1.toString;
      t1 = "Rectangle (" + A.S(t1) + ", ";
      t2 = receiver.top;
      t2.toString;
      return t1 + A.S(t2) + ") " + A.S(this.get$width(receiver)) + " x " + A.S(this.get$height(receiver));
    },
    $eq(receiver, other) {
      var t1, t2;
      if (other == null)
        return false;
      if (type$.Rectangle_num._is(other)) {
        t1 = receiver.left;
        t1.toString;
        t2 = other.left;
        t2.toString;
        if (t1 === t2) {
          t1 = receiver.top;
          t1.toString;
          t2 = other.top;
          t2.toString;
          if (t1 === t2) {
            t1 = J.getInterceptor$x(other);
            t1 = this.get$width(receiver) === t1.get$width(other) && this.get$height(receiver) === t1.get$height(other);
          } else
            t1 = false;
        } else
          t1 = false;
      } else
        t1 = false;
      return t1;
    },
    get$hashCode(receiver) {
      var t2,
        t1 = receiver.left;
      t1.toString;
      t2 = receiver.top;
      t2.toString;
      return A.Object_hash(t1, t2, this.get$width(receiver), this.get$height(receiver));
    },
    get$_height(receiver) {
      return receiver.height;
    },
    get$height(receiver) {
      var t1 = this.get$_height(receiver);
      t1.toString;
      return t1;
    },
    get$_width(receiver) {
      return receiver.width;
    },
    get$width(receiver) {
      var t1 = this.get$_width(receiver);
      t1.toString;
      return t1;
    },
    $isRectangle: 1
  };
  A.DomStringList.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw A.wrapException(A.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      A._asString(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.DomTokenList.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.Element.prototype = {
    toString$0(receiver) {
      return receiver.localName;
    },
    get$onLoad(receiver) {
      return new A._ElementEventStreamImpl(receiver, "load", false, type$._ElementEventStreamImpl_Event);
    },
    $isElement: 1
  };
  A.Event.prototype = {$isEvent: 1};
  A.EventTarget.prototype = {
    addEventListener$3(receiver, type, listener, useCapture) {
      type$.nullable_dynamic_Function_Event._as(listener);
      if (listener != null)
        this._addEventListener$3(receiver, type, listener, false);
    },
    _addEventListener$3(receiver, type, listener, options) {
      return receiver.addEventListener(type, A.convertDartClosureToJS(type$.nullable_dynamic_Function_Event._as(listener), 1), false);
    },
    $isEventTarget: 1
  };
  A.File.prototype = {$isFile: 1};
  A.FileList.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw A.wrapException(A.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      type$.File._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.FileWriter.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.FormElement.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.Gamepad.prototype = {$isGamepad: 1};
  A.History.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.HtmlCollection.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw A.wrapException(A.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      type$.Node._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.ImageElement.prototype = {$isImageElement: 1};
  A.KeyboardEvent.prototype = {$isKeyboardEvent: 1};
  A.Location.prototype = {
    toString$0(receiver) {
      return String(receiver);
    }
  };
  A.MediaElement.prototype = {};
  A.MediaList.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.MidiInputMap.prototype = {
    $index(receiver, key) {
      return A.convertNativeToDart_Dictionary(receiver.get(A._asString(key)));
    },
    forEach$1(receiver, f) {
      var entries, entry;
      type$.void_Function_String_dynamic._as(f);
      entries = receiver.entries();
      for (; true;) {
        entry = entries.next();
        if (entry.done)
          return;
        f.call$2(entry.value[0], A.convertNativeToDart_Dictionary(entry.value[1]));
      }
    },
    get$keys(receiver) {
      var keys = A._setArrayType([], type$.JSArray_String);
      this.forEach$1(receiver, new A.MidiInputMap_keys_closure(keys));
      return keys;
    },
    get$length(receiver) {
      return receiver.size;
    },
    $isMap: 1
  };
  A.MidiInputMap_keys_closure.prototype = {
    call$2(k, v) {
      return B.JSArray_methods.add$1(this.keys, k);
    },
    $signature: 2
  };
  A.MidiOutputMap.prototype = {
    $index(receiver, key) {
      return A.convertNativeToDart_Dictionary(receiver.get(A._asString(key)));
    },
    forEach$1(receiver, f) {
      var entries, entry;
      type$.void_Function_String_dynamic._as(f);
      entries = receiver.entries();
      for (; true;) {
        entry = entries.next();
        if (entry.done)
          return;
        f.call$2(entry.value[0], A.convertNativeToDart_Dictionary(entry.value[1]));
      }
    },
    get$keys(receiver) {
      var keys = A._setArrayType([], type$.JSArray_String);
      this.forEach$1(receiver, new A.MidiOutputMap_keys_closure(keys));
      return keys;
    },
    get$length(receiver) {
      return receiver.size;
    },
    $isMap: 1
  };
  A.MidiOutputMap_keys_closure.prototype = {
    call$2(k, v) {
      return B.JSArray_methods.add$1(this.keys, k);
    },
    $signature: 2
  };
  A.MimeType.prototype = {$isMimeType: 1};
  A.MimeTypeArray.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw A.wrapException(A.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      type$.MimeType._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.Node.prototype = {
    toString$0(receiver) {
      var value = receiver.nodeValue;
      return value == null ? this.super$Interceptor$toString(receiver) : value;
    },
    $isNode: 1
  };
  A.NodeList.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw A.wrapException(A.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      type$.Node._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.Plugin.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $isPlugin: 1
  };
  A.PluginArray.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw A.wrapException(A.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      type$.Plugin._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.RtcStatsReport.prototype = {
    $index(receiver, key) {
      return A.convertNativeToDart_Dictionary(receiver.get(A._asString(key)));
    },
    forEach$1(receiver, f) {
      var entries, entry;
      type$.void_Function_String_dynamic._as(f);
      entries = receiver.entries();
      for (; true;) {
        entry = entries.next();
        if (entry.done)
          return;
        f.call$2(entry.value[0], A.convertNativeToDart_Dictionary(entry.value[1]));
      }
    },
    get$keys(receiver) {
      var keys = A._setArrayType([], type$.JSArray_String);
      this.forEach$1(receiver, new A.RtcStatsReport_keys_closure(keys));
      return keys;
    },
    get$length(receiver) {
      return receiver.size;
    },
    $isMap: 1
  };
  A.RtcStatsReport_keys_closure.prototype = {
    call$2(k, v) {
      return B.JSArray_methods.add$1(this.keys, k);
    },
    $signature: 2
  };
  A.SelectElement.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.SourceBuffer.prototype = {$isSourceBuffer: 1};
  A.SourceBufferList.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw A.wrapException(A.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      type$.SourceBuffer._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.SpeechGrammar.prototype = {$isSpeechGrammar: 1};
  A.SpeechGrammarList.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw A.wrapException(A.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      type$.SpeechGrammar._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.SpeechRecognitionResult.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $isSpeechRecognitionResult: 1
  };
  A.Storage.prototype = {
    $index(receiver, key) {
      return receiver.getItem(A._asString(key));
    },
    forEach$1(receiver, f) {
      var i, key, t1;
      type$.void_Function_String_String._as(f);
      for (i = 0; true; ++i) {
        key = receiver.key(i);
        if (key == null)
          return;
        t1 = receiver.getItem(key);
        t1.toString;
        f.call$2(key, t1);
      }
    },
    get$keys(receiver) {
      var keys = A._setArrayType([], type$.JSArray_String);
      this.forEach$1(receiver, new A.Storage_keys_closure(keys));
      return keys;
    },
    get$length(receiver) {
      return receiver.length;
    },
    $isMap: 1
  };
  A.Storage_keys_closure.prototype = {
    call$2(k, v) {
      return B.JSArray_methods.add$1(this.keys, k);
    },
    $signature: 14
  };
  A.StyleSheet.prototype = {$isStyleSheet: 1};
  A.TextTrack.prototype = {$isTextTrack: 1};
  A.TextTrackCue.prototype = {$isTextTrackCue: 1};
  A.TextTrackCueList.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw A.wrapException(A.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      type$.TextTrackCue._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.TextTrackList.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw A.wrapException(A.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      type$.TextTrack._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.TimeRanges.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.Touch.prototype = {$isTouch: 1};
  A.TouchList.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw A.wrapException(A.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      type$.Touch._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.TrackDefaultList.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.UIEvent.prototype = {};
  A.Url.prototype = {
    toString$0(receiver) {
      return String(receiver);
    }
  };
  A.VideoElement.prototype = {$isVideoElement: 1};
  A.VideoTrackList.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.Window.prototype = {
    requestAnimationFrame$1(receiver, callback) {
      var t1;
      type$.void_Function_num._as(callback);
      this._ensureRequestAnimationFrame$0(receiver);
      t1 = A._wrapZone(callback, type$.num);
      t1.toString;
      return this._requestAnimationFrame$1(receiver, t1);
    },
    _requestAnimationFrame$1(receiver, callback) {
      return receiver.requestAnimationFrame(A.convertDartClosureToJS(type$.void_Function_num._as(callback), 1));
    },
    _ensureRequestAnimationFrame$0(receiver) {
      if (!!(receiver.requestAnimationFrame && receiver.cancelAnimationFrame))
        return;
      (function($this) {
        var vendors = ["ms", "moz", "webkit", "o"];
        for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
          $this.requestAnimationFrame = $this[vendors[i] + "RequestAnimationFrame"];
          $this.cancelAnimationFrame = $this[vendors[i] + "CancelAnimationFrame"] || $this[vendors[i] + "CancelRequestAnimationFrame"];
        }
        if ($this.requestAnimationFrame && $this.cancelAnimationFrame)
          return;
        $this.requestAnimationFrame = function(callback) {
          return window.setTimeout(function() {
            callback(Date.now());
          }, 16);
        };
        $this.cancelAnimationFrame = function(id) {
          clearTimeout(id);
        };
      })(receiver);
    }
  };
  A._CssRuleList.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw A.wrapException(A.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      type$.CssRule._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A._DomRect.prototype = {
    toString$0(receiver) {
      var t2,
        t1 = receiver.left;
      t1.toString;
      t1 = "Rectangle (" + A.S(t1) + ", ";
      t2 = receiver.top;
      t2.toString;
      t2 = t1 + A.S(t2) + ") ";
      t1 = receiver.width;
      t1.toString;
      t1 = t2 + A.S(t1) + " x ";
      t2 = receiver.height;
      t2.toString;
      return t1 + A.S(t2);
    },
    $eq(receiver, other) {
      var t1, t2;
      if (other == null)
        return false;
      if (type$.Rectangle_num._is(other)) {
        t1 = receiver.left;
        t1.toString;
        t2 = other.left;
        t2.toString;
        if (t1 === t2) {
          t1 = receiver.top;
          t1.toString;
          t2 = other.top;
          t2.toString;
          if (t1 === t2) {
            t1 = receiver.width;
            t1.toString;
            t2 = J.getInterceptor$x(other);
            if (t1 === t2.get$width(other)) {
              t1 = receiver.height;
              t1.toString;
              t2 = t1 === t2.get$height(other);
              t1 = t2;
            } else
              t1 = false;
          } else
            t1 = false;
        } else
          t1 = false;
      } else
        t1 = false;
      return t1;
    },
    get$hashCode(receiver) {
      var t2, t3, t4,
        t1 = receiver.left;
      t1.toString;
      t2 = receiver.top;
      t2.toString;
      t3 = receiver.width;
      t3.toString;
      t4 = receiver.height;
      t4.toString;
      return A.Object_hash(t1, t2, t3, t4);
    },
    get$_height(receiver) {
      return receiver.height;
    },
    get$height(receiver) {
      var t1 = receiver.height;
      t1.toString;
      return t1;
    },
    get$_width(receiver) {
      return receiver.width;
    },
    get$width(receiver) {
      var t1 = receiver.width;
      t1.toString;
      return t1;
    }
  };
  A._GamepadList.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw A.wrapException(A.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      type$.nullable_Gamepad._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A._NamedNodeMap.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw A.wrapException(A.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      type$.Node._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A._SpeechRecognitionResultList.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw A.wrapException(A.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      type$.SpeechRecognitionResult._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A._StyleSheetList.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw A.wrapException(A.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      type$.StyleSheet._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.EventStreamProvider.prototype = {};
  A._EventStream.prototype = {};
  A._ElementEventStreamImpl.prototype = {};
  A._EventStreamSubscription.prototype = {};
  A._EventStreamSubscription_closure.prototype = {
    call$1(e) {
      return this.onData.call$1(type$.Event._as(e));
    },
    $signature: 5
  };
  A.ImmutableListMixin.prototype = {
    get$iterator(receiver) {
      return new A.FixedSizeListIterator(receiver, this.get$length(receiver), A.instanceType(receiver)._eval$1("FixedSizeListIterator<ImmutableListMixin.E>"));
    }
  };
  A.FixedSizeListIterator.prototype = {
    moveNext$0() {
      var _this = this,
        nextPosition = _this._position + 1,
        t1 = _this._html$_length;
      if (nextPosition < t1) {
        _this.set$_html$_current(J.$index$asx(_this._array, nextPosition));
        _this._position = nextPosition;
        return true;
      }
      _this.set$_html$_current(null);
      _this._position = t1;
      return false;
    },
    get$current(_) {
      return this.$ti._precomputed1._as(this._html$_current);
    },
    set$_html$_current(_current) {
      this._html$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  A._CssStyleDeclaration_Interceptor_CssStyleDeclarationBase.prototype = {};
  A._DomRectList_Interceptor_ListMixin.prototype = {};
  A._DomRectList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  A._DomStringList_Interceptor_ListMixin.prototype = {};
  A._DomStringList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  A._FileList_Interceptor_ListMixin.prototype = {};
  A._FileList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  A._HtmlCollection_Interceptor_ListMixin.prototype = {};
  A._HtmlCollection_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  A._MidiInputMap_Interceptor_MapMixin.prototype = {};
  A._MidiOutputMap_Interceptor_MapMixin.prototype = {};
  A._MimeTypeArray_Interceptor_ListMixin.prototype = {};
  A._MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  A._NodeList_Interceptor_ListMixin.prototype = {};
  A._NodeList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  A._PluginArray_Interceptor_ListMixin.prototype = {};
  A._PluginArray_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  A._RtcStatsReport_Interceptor_MapMixin.prototype = {};
  A._SourceBufferList_EventTarget_ListMixin.prototype = {};
  A._SourceBufferList_EventTarget_ListMixin_ImmutableListMixin.prototype = {};
  A._SpeechGrammarList_Interceptor_ListMixin.prototype = {};
  A._SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  A._Storage_Interceptor_MapMixin.prototype = {};
  A._TextTrackCueList_Interceptor_ListMixin.prototype = {};
  A._TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  A._TextTrackList_EventTarget_ListMixin.prototype = {};
  A._TextTrackList_EventTarget_ListMixin_ImmutableListMixin.prototype = {};
  A._TouchList_Interceptor_ListMixin.prototype = {};
  A._TouchList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  A.__CssRuleList_Interceptor_ListMixin.prototype = {};
  A.__CssRuleList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  A.__GamepadList_Interceptor_ListMixin.prototype = {};
  A.__GamepadList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  A.__NamedNodeMap_Interceptor_ListMixin.prototype = {};
  A.__NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  A.__SpeechRecognitionResultList_Interceptor_ListMixin.prototype = {};
  A.__SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  A.__StyleSheetList_Interceptor_ListMixin.prototype = {};
  A.__StyleSheetList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  A._JSRandom.prototype = {
    nextInt$1(max) {
      if (max <= 0 || max > 4294967296)
        throw A.wrapException(A.RangeError$("max must be in range 0 < max \u2264 2^32, was " + max));
      return Math.random() * max >>> 0;
    },
    nextDouble$0() {
      return Math.random();
    },
    $isRandom: 1
  };
  A.Length.prototype = {$isLength: 1};
  A.LengthList.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw A.wrapException(A.IndexError$(index, receiver, null, null, null));
      return receiver.getItem(index);
    },
    $indexSet(receiver, index, value) {
      type$.Length._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1(receiver, index) {
      return this.$index(receiver, index);
    },
    $isIterable: 1,
    $isList: 1
  };
  A.Number.prototype = {$isNumber: 1};
  A.NumberList.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw A.wrapException(A.IndexError$(index, receiver, null, null, null));
      return receiver.getItem(index);
    },
    $indexSet(receiver, index, value) {
      type$.Number._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1(receiver, index) {
      return this.$index(receiver, index);
    },
    $isIterable: 1,
    $isList: 1
  };
  A.PointList.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.StringList.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw A.wrapException(A.IndexError$(index, receiver, null, null, null));
      return receiver.getItem(index);
    },
    $indexSet(receiver, index, value) {
      A._asString(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1(receiver, index) {
      return this.$index(receiver, index);
    },
    $isIterable: 1,
    $isList: 1
  };
  A.SvgElement.prototype = {
    get$onLoad(receiver) {
      return new A._ElementEventStreamImpl(receiver, "load", false, type$._ElementEventStreamImpl_Event);
    }
  };
  A.Transform.prototype = {$isTransform: 1};
  A.TransformList.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw A.wrapException(A.IndexError$(index, receiver, null, null, null));
      return receiver.getItem(index);
    },
    $indexSet(receiver, index, value) {
      type$.Transform._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1(receiver, index) {
      return this.$index(receiver, index);
    },
    $isIterable: 1,
    $isList: 1
  };
  A._LengthList_Interceptor_ListMixin.prototype = {};
  A._LengthList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  A._NumberList_Interceptor_ListMixin.prototype = {};
  A._NumberList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  A._StringList_Interceptor_ListMixin.prototype = {};
  A._StringList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  A._TransformList_Interceptor_ListMixin.prototype = {};
  A._TransformList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  A.AudioBuffer.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.AudioParamMap.prototype = {
    $index(receiver, key) {
      return A.convertNativeToDart_Dictionary(receiver.get(A._asString(key)));
    },
    forEach$1(receiver, f) {
      var entries, entry;
      type$.void_Function_String_dynamic._as(f);
      entries = receiver.entries();
      for (; true;) {
        entry = entries.next();
        if (entry.done)
          return;
        f.call$2(entry.value[0], A.convertNativeToDart_Dictionary(entry.value[1]));
      }
    },
    get$keys(receiver) {
      var keys = A._setArrayType([], type$.JSArray_String);
      this.forEach$1(receiver, new A.AudioParamMap_keys_closure(keys));
      return keys;
    },
    get$length(receiver) {
      return receiver.size;
    },
    $isMap: 1
  };
  A.AudioParamMap_keys_closure.prototype = {
    call$2(k, v) {
      return B.JSArray_methods.add$1(this.keys, k);
    },
    $signature: 2
  };
  A.AudioTrackList.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.BaseAudioContext.prototype = {};
  A.OfflineAudioContext.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A._AudioParamMap_Interceptor_MapMixin.prototype = {};
  A.Buffer.prototype = {$isBuffer: 1};
  A.Program.prototype = {$isProgram: 1};
  A.RenderingContext2.prototype = {
    bindVertexArray$1(receiver, vertexArray) {
      return receiver.bindVertexArray(vertexArray);
    },
    bindBuffer$2(receiver, target, buffer) {
      return receiver.bindBuffer(target, buffer);
    },
    bindTexture$2(receiver, target, texture) {
      return receiver.bindTexture(target, texture);
    },
    texImage2D$9(receiver, target, level, internalformat, format_OR_width, height_OR_type, bitmap_OR_border_OR_canvas_OR_image_OR_pixels_OR_video, format, type, pixels) {
      var _this = this,
        t1 = type == null;
      if (!t1 && format != null && A._isInt(bitmap_OR_border_OR_canvas_OR_image_OR_pixels_OR_video)) {
        _this._texImage2D_1$9(receiver, target, level, internalformat, format_OR_width, height_OR_type, bitmap_OR_border_OR_canvas_OR_image_OR_pixels_OR_video, format, type, pixels);
        return;
      }
      if (type$.ImageElement._is(bitmap_OR_border_OR_canvas_OR_image_OR_pixels_OR_video) && format == null && t1 && pixels == null) {
        _this._texImage2D_3$6(receiver, target, level, internalformat, format_OR_width, height_OR_type, bitmap_OR_border_OR_canvas_OR_image_OR_pixels_OR_video);
        return;
      }
      if (type$.CanvasElement._is(bitmap_OR_border_OR_canvas_OR_image_OR_pixels_OR_video) && format == null && t1 && pixels == null) {
        _this._texImage2D_4$6(receiver, target, level, internalformat, format_OR_width, height_OR_type, bitmap_OR_border_OR_canvas_OR_image_OR_pixels_OR_video);
        return;
      }
      if (type$.VideoElement._is(bitmap_OR_border_OR_canvas_OR_image_OR_pixels_OR_video) && format == null && t1 && pixels == null) {
        _this._texImage2D_5$6(receiver, target, level, internalformat, format_OR_width, height_OR_type, bitmap_OR_border_OR_canvas_OR_image_OR_pixels_OR_video);
        return;
      }
      throw A.wrapException(A.ArgumentError$("Incorrect number or type of arguments", null));
    },
    texImage2D$6($receiver, target, level, internalformat, format_OR_width, height_OR_type, bitmap_OR_border_OR_canvas_OR_image_OR_pixels_OR_video) {
      return this.texImage2D$9($receiver, target, level, internalformat, format_OR_width, height_OR_type, bitmap_OR_border_OR_canvas_OR_image_OR_pixels_OR_video, null, null, null);
    },
    _texImage2D_1$9(receiver, target, level, internalformat, width, height, border, format, type, pixels) {
      return receiver.texImage2D(target, level, internalformat, width, height, border, format, type, pixels);
    },
    _texImage2D_3$6(receiver, target, level, internalformat, format, type, image) {
      return receiver.texImage2D(target, level, internalformat, format, type, image);
    },
    _texImage2D_4$6(receiver, target, level, internalformat, format, type, canvas) {
      return receiver.texImage2D(target, level, internalformat, format, type, canvas);
    },
    _texImage2D_5$6(receiver, target, level, internalformat, format, type, video) {
      return receiver.texImage2D(target, level, internalformat, format, type, video);
    },
    uniform1f$2(receiver, $location, x) {
      return receiver.uniform1f($location, x);
    },
    uniform1i$2(receiver, $location, x) {
      return receiver.uniform1i($location, x);
    },
    uniform2f$3(receiver, $location, x, y) {
      return receiver.uniform2f($location, x, y);
    },
    uniform4f$5(receiver, $location, x, y, z, w) {
      return receiver.uniform4f($location, x, y, z, w);
    },
    useProgram$1(receiver, program) {
      return receiver.useProgram(program);
    },
    $isRenderingContext2: 1
  };
  A.Texture.prototype = {$isTexture: 1};
  A.UniformLocation.prototype = {$isUniformLocation: 1};
  A.VertexArrayObject.prototype = {$isVertexArrayObject: 1};
  A.SqlResultSetRowList.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      var t1;
      if (index >>> 0 !== index || index >= receiver.length)
        throw A.wrapException(A.IndexError$(index, receiver, null, null, null));
      t1 = A.convertNativeToDart_Dictionary(receiver.item(index));
      t1.toString;
      return t1;
    },
    $indexSet(receiver, index, value) {
      type$.Map_dynamic_dynamic._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1(receiver, index) {
      return this.$index(receiver, index);
    },
    $isIterable: 1,
    $isList: 1
  };
  A._SqlResultSetRowList_Interceptor_ListMixin.prototype = {};
  A._SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  A.Renderer.prototype = {
    Renderer$2(gl, world) {
      var t1, t2;
      A.loadTexture(this.gl, "CursesTransparent_24x36.png").then$1$1(new A.Renderer_closure(this), type$.Null);
      t1 = window;
      t2 = type$.nullable_void_Function_KeyboardEvent._as(new A.Renderer_closure0(this));
      type$.nullable_void_Function._as(null);
      A._EventStreamSubscription$(t1, "keydown", t2, false, type$.KeyboardEvent);
    },
    get$terrainRenderer() {
      var t1, t2, t3, result, program, t4, colorBuffer, _this = this, _34962 = 34962,
        value = _this.__Renderer_terrainRenderer;
      if (value === $) {
        t1 = _this.gl;
        t2 = new Float32Array(96000);
        t3 = new Float32Array(192000);
        result = new A.TerrainRenderer(t1, t2, t3, $.$get$MapTheme_deepCaveTheme());
        result._terrain$_initTerrainMesh$0();
        program = result._program = A.createProgram(t1, string$._versi_, string$._versip);
        result._terrain$_positionAttributeLocation = t1.getAttribLocation(program, "a_position");
        result._terrain$_colorAttributeLocation = t1.getAttribLocation(program, "a_color");
        result._screenSizeLocation = t1.getUniformLocation(program, "u_resolution");
        t4 = t1.createVertexArray();
        t4.toString;
        result._vao = t4;
        B.RenderingContext2_methods.bindVertexArray$1(t1, t4);
        B.RenderingContext2_methods.bindBuffer$2(t1, _34962, t1.createBuffer());
        t1.bufferData(_34962, t2, 35044);
        t1.enableVertexAttribArray(result._terrain$_positionAttributeLocation);
        t1.vertexAttribPointer(result._terrain$_positionAttributeLocation, 2, 5126, false, 0, 0);
        colorBuffer = t1.createBuffer();
        result._terrain$_colorBuffer = colorBuffer;
        B.RenderingContext2_methods.bindBuffer$2(t1, _34962, colorBuffer);
        t1.bufferData(_34962, t3, 35048);
        t1.enableVertexAttribArray(result._terrain$_colorAttributeLocation);
        t1.vertexAttribPointer(result._terrain$_colorAttributeLocation, 4, 5126, false, 0, 0);
        A._lateInitializeOnceCheck(_this.__Renderer_terrainRenderer, "terrainRenderer");
        _this.__Renderer_terrainRenderer = result;
        value = result;
      }
      return value;
    },
    get$dotRenderer() {
      var t1, t2, result, program, t3, t4, positionBuffer, _this = this,
        value = _this.__Renderer_dotRenderer;
      if (value === $) {
        t1 = _this.gl;
        t2 = new Float32Array(8000);
        result = new A.DotRenderer(t1, t2);
        program = result._dots$_program = A.createProgram(t1, "#version 300 es\nin vec2 a_position;\n\nuniform vec2 u_resolution;\n\nvoid main() {\n  vec2 zeroToOne = a_position / u_resolution;\n  vec2 zeroToTwo = zeroToOne * 2.0;\n  vec2 clipSpace = zeroToTwo - 1.0;\n  gl_PointSize = 2.0;\n  gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);\n}\n", "#version 300 es\nprecision highp float;\n\nout vec4 outColor;\n\nvoid main() {\n   outColor = vec4(1, 1, 1, 0.5);\n}\n");
        t3 = result._dots$_positionAttributeLocation = t1.getAttribLocation(program, "a_position");
        result._dots$_screenSizeLocation = t1.getUniformLocation(program, "u_resolution");
        t4 = t1.createVertexArray();
        t4.toString;
        result._dots$_vao = t4;
        B.RenderingContext2_methods.bindVertexArray$1(t1, t4);
        positionBuffer = t1.createBuffer();
        result._dots$_positionBuffer = positionBuffer;
        B.RenderingContext2_methods.bindBuffer$2(t1, 34962, positionBuffer);
        t1.bufferData(34962, t2, 35048);
        t1.enableVertexAttribArray(t3);
        t1.vertexAttribPointer(t3, 2, 5126, false, 0, 0);
        A._lateInitializeOnceCheck(_this.__Renderer_dotRenderer, "dotRenderer");
        _this.__Renderer_dotRenderer = result;
        value = result;
      }
      return value;
    }
  };
  A.Renderer_closure.prototype = {
    call$1(texture) {
      var t1, t2, t3, t4, t5, program, t6, t7, t8, positionBuffer, texCoordBuufer, _34962 = 34962;
      type$.Texture._as(texture);
      t1 = this.$this;
      t1.ready = true;
      t2 = t1.gl;
      t3 = A._setArrayType([], type$.JSArray_Sprite);
      t4 = new Float32Array(1200);
      t5 = new Float32Array(1200);
      t3 = new A.SpriteRenderer(t2, texture, t3, t4, t5);
      program = t3._sprites$_program = A.createProgram(t2, "#version 300 es\n\nin vec2 a_position;\nin vec2 a_texcoord;\n\nuniform vec2 u_resolution;\n\nout vec2 v_texcoord;\n\nvoid main() {\n  vec2 zeroToOne = a_position / u_resolution;\n  vec2 zeroToTwo = zeroToOne * 2.0;\n  vec2 clipSpace = zeroToTwo - 1.0;\n  gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);\n  v_texcoord = a_texcoord;\n}\n", "#version 300 es\nprecision highp float;\n\nin vec2 v_texcoord;\n\nuniform sampler2D u_texture;\n\nout vec4 outColor;\n\nvoid main() {\n   outColor = texture(u_texture, v_texcoord) + vec4(0, 0, 0, 1);\n}\n");
      t6 = t3._sprites$_positionAttributeLocation = t2.getAttribLocation(program, "a_position");
      t7 = t3._texcoordAttributeLocation = t2.getAttribLocation(program, "a_texcoord");
      t3._textureUniformLocation = t2.getUniformLocation(program, "u_texture");
      t3._sprites$_screenSizeLocation = t2.getUniformLocation(program, "u_resolution");
      t8 = t2.createVertexArray();
      t8.toString;
      t3._sprites$_vao = t8;
      B.RenderingContext2_methods.bindVertexArray$1(t2, t8);
      positionBuffer = t2.createBuffer();
      t3._positionBuffer = positionBuffer;
      B.RenderingContext2_methods.bindBuffer$2(t2, _34962, positionBuffer);
      t2.bufferData(_34962, t4, 35048);
      t2.enableVertexAttribArray(t6);
      t2.vertexAttribPointer(t6, 2, 5126, false, 0, 0);
      texCoordBuufer = t2.createBuffer();
      t3._texCoordBuffer = texCoordBuufer;
      B.RenderingContext2_methods.bindBuffer$2(t2, _34962, texCoordBuufer);
      t2.bufferData(_34962, t5, 35048);
      t2.enableVertexAttribArray(t7);
      t2.vertexAttribPointer(t7, 2, 5126, false, 0, 0);
      A._lateWriteOnceCheck(t1.__Renderer_sprites, "sprites");
      t1.__Renderer_sprites = t3;
      t3 = A._lateReadCheck(t3, "sprites");
      t7 = t1.world;
      t2 = t7.playerAgent.sprite;
      t2._renderer = t3;
      B.JSArray_methods.add$1(t3._sprites, t2);
      t3._sprites$_dirty = true;
      t3 = t1.get$terrainRenderer();
      t7 = t7.current;
      t3._terrain$_stage = t7;
      t3._dirty = true;
      t1 = t1.get$dotRenderer();
      t1._stage = t7;
      t1._dots$_dirty = true;
    },
    $signature: 15
  };
  A.Renderer_closure0.prototype = {
    call$1($event) {
      var t1, t2, _this = this;
      type$.KeyboardEvent._as($event);
      t1 = $event.key;
      if (t1 === "ArrowUp") {
        $event.preventDefault();
        t1 = _this.$this.world;
        t2 = t1.playerAgent.sprite;
        t2.set$dy(0, t2._dy - 36);
        t1 = t1.fovSystem;
        t1.playerAgentView = t1.playerAgentView.$add(0, new A.Point(0, -1));
      } else if (t1 === "ArrowDown") {
        $event.preventDefault();
        t1 = _this.$this.world;
        t2 = t1.playerAgent.sprite;
        t2.set$dy(0, t2._dy + 36);
        t1 = t1.fovSystem;
        t1.playerAgentView = t1.playerAgentView.$add(0, new A.Point(0, 1));
      } else if (t1 === "ArrowLeft") {
        $event.preventDefault();
        t1 = _this.$this.world;
        t2 = t1.playerAgent.sprite;
        t2.set$dx(0, t2._dx - 24);
        t1 = t1.fovSystem;
        t1.playerAgentView = t1.playerAgentView.$add(0, new A.Point(-1, 0));
      } else if (t1 === "ArrowRight") {
        $event.preventDefault();
        t1 = _this.$this.world;
        t2 = t1.playerAgent.sprite;
        t2.set$dx(0, t2._dx + 24);
        t1 = t1.fovSystem;
        t1.playerAgentView = t1.playerAgentView.$add(0, new A.Point(1, 0));
      }
    },
    $signature: 16
  };
  A.loadTexture_closure.prototype = {
    call$1($event) {
      var t3, _this = this, _3553 = 3553,
        t1 = _this.gl,
        t2 = _this.texture;
      B.RenderingContext2_methods.bindTexture$2(t1, _3553, t2);
      B.RenderingContext2_methods.texImage2D$6(t1, _3553, 0, 6408, 6408, 5121, _this.image);
      t1.texParameteri(_3553, 10242, 33071);
      t1.texParameteri(_3553, 10243, 33071);
      t1.texParameteri(_3553, 10241, 9729);
      t1 = _this.completer;
      t3 = t1.$ti;
      t3._eval$1("1/?")._as(t2);
      t1 = t1.future;
      if ((t1._state & 30) !== 0)
        A.throwExpression(A.StateError$("Future already completed"));
      t1._asyncComplete$1(t3._eval$1("1/")._as(t2));
    },
    $signature: 5
  };
  A.Color.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.Color && other.value === this.value;
    },
    get$hashCode(_) {
      return B.JSInt_methods.get$hashCode(this.value);
    },
    toString$0(_) {
      return "Color(0x" + B.JSString_methods.padLeft$2(B.JSInt_methods.toRadixString$1(this.value, 16), 8, "0") + ")";
    }
  };
  A.Grid.prototype = {
    $index(_, point) {
      var t1, index, t2, t3;
      type$.Point._as(point);
      t1 = this.width;
      index = B.JSInt_methods.toInt$0(point.dy * t1 + point.dx);
      t2 = this._storage;
      t3 = t2.length;
      if (index < t3) {
        if (!(index >= 0))
          return A.ioore(t2, index);
        return t2[index];
      }
      throw A.wrapException(A.StateError$(point.toString$0(0) + " is out of bounds for a grid of size " + t1 + " * " + this.height));
    },
    $indexSet(_, point, value) {
      var t1, index, t2, _this = this;
      _this.$ti._precomputed1._as(value);
      t1 = _this.width;
      index = B.JSInt_methods.toInt$0(point.dy * t1 + point.dx);
      t2 = _this._storage;
      if (index >= t2.length)
        throw A.wrapException(A.Exception_Exception(point.toString$0(0) + " is out of bounds for a grid of size " + t1 + " * " + _this.height));
      B.JSArray_methods.$indexSet(t2, index, value);
    },
    $get$2(_, x, y) {
      var index = B.JSInt_methods.toInt$0(y * this.width + x),
        t1 = this._storage,
        t2 = t1.length;
      if (index < t2 && index >= 0) {
        if (!(index >= 0 && index < t2))
          return A.ioore(t1, index);
        return t1[index];
      }
      return null;
    },
    $set$3(_, value, x, y) {
      var t1, index, t2, _this = this;
      _this.$ti._precomputed1._as(value);
      t1 = _this.width;
      index = B.JSInt_methods.toInt$0(y * t1 + x);
      t2 = _this._storage;
      if (index >= t2.length)
        throw A.wrapException(A.Exception_Exception("(" + x + ", " + y + ") is out of bounds for a grid of size " + t1 + " * " + _this.height));
      B.JSArray_methods.$indexSet(t2, index, value);
    },
    toString$0(_) {
      var t2, t3, y, t4, t5, sep, x, index, value, _this = this,
        t1 = _this.width;
      if (t1 === 0 || _this.height === 0)
        return "EmptyGrid[]";
      for (t2 = _this.height, t3 = _this._storage, y = 0, t4 = "\n"; y < t2; ++y) {
        t4 += "[";
        for (t5 = y * t1, sep = "", x = 0; x < t1; ++x, sep = " ,") {
          index = B.JSInt_methods.toInt$0(t5 + x);
          if (!(index >= 0 && index < t3.length))
            return A.ioore(t3, index);
          value = t3[index];
          t4 += sep + A.S(value);
        }
        t4 += "]\n";
      }
      return t4.charCodeAt(0) == 0 ? t4 : t4;
    }
  };
  A.ItemType.prototype = {
    toString$0(_) {
      return "ItemType." + this._name;
    }
  };
  A.Item.prototype = {};
  A.Armor.prototype = {};
  A.HandRequirement.prototype = {
    toString$0(_) {
      return "HandRequirement." + this._name;
    }
  };
  A.DamageType.prototype = {
    toString$0(_) {
      return "DamageType." + this._name;
    }
  };
  A.DiceType.prototype = {
    toString$0(_) {
      return "DiceType." + this._name;
    }
  };
  A.WeaponProperties.prototype = {
    toString$0(_) {
      return "WeaponProperties." + this._name;
    }
  };
  A.MeleePower.prototype = {};
  A.Critical.prototype = {};
  A.CriticalEffect.prototype = {
    toString$0(_) {
      return "CriticalEffect." + this._name;
    }
  };
  A.MeleeWeapon.prototype = {};
  A.AmmoType.prototype = {
    toString$0(_) {
      return "AmmoType." + this._name;
    }
  };
  A.AmmoUsage.prototype = {};
  A.RangedWeapon.prototype = {};
  A.ArmorUpgradeType.prototype = {
    toString$0(_) {
      return "ArmorUpgradeType." + this._name;
    }
  };
  A.ArmorUpgrade.prototype = {};
  A.TileType.prototype = {
    toString$0(_) {
      return "TileType." + this._name;
    }
  };
  A.MapConfig.prototype = {};
  A.TerrainType.prototype = {
    toString$0(_) {
      return "TerrainType." + this._name;
    }
  };
  A.TerrainWidget.prototype = {
    toString$0(_) {
      return "TerrainWidget." + this._name;
    }
  };
  A.LockState.prototype = {
    toString$0(_) {
      return "LockState." + this._name;
    }
  };
  A.Biome.prototype = {
    toString$0(_) {
      return "Biome." + this._name;
    }
  };
  A.Tile.prototype = {
    set$terrainType(terrainType) {
      type$.TerrainType._as(terrainType);
    }
  };
  A.Point.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.Point && other.dx === this.dx && other.dy === this.dy;
    },
    get$hashCode(_) {
      return A.Object_hash(this.dx, this.dy, B.C_SentinelValue, B.C_SentinelValue);
    },
    $add(_, other) {
      return new A.Point(this.dx + other.dx, this.dy + other.dy);
    },
    toString$0(_) {
      return "(" + this.dx + ", " + this.dy + ")";
    }
  };
  A.MapDescription.prototype = {};
  A.Agent.prototype = {};
  A.DotRenderer.prototype = {
    _update$0(_) {
      var t2, i, dy, t3, t4, dx, t5, t6, _this = this,
        t1 = _this._stage;
      if (t1 == null)
        return;
      for (t2 = _this._dots$_backingPosition, i = 0, dy = 0; dy < 40; ++dy)
        for (t3 = dy * 100, t4 = dy * 36 + 18, dx = 0; dx < 100; ++dx) {
          t5 = t1.tiles._storage;
          t6 = t3 + dx;
          if (!(t6 < t5.length))
            return A.ioore(t5, t6);
          if (t5[t6]._tile.tileType !== B.TileType_1) {
            if (!(i >= 0 && i < 8000))
              return A.ioore(t2, i);
            t2[i] = dx * 24 + 12;
            t5 = i + 1;
            if (!(t5 < 8000))
              return A.ioore(t2, t5);
            t2[t5] = t4;
            i += 2;
          }
        }
      _this._lastSize = i;
      t1 = _this._dots$_gl;
      B.RenderingContext2_methods.bindBuffer$2(t1, 34962, _this._dots$_positionBuffer);
      t1.bufferSubData(34962, 0, t2, 0);
    }
  };
  A.FOVSystem.prototype = {
    visibilityFrom$1(point) {
      var t1, elementSize, end, t2, t3,
        index = (point.dy * 100 + point.dx) * 4000;
      if (index < 0 || index >= this._buffer.byteLength)
        return null;
      t1 = this._buffer;
      elementSize = t1.BYTES_PER_ELEMENT;
      end = A.RangeError_checkValidRange(index, index + 4000, B.JSInt_methods.$tdiv(t1.byteLength, elementSize));
      t2 = t1.buffer;
      t1 = t1.byteOffset + index * elementSize;
      t3 = (end - index) * elementSize;
      A._checkViewArguments(t2, t1, t3);
      t1 = new Uint8Array(t2, t1, t3);
      return new A.VisibilityGrid(100, t1);
    },
    initializeAll$0() {
      var dx, dy;
      for (dx = 0; dx < 100; ++dx)
        for (dy = 0; dy < 40; ++dy)
          this._invalidateFov$1(new A.Point(dx, dy));
    },
    invalidateTiles$1(tiles) {
      var t1, i, j, t2, t3;
      type$.Grid_TileInstance._as(tiles);
      for (t1 = this._collision, i = 0; i < 100; ++i)
        for (j = 0; j < 40; ++j) {
          t2 = j * 100 + i;
          t3 = tiles.$get$2(0, i, j)._tile.tileType === B.TileType_1 ? 1 : 0;
          if (!(t2 < 4000))
            return A.ioore(t1, t2);
          t1[t2] = t3;
        }
      return;
    },
    _invalidateFov$1(origin) {
      var t2, i, _i,
        t1 = this.visibilityFrom$1(origin),
        localBuffer = t1 == null ? null : t1._buffer;
      if (localBuffer == null)
        return;
      t1 = this._collision;
      t2 = origin.dy * 100 + origin.dx;
      if (!(t2 >= 0 && t2 < 4000))
        return A.ioore(t1, t2);
      if (t1[t2] === 1)
        return;
      for (t1 = localBuffer.length, i = 0; i < localBuffer.byteLength; ++i) {
        if (!(i < t1))
          return A.ioore(localBuffer, i);
        localBuffer[i] = 0;
      }
      if (!(t2 < t1))
        return A.ioore(localBuffer, t2);
      localBuffer[t2] = 1;
      for (_i = 0; _i < 4; ++_i)
        this._scan$3(new A.Row(1, -1, 1), new A.Quadrant(B.List_3Vk[_i], origin), localBuffer);
    },
    _reveal$2(index, buffer) {
      if (index < 0 || index >= buffer.byteLength)
        return;
      if (!(index >= 0 && index < buffer.length))
        return A.ioore(buffer, index);
      buffer[index] = 1;
    },
    _isWall$2(index, buffer) {
      var t1;
      if (index < 0 || index >= buffer.byteLength)
        return false;
      t1 = this._collision;
      if (!(index >= 0 && index < 4000))
        return A.ioore(t1, index);
      return t1[index] === 1;
    },
    _isFloor$2(index, buffer) {
      var t1;
      if (index < 0 || index >= buffer.byteLength)
        return false;
      t1 = this._collision;
      if (!(index >= 0 && index < 4000))
        return A.ioore(t1, index);
      return t1[index] === 0;
    },
    _scan$3(startRow, quad, buffer) {
      var t2, row, minCol, maxCol, t3, t4, t, previousIndex, rawPoint, index, isCurrentWall, t5, nextRow, _this = this,
        t1 = _this._scanStack;
      B.JSArray_methods.set$length(t1, 0);
      B.JSArray_methods.add$1(t1, startRow);
      for (; t2 = t1.length, t2 !== 0;) {
        if (0 >= t2)
          return A.ioore(t1, -1);
        row = t1.pop();
        t2 = row.depth;
        minCol = B.JSNumber_methods.floor$0(t2 * row.startSlope + 0.5);
        maxCol = B.JSNumber_methods.ceil$0(t2 * row.endSlope - 0.5);
        for (t3 = t2 + 1, t4 = 2 * t2, t = minCol, previousIndex = null; t <= maxCol; ++t, previousIndex = index) {
          rawPoint = quad.transform$1(0, new A.Point(t2, t));
          index = rawPoint.dy * 100 + rawPoint.dx;
          isCurrentWall = _this._isWall$2(index, buffer);
          if (!isCurrentWall)
            t5 = t >= t2 * row.startSlope && t <= t2 * row.endSlope;
          else
            t5 = true;
          if (t5)
            _this._reveal$2(index, buffer);
          t5 = previousIndex != null;
          if (t5 && _this._isWall$2(previousIndex, buffer) && _this._isFloor$2(index, buffer))
            row.startSlope = (2 * t - 1) / t4;
          if (t5 && _this._isFloor$2(previousIndex, buffer) && isCurrentWall) {
            nextRow = new A.Row(t3, row.startSlope, row.endSlope);
            nextRow.endSlope = (2 * t - 1) / t4;
            B.JSArray_methods.add$1(t1, nextRow);
          }
        }
        if (previousIndex != null && _this._isFloor$2(previousIndex, buffer))
          B.JSArray_methods.add$1(t1, new A.Row(t3, row.startSlope, row.endSlope));
      }
    }
  };
  A.VisibilityGrid.prototype = {};
  A.Cardinal.prototype = {
    toString$0(_) {
      return "Cardinal." + this._name;
    }
  };
  A.Quadrant.prototype = {
    transform$1(_, point) {
      var t1, _this = this,
        row = point.dx,
        col = point.dy;
      switch (_this.cardinal) {
        case B.Cardinal_0:
          t1 = _this.origin;
          return new A.Point(t1.dx + col, t1.dy - row);
        case B.Cardinal_1:
          t1 = _this.origin;
          return new A.Point(t1.dx + col, t1.dy + row);
        case B.Cardinal_2:
          t1 = _this.origin;
          return new A.Point(t1.dx + row, t1.dy + col);
        case B.Cardinal_3:
          t1 = _this.origin;
          return new A.Point(t1.dx - row, t1.dy + col);
      }
    }
  };
  A.Row.prototype = {};
  A.LightingRenderer.prototype = {
    _createTexture$1(point) {
      var data, visibility, t2, t3, t4, y, t5, t6, x, idx, t7, visible, _3553 = 3553,
        t1 = this._lighting$_gl,
        targetTexture = t1.createTexture();
      B.RenderingContext2_methods.bindTexture$2(t1, _3553, targetTexture);
      data = new Uint8Array(16000);
      visibility = this._fovSystem.visibilityFrom$1(point);
      for (t2 = visibility._buffer, t3 = visibility.kWidth, t4 = t2.length, y = 0; y < 40; ++y)
        for (t5 = y * 100, t6 = y * t3, x = 0; x < 100; ++x) {
          idx = (t5 + x) * 4;
          t7 = t6 + x;
          if (!(t7 < t4))
            return A.ioore(t2, t7);
          visible = t2[t7] === 1 ? 0 : 255;
          if (!(idx < 16000))
            return A.ioore(data, idx);
          data[idx] = 0;
          t7 = idx + 1;
          if (!(t7 < 16000))
            return A.ioore(data, t7);
          data[t7] = 0;
          t7 = idx + 2;
          if (!(t7 < 16000))
            return A.ioore(data, t7);
          data[t7] = 0;
          t7 = idx + 3;
          if (!(t7 < 16000))
            return A.ioore(data, t7);
          data[t7] = visible;
        }
      B.RenderingContext2_methods.texImage2D$9(t1, _3553, 0, 6408, 100, 40, 0, 6408, 5121, data);
      t1.texParameteri(_3553, 10241, 9728);
      t1.texParameteri(_3553, 10242, 33071);
      t1.texParameteri(_3553, 10243, 33071);
      return targetTexture;
    },
    _getTextureForPoint$1(point) {
      var t1 = this._lightingTextures,
        t2 = t1.$index(0, point);
      if (t2 == null) {
        t2 = this._createTexture$1(point);
        t1.$indexSet(0, point, t2);
        t1 = t2;
      } else
        t1 = t2;
      return t1;
    }
  };
  A.Directions.prototype = {
    toString$0(_) {
      return "Directions." + this._name;
    }
  };
  A.SpriteRenderer.prototype = {
    _updateSprites$0() {
      var t3, t4, i, sprite, u, v, ii, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, x, y, _this = this, _34962 = 34962,
        t1 = _this._sprites,
        spriteCount = t1.length,
        t2 = spriteCount * 12,
        position = A.NativeFloat32List_NativeFloat32List$view(_this._sprites$_backingPosition.buffer, 0, t2),
        indexes = A.NativeFloat32List_NativeFloat32List$view(_this._backingIndexes.buffer, 0, t2);
      for (t2 = t1.length, t3 = indexes.length, t4 = position.length, i = 0; i < spriteCount; ++i) {
        if (!(i < t2))
          return A.ioore(t1, i);
        sprite = t1[i];
        u = sprite._sx / 16;
        v = sprite._sy / 16;
        ii = i * 12;
        if (!(ii < t3))
          return A.ioore(indexes, ii);
        indexes[ii] = u;
        t5 = ii + 1;
        if (!(t5 < t3))
          return A.ioore(indexes, t5);
        indexes[t5] = v;
        t6 = ii + 2;
        t7 = u + 0.0625;
        if (!(t6 < t3))
          return A.ioore(indexes, t6);
        indexes[t6] = t7;
        t8 = ii + 3;
        if (!(t8 < t3))
          return A.ioore(indexes, t8);
        indexes[t8] = v;
        t9 = ii + 4;
        if (!(t9 < t3))
          return A.ioore(indexes, t9);
        indexes[t9] = u;
        t10 = ii + 5;
        t11 = v + 0.0625;
        if (!(t10 < t3))
          return A.ioore(indexes, t10);
        indexes[t10] = t11;
        t12 = ii + 6;
        if (!(t12 < t3))
          return A.ioore(indexes, t12);
        indexes[t12] = t7;
        t13 = ii + 7;
        if (!(t13 < t3))
          return A.ioore(indexes, t13);
        indexes[t13] = t11;
        t14 = ii + 8;
        if (!(t14 < t3))
          return A.ioore(indexes, t14);
        indexes[t14] = t7;
        t7 = ii + 9;
        if (!(t7 < t3))
          return A.ioore(indexes, t7);
        indexes[t7] = v;
        t15 = ii + 10;
        if (!(t15 < t3))
          return A.ioore(indexes, t15);
        indexes[t15] = u;
        t16 = ii + 11;
        if (!(t16 < t3))
          return A.ioore(indexes, t16);
        indexes[t16] = t11;
        x = sprite._dx;
        y = sprite._dy;
        if (!(ii < t4))
          return A.ioore(position, ii);
        position[ii] = x;
        if (!(t5 < t4))
          return A.ioore(position, t5);
        position[t5] = y;
        t5 = x + 24;
        if (!(t6 < t4))
          return A.ioore(position, t6);
        position[t6] = t5;
        if (!(t8 < t4))
          return A.ioore(position, t8);
        position[t8] = y;
        if (!(t9 < t4))
          return A.ioore(position, t9);
        position[t9] = x;
        t9 = y + 36;
        if (!(t10 < t4))
          return A.ioore(position, t10);
        position[t10] = t9;
        if (!(t12 < t4))
          return A.ioore(position, t12);
        position[t12] = t5;
        if (!(t13 < t4))
          return A.ioore(position, t13);
        position[t13] = t9;
        if (!(t14 < t4))
          return A.ioore(position, t14);
        position[t14] = t5;
        if (!(t7 < t4))
          return A.ioore(position, t7);
        position[t7] = y;
        if (!(t15 < t4))
          return A.ioore(position, t15);
        position[t15] = x;
        if (!(t16 < t4))
          return A.ioore(position, t16);
        position[t16] = t9;
      }
      t1 = _this._sprites$_gl;
      B.RenderingContext2_methods.bindBuffer$2(t1, _34962, _this._positionBuffer);
      t1.bufferSubData(_34962, 0, position, 0);
      B.RenderingContext2_methods.bindBuffer$2(t1, _34962, _this._texCoordBuffer);
      t1.bufferSubData(_34962, 0, indexes, 0);
    },
    draw$0() {
      var t2, t3, _this = this,
        t1 = _this._sprites;
      if (t1.length === 0)
        return;
      if (_this._sprites$_dirty) {
        _this._updateSprites$0();
        _this._sprites$_dirty = false;
      }
      t2 = _this._sprites$_gl;
      t3 = _this._sprites$_program;
      t3.toString;
      B.RenderingContext2_methods.useProgram$1(t2, t3);
      B.RenderingContext2_methods.bindVertexArray$1(t2, _this._sprites$_vao);
      B.RenderingContext2_methods.uniform1i$2(t2, _this._textureUniformLocation, 0);
      B.RenderingContext2_methods.uniform2f$3(t2, _this._sprites$_screenSizeLocation, 2400, 1440);
      t2.activeTexture(33984);
      B.RenderingContext2_methods.bindTexture$2(t2, 3553, _this._atlas);
      t2.drawArrays(4, 0, t1.length * 6);
    }
  };
  A.Sprite.prototype = {
    set$dx(_, value) {
      var t1 = this._renderer;
      if (t1 != null)
        t1._sprites$_dirty = true;
      this._dx = value;
    },
    set$dy(_, value) {
      var t1 = this._renderer;
      if (t1 != null)
        t1._sprites$_dirty = true;
      this._dy = value;
    }
  };
  A.MapTheme.prototype = {};
  A.TerrainRenderer.prototype = {
    _terrain$_initTerrainMesh$0() {
      var t1, y, t2, dy, t3, t4, x, idx, dx, t5, t6;
      for (t1 = this._terrain$_backingPosition, y = 0; y < 40; ++y)
        for (t2 = y * 100, dy = y * 36, t3 = dy + 25, t4 = dy + 36, x = 0; x < 100; ++x) {
          idx = (t2 + x) * 24;
          dx = x * 24;
          if (!(idx < 96000))
            return A.ioore(t1, idx);
          t1[idx] = dx;
          t5 = idx + 1;
          if (!(t5 < 96000))
            return A.ioore(t1, t5);
          t1[t5] = dy;
          t5 = idx + 2;
          t6 = dx + 24;
          if (!(t5 < 96000))
            return A.ioore(t1, t5);
          t1[t5] = t6;
          t5 = idx + 3;
          if (!(t5 < 96000))
            return A.ioore(t1, t5);
          t1[t5] = dy;
          t5 = idx + 4;
          if (!(t5 < 96000))
            return A.ioore(t1, t5);
          t1[t5] = dx;
          t5 = idx + 5;
          if (!(t5 < 96000))
            return A.ioore(t1, t5);
          t1[t5] = t3;
          t5 = idx + 6;
          if (!(t5 < 96000))
            return A.ioore(t1, t5);
          t1[t5] = t6;
          t5 = idx + 7;
          if (!(t5 < 96000))
            return A.ioore(t1, t5);
          t1[t5] = t3;
          t5 = idx + 8;
          if (!(t5 < 96000))
            return A.ioore(t1, t5);
          t1[t5] = t6;
          t5 = idx + 9;
          if (!(t5 < 96000))
            return A.ioore(t1, t5);
          t1[t5] = dy;
          t5 = idx + 10;
          if (!(t5 < 96000))
            return A.ioore(t1, t5);
          t1[t5] = dx;
          t5 = idx + 11;
          if (!(t5 < 96000))
            return A.ioore(t1, t5);
          t1[t5] = t3;
          t5 = idx + 18;
          if (!(t5 < 96000))
            return A.ioore(t1, t5);
          t1[t5] = dx;
          t5 = idx + 19;
          if (!(t5 < 96000))
            return A.ioore(t1, t5);
          t1[t5] = t3;
          t5 = idx + 20;
          if (!(t5 < 96000))
            return A.ioore(t1, t5);
          t1[t5] = t6;
          t5 = idx + 21;
          if (!(t5 < 96000))
            return A.ioore(t1, t5);
          t1[t5] = t3;
          t5 = idx + 22;
          if (!(t5 < 96000))
            return A.ioore(t1, t5);
          t1[t5] = dx;
          t5 = idx + 23;
          if (!(t5 < 96000))
            return A.ioore(t1, t5);
          t1[t5] = t4;
          t5 = idx + 14;
          if (!(t5 < 96000))
            return A.ioore(t1, t5);
          t1[t5] = t6;
          t5 = idx + 15;
          if (!(t5 < 96000))
            return A.ioore(t1, t5);
          t1[t5] = t4;
          t5 = idx + 12;
          if (!(t5 < 96000))
            return A.ioore(t1, t5);
          t1[t5] = t6;
          t6 = idx + 13;
          if (!(t6 < 96000))
            return A.ioore(t1, t6);
          t1[t6] = t3;
          t6 = idx + 16;
          if (!(t6 < 96000))
            return A.ioore(t1, t6);
          t1[t6] = dx;
          t6 = idx + 17;
          if (!(t6 < 96000))
            return A.ioore(t1, t6);
          t1[t6] = t4;
        }
    },
    _updateTerrain$0() {
      var t2, t3, y, t4, t5, x, idx, i, t6, t7, j, t8, _this = this,
        t1 = _this._terrain$_stage;
      if (t1 == null)
        return;
      for (t2 = _this._terrain$_backingColors, t3 = _this._theme, y = 0; y < 40; ++y)
        for (t4 = y < 39, t5 = y * 100, x = 0; x < 100; ++x) {
          idx = t5 + x;
          i = idx * 48;
          t6 = t1.tiles._storage;
          t7 = t6.length;
          if (!(idx < t7))
            return A.ioore(t6, idx);
          if (t6[idx]._tile.tileType !== B.TileType_1)
            for (j = 0; j < 48; j += 4) {
              t6 = j + i;
              t7 = t3.floorColor.value;
              if (!(t6 < 192000))
                return A.ioore(t2, t6);
              t2[t6] = (t7 >>> 16 & 255) / 255;
              t8 = t6 + 1;
              if (!(t8 < 192000))
                return A.ioore(t2, t8);
              t2[t8] = (t7 >>> 8 & 255) / 255;
              t8 = t6 + 2;
              if (!(t8 < 192000))
                return A.ioore(t2, t8);
              t2[t8] = (t7 & 255) / 255;
              t6 += 3;
              if (!(t6 < 192000))
                return A.ioore(t2, t6);
              t2[t6] = 1;
            }
          else {
            if (t4) {
              t8 = idx + 100;
              if (!(t8 < t7))
                return A.ioore(t6, t8);
              t8 = t6[t8]._tile.tileType !== B.TileType_1;
              t6 = t8;
            } else
              t6 = false;
            if (t6) {
              for (j = 0; j < 24; j += 4) {
                t6 = j + i;
                t7 = t3.wallUpperColor.value;
                if (!(t6 < 192000))
                  return A.ioore(t2, t6);
                t2[t6] = (t7 >>> 16 & 255) / 255;
                t8 = t6 + 1;
                if (!(t8 < 192000))
                  return A.ioore(t2, t8);
                t2[t8] = (t7 >>> 8 & 255) / 255;
                t8 = t6 + 2;
                if (!(t8 < 192000))
                  return A.ioore(t2, t8);
                t2[t8] = (t7 & 255) / 255;
                t6 += 3;
                if (!(t6 < 192000))
                  return A.ioore(t2, t6);
                t2[t6] = 1;
              }
              for (j = 24; j < 48; j += 4) {
                t6 = j + i;
                t7 = t3.wallLowerColor.value;
                if (!(t6 < 192000))
                  return A.ioore(t2, t6);
                t2[t6] = (t7 >>> 16 & 255) / 255;
                t8 = t6 + 1;
                if (!(t8 < 192000))
                  return A.ioore(t2, t8);
                t2[t8] = (t7 >>> 8 & 255) / 255;
                t8 = t6 + 2;
                if (!(t8 < 192000))
                  return A.ioore(t2, t8);
                t2[t8] = (t7 & 255) / 255;
                t6 += 3;
                if (!(t6 < 192000))
                  return A.ioore(t2, t6);
                t2[t6] = 1;
              }
            } else
              for (j = 0; j < 48; j += 4) {
                t6 = j + i;
                t7 = t3.wallUpperColor.value;
                if (!(t6 < 192000))
                  return A.ioore(t2, t6);
                t2[t6] = (t7 >>> 16 & 255) / 255;
                t8 = t6 + 1;
                if (!(t8 < 192000))
                  return A.ioore(t2, t8);
                t2[t8] = (t7 >>> 8 & 255) / 255;
                t8 = t6 + 2;
                if (!(t8 < 192000))
                  return A.ioore(t2, t8);
                t2[t8] = (t7 & 255) / 255;
                t6 += 3;
                if (!(t6 < 192000))
                  return A.ioore(t2, t6);
                t2[t6] = 1;
              }
          }
        }
      t1 = _this._gl;
      B.RenderingContext2_methods.bindBuffer$2(t1, 34962, _this._terrain$_colorBuffer);
      t1.bufferSubData(34962, 0, t2, 0);
    }
  };
  A.FOVRenderer.prototype = {
    _initTerrainMesh$0() {
      var t1, y, t2, dy, t3, x, idx, dx, t4, t5;
      for (t1 = this._backingPosition, y = 0; y < 40; ++y)
        for (t2 = y * 100, dy = y * 36, t3 = dy + 36, x = 0; x < 100; ++x) {
          idx = (t2 + x) * 12;
          dx = x * 24;
          if (!(idx < 96000))
            return A.ioore(t1, idx);
          t1[idx] = dx;
          t4 = idx + 1;
          if (!(t4 < 96000))
            return A.ioore(t1, t4);
          t1[t4] = dy;
          t4 = idx + 2;
          t5 = dx + 24;
          if (!(t4 < 96000))
            return A.ioore(t1, t4);
          t1[t4] = t5;
          t4 = idx + 3;
          if (!(t4 < 96000))
            return A.ioore(t1, t4);
          t1[t4] = dy;
          t4 = idx + 4;
          if (!(t4 < 96000))
            return A.ioore(t1, t4);
          t1[t4] = dx;
          t4 = idx + 5;
          if (!(t4 < 96000))
            return A.ioore(t1, t4);
          t1[t4] = t3;
          t4 = idx + 6;
          if (!(t4 < 96000))
            return A.ioore(t1, t4);
          t1[t4] = t5;
          t4 = idx + 7;
          if (!(t4 < 96000))
            return A.ioore(t1, t4);
          t1[t4] = t3;
          t4 = idx + 8;
          if (!(t4 < 96000))
            return A.ioore(t1, t4);
          t1[t4] = t5;
          t5 = idx + 9;
          if (!(t5 < 96000))
            return A.ioore(t1, t5);
          t1[t5] = dy;
          t5 = idx + 10;
          if (!(t5 < 96000))
            return A.ioore(t1, t5);
          t1[t5] = dx;
          t5 = idx + 11;
          if (!(t5 < 96000))
            return A.ioore(t1, t5);
          t1[t5] = t3;
        }
    },
    _visibility$_updateTerrain$0() {
      var t2, t3, t4, t5, y, t6, t7, x, i, t8, visible, j, t9, _this = this,
        t1 = _this._visibility$_fovSystem,
        visibility = t1.visibilityFrom$1(t1.playerAgentView);
      if (visibility != null)
        for (t2 = _this._backingColors, t3 = visibility._buffer, t4 = visibility.kWidth, t5 = t3.length, y = 0; y < 40; ++y)
          for (t6 = y * 100, t7 = y * t4, x = 0; x < 100; ++x) {
            i = (t6 + x) * 24;
            t8 = t7 + x;
            if (!(t8 < t5))
              return A.ioore(t3, t8);
            visible = t3[t8] === 1;
            for (j = 0; j < 48; j += 4) {
              t8 = j + i;
              if (!(t8 < 192000))
                return A.ioore(t2, t8);
              t2[t8] = 0;
              t9 = t8 + 1;
              if (!(t9 < 192000))
                return A.ioore(t2, t9);
              t2[t9] = 0;
              t9 = t8 + 2;
              if (!(t9 < 192000))
                return A.ioore(t2, t9);
              t2[t9] = 0;
              t8 += 3;
              t9 = visible ? 0 : 0.8;
              if (!(t8 < 192000))
                return A.ioore(t2, t8);
              t2[t8] = t9;
            }
          }
      _this._lastPoint = B.Point_0_0.$add(0, t1.playerAgentView);
      t1 = _this._visibility$_gl;
      B.RenderingContext2_methods.bindBuffer$2(t1, 34962, _this._colorBuffer);
      t1.bufferSubData(34962, 0, _this._backingColors, 0);
    }
  };
  A.World.prototype = {};
  A.blueprintToStage_closure.prototype = {
    call$1(index) {
      var bluePrint, instance,
        t1 = this.blueprint.tiles._storage;
      if (!(index < t1.length))
        return A.ioore(t1, index);
      bluePrint = t1[index];
      instance = new A.TileInstance(A.Tile$());
      instance._tile = bluePrint;
      return instance;
    },
    $signature: 17
  };
  A.Stage.prototype = {};
  A.TileInstance.prototype = {};
  A.CellularAutomata.prototype = {
    simulate$1(steps) {
      var alive, i, dx, dx0, dy, t4, t5, t6, t7, dy0, t8, t9, t10, t11, aliveNBS, temp, _box_0 = {},
        t1 = this.context.collision,
        t2 = t1.width,
        t3 = t1.height,
        swap = new A.Grid(t2, t3, A.List_List$filled(t2 * t3, B.TileType_0, type$.TileType), type$.Grid_TileType);
      _box_0.current = t1;
      alive = new A.CellularAutomata_simulate_alive(_box_0);
      for (i = 0; i < steps; ++i, swap = temp) {
        for (dx = 0; dx < t2; dx = dx0)
          for (t1 = dx - 1, dx0 = dx + 1, dy = 0; dy < t3; dy = dy0) {
            t4 = alive.call$2(t1, dy);
            t5 = alive.call$2(dx0, dy);
            if (typeof t4 !== "number")
              return t4.$add();
            if (typeof t5 !== "number")
              return A.iae(t5);
            t6 = dy - 1;
            t7 = alive.call$2(dx, t6);
            if (typeof t7 !== "number")
              return A.iae(t7);
            dy0 = dy + 1;
            t8 = alive.call$2(dx, dy0);
            if (typeof t8 !== "number")
              return A.iae(t8);
            t9 = alive.call$2(t1, t6);
            if (typeof t9 !== "number")
              return A.iae(t9);
            t10 = alive.call$2(dx0, dy0);
            if (typeof t10 !== "number")
              return A.iae(t10);
            t6 = alive.call$2(dx0, t6);
            if (typeof t6 !== "number")
              return A.iae(t6);
            t11 = alive.call$2(t1, dy0);
            if (typeof t11 !== "number")
              return A.iae(t11);
            aliveNBS = t4 + t5 + t7 + t8 + t9 + t10 + t6 + t11;
            if (J.$eq$(alive.call$2(dx, dy), 1))
              if (aliveNBS < 4)
                swap.$set$3(0, B.TileType_0, dx, dy);
              else
                swap.$set$3(0, B.TileType_1, dx, dy);
            else if (aliveNBS > 5)
              swap.$set$3(0, B.TileType_1, dx, dy);
            else
              swap.$set$3(0, B.TileType_0, dx, dy);
          }
        temp = _box_0.current;
        _box_0.current = swap;
      }
    }
  };
  A.CellularAutomata_simulate_alive.prototype = {
    call$2(x, y) {
      return J.$eq$(this._box_0.current.$get$2(0, x, y), B.TileType_1) ? 0 : 1;
    },
    $signature: 18
  };
  A.GeneratorBase.prototype = {
    tryToConnect$4(room, context, pointToRoom, connections) {
      var t1, candidatePoints, countWalls, t2, t3, t4, results, t5, t6, _i, start, directions, t7, t8, _i0, direction, wallStart, points, current, t9, t10, other, connectedTo, candidates, result, previous, t11, doorCell;
      type$.Map_Point_EncounterRoom._as(pointToRoom);
      t1 = type$.JSArray_Point;
      candidatePoints = A._setArrayType([], t1);
      countWalls = new A.GeneratorBase_tryToConnect_countWalls(context);
      for (t2 = J.get$iterator$ax(room.points); t2.moveNext$0();) {
        t3 = t2.get$current(t2);
        t4 = countWalls.call$1(t3);
        if (typeof t4 !== "number")
          return t4.$ge();
        if (t4 >= 1)
          B.JSArray_methods.add$1(candidatePoints, t3);
      }
      if (candidatePoints.length === 0)
        return;
      results = A._setArrayType([], type$.JSArray_Tunneled);
      for (t2 = candidatePoints.length, t3 = context.collision, t4 = t3.width, t5 = t3.height, t6 = type$.JSArray_Directions, _i = 0; _i < candidatePoints.length; candidatePoints.length === t2 || (0, A.throwConcurrentModificationError)(candidatePoints), ++_i) {
        start = candidatePoints[_i];
        directions = A._setArrayType([], t6);
        t7 = start.dx;
        t8 = start.dy;
        if (t3.$index(0, new A.Point(t7 + 1, t8)) === B.TileType_1)
          B.JSArray_methods.add$1(directions, B.Directions_5);
        if (t3.$index(0, new A.Point(t7 + -1, t8)) === B.TileType_1)
          B.JSArray_methods.add$1(directions, B.Directions_7);
        if (t3.$index(0, new A.Point(t7, t8 + 1)) === B.TileType_1)
          B.JSArray_methods.add$1(directions, B.Directions_6);
        if (t3.$index(0, new A.Point(t7, t8 + -1)) === B.TileType_1)
          B.JSArray_methods.add$1(directions, B.Directions_4);
        for (t7 = directions.length, _i0 = 0; _i0 < directions.length; directions.length === t7 || (0, A.throwConcurrentModificationError)(directions), ++_i0) {
          direction = directions[_i0];
          wallStart = A.moveBy(start, direction);
          points = A._setArrayType([wallStart], t1);
          current = wallStart;
          while (true) {
            t8 = current.dx;
            t9 = t8 >= 0;
            if (t9) {
              t10 = current.dy;
              t10 = t10 >= 0 && t8 < t4 && t10 < t5;
            } else
              t10 = false;
            if (!t10)
              break;
            if (t3.$index(0, current) !== B.TileType_1)
              break;
            other = A.DirectionsHelper_get_adjacent(direction);
            t10 = other.length;
            if (0 >= t10)
              return A.ioore(other, 0);
            if (t3.$index(0, A.moveBy(current, other[0])) !== B.TileType_0) {
              if (1 >= t10)
                return A.ioore(other, 1);
              t10 = t3.$index(0, A.moveBy(current, other[1])) === B.TileType_0;
            } else
              t10 = true;
            if (t10)
              break;
            current = A.moveBy(current, direction);
            B.JSArray_methods.add$1(points, current);
          }
          if (t9) {
            t9 = current.dy;
            t8 = t9 >= 0 && t8 < t4 && t9 < t5;
          } else
            t8 = false;
          if (t8 && t3.$index(0, current) === B.TileType_0 && pointToRoom.$index(0, current) !== room && pointToRoom.$index(0, current) != null) {
            connectedTo = pointToRoom.$index(0, current);
            t8 = A.moveBy(current, A.DirectionsHelper_get_reversed(direction));
            if (0 >= points.length)
              return A.ioore(points, -1);
            points.pop();
            connectedTo.toString;
            B.JSArray_methods.add$1(results, new A.Tunneled(wallStart, t8, points, connectedTo));
          }
        }
      }
      t1 = results.length;
      if (t1 === 0)
        return;
      candidates = A.LinkedHashMap_LinkedHashMap$_empty(type$.EncounterRoom, type$.Tunneled);
      for (t2 = connections.connections, _i = 0; _i < results.length; results.length === t1 || (0, A.throwConcurrentModificationError)(results), ++_i) {
        result = results[_i];
        t4 = result.dest;
        t5 = t2.$index(0, room);
        t5.toString;
        if (B.JSArray_methods.contains$1(t5, t4))
          continue;
        if (candidates.containsKey$1(0, t4)) {
          previous = candidates.$index(0, t4);
          t5 = previous.start;
          t6 = previous.end;
          t7 = result.start;
          t8 = result.end;
          if (Math.sqrt(Math.pow(t6.dx - t5.dx, 2) + Math.pow(t6.dy - t5.dy, 2)) > Math.sqrt(Math.pow(t8.dx - t7.dx, 2) + Math.pow(t8.dy - t7.dy, 2)))
            candidates.$indexSet(0, t4, result);
        } else
          candidates.$indexSet(0, t4, result);
      }
      for (t1 = candidates.get$values(candidates), t4 = t1.__internal$_iterable, t5 = t4._map, t6 = A._instanceType(t1), t6 = t6._eval$1("@<1>")._bind$1(t6._rest[1]), t1 = new A.MappedIterator(A.LinkedHashMapKeyIterator$(t5, t5._modifications, t4.$ti._precomputed1), t1._f, t6._eval$1("MappedIterator<1,2>")), t4 = this.random, t5 = context.widgets, t7 = room.entrances, t6 = t6._rest[1]; t1.moveNext$0();) {
        t8 = t6._as(t1.__internal$_current);
        t9 = t8.dest;
        t10 = t2.$index(0, room);
        t10.toString;
        B.JSArray_methods.add$1(t10, t9);
        t10 = t2.$index(0, t9);
        t10.toString;
        B.JSArray_methods.add$1(t10, room);
        for (t8 = t8.points, t10 = t8.length, _i = 0; t11 = t8.length, _i < t11; t8.length === t10 || (0, A.throwConcurrentModificationError)(t8), ++_i)
          t3.$indexSet(0, t8[_i], B.TileType_0);
        t10 = t4.nextInt$1(t11);
        if (!(t10 >= 0 && t10 < t8.length))
          return A.ioore(t8, t10);
        doorCell = t8[t10];
        t5.$indexSet(0, doorCell, B.TerrainWidget_0);
        B.JSArray_methods.add$1(t7, doorCell);
        B.JSArray_methods.add$1(t9.entrances, doorCell);
      }
      for (t1 = candidates.get$values(candidates), t2 = t1.__internal$_iterable, t3 = t2._map, t4 = A._instanceType(t1), t4 = t4._eval$1("@<1>")._bind$1(t4._rest[1]), t1 = new A.MappedIterator(A.LinkedHashMapKeyIterator$(t3, t3._modifications, t2.$ti._precomputed1), t1._f, t4._eval$1("MappedIterator<1,2>")), t4 = t4._rest[1]; t1.moveNext$0();)
        this.tryToConnect$4(t4._as(t1.__internal$_current).dest, context, pointToRoom, connections);
    }
  };
  A.GeneratorBase_tryToConnect_countWalls.prototype = {
    call$1(point) {
      var t1 = this.context.collision,
        total = t1.$index(0, point.$add(0, new A.Point(1, 0))) === B.TileType_1 ? 1 : 0;
      if (t1.$index(0, point.$add(0, new A.Point(-1, 0))) === B.TileType_1)
        ++total;
      if (t1.$index(0, point.$add(0, new A.Point(0, -1))) === B.TileType_1)
        ++total;
      return t1.$index(0, point.$add(0, new A.Point(1, 1))) === B.TileType_1 ? total + 1 : total;
    },
    $signature: 19
  };
  A.CaveGenerator.prototype = {
    generateCaves$1(context) {
      var t1, t2, t3, t4, t5, i, j, dx, dy, isFloor, isWall, t6, dx0, isEastWall, isWestWall, t7, isSouthWall, t8, isNorthWall, floodFiller, point, _i, room, pointToRoom, largest, size;
      for (t1 = context.collision, t2 = t1.width, t3 = t1.height, t4 = context.materials, t5 = this.random, i = 0; i < t2; ++i)
        for (j = 0; j < t3; ++j) {
          t1.$set$3(0, t5.nextDouble$0() > 0.45 ? B.TileType_0 : B.TileType_1, i, j);
          t4.$set$3(0, B.TerrainType_0, i, j);
        }
      new A.CellularAutomata(context).simulate$1(3);
      for (t4 = t3 - 1, dx = 0; dx < t2; ++dx) {
        t1.$set$3(0, B.TileType_1, dx, 0);
        t1.$set$3(0, B.TileType_1, dx, t4);
      }
      for (t5 = t2 - 1, dy = 0; dy < t3; ++dy) {
        t1.$set$3(0, B.TileType_1, 0, dy);
        t1.$set$3(0, B.TileType_1, t5, dy);
      }
      isFloor = new A.CaveGenerator_generateCaves_isFloor(context);
      isWall = new A.CaveGenerator_generateCaves_isWall(context);
      for (dx = 1; dx < t5; dx = dx0)
        for (t6 = dx - 1, dx0 = dx + 1, dy = 1; dy < t4; ++dy) {
          if (!isFloor.call$2(dx, dy))
            continue;
          isEastWall = isWall.call$2(dx0, dy);
          isWestWall = isWall.call$2(t6, dy);
          t7 = dy + 1;
          isSouthWall = isWall.call$2(dx, t7);
          t8 = dy - 1;
          isNorthWall = isWall.call$2(dx, t8);
          if (isEastWall && isWestWall && isSouthWall && isNorthWall) {
            t1.$set$3(0, B.TileType_1, dx, dy);
            continue;
          }
          if (isFloor.call$2(t6, t7) && isSouthWall && isWestWall) {
            t1.$set$3(0, B.TileType_1, dx, dy);
            continue;
          }
          if (isFloor.call$2(dx0, t7) && isSouthWall && isEastWall) {
            t1.$set$3(0, B.TileType_1, dx, dy);
            continue;
          }
          if (isFloor.call$2(dx0, t8) && isNorthWall && isEastWall) {
            t1.$set$3(0, B.TileType_1, dx, dy);
            continue;
          }
          if (isFloor.call$2(t6, t8) && isNorthWall && isWestWall) {
            t1.$set$3(0, B.TileType_1, dx, dy);
            continue;
          }
        }
      t4 = type$.Point;
      t5 = A.LinkedHashSet_LinkedHashSet$_empty(t4);
      floodFiller = new A.FloodFiller(context, A._setArrayType([], type$.JSArray_List_Point), t5);
      for (dx = 0; dx < t2; ++dx)
        for (dy = 0; dy < t3; ++dy) {
          point = new A.Point(dx, dy);
          if (t5.contains$1(0, point) || t1.$index(0, point) === B.TileType_1)
            continue;
          floodFiller.floodFillFrom$1(point);
        }
      for (t2 = floodFiller.rooms, t3 = t2.length, t5 = context.rooms, t6 = type$.JSArray_Point, _i = 0; _i < t2.length; t2.length === t3 || (0, A.throwConcurrentModificationError)(t2), ++_i) {
        room = t2[_i];
        if (room.length <= 6)
          for (t7 = B.JSArray_methods.get$iterator(room); t7.moveNext$0();)
            t1.$indexSet(0, t7.get$current(t7), B.TileType_1);
        else
          B.JSArray_methods.add$1(t5, new A.EncounterRoom(room, A._setArrayType([], t6), A._setArrayType([], t6), A.EncounterRoom__center(room)));
      }
      pointToRoom = A.LinkedHashMap_LinkedHashMap$_empty(t4, type$.EncounterRoom);
      for (t2 = t5.length, t3 = context.connections, t4 = t3.rooms, t6 = t3.connections, t7 = type$.JSArray_EncounterRoom, _i = 0; t8 = t5.length, _i < t8; t5.length === t2 || (0, A.throwConcurrentModificationError)(t5), ++_i) {
        room = t5[_i];
        B.JSArray_methods.add$1(t4, room);
        t6.$indexSet(0, room, A._setArrayType([], t7));
        for (t8 = J.get$iterator$ax(room.points); t8.moveNext$0();)
          pointToRoom.$indexSet(0, t8.get$current(t8), room);
      }
      if (0 >= t8)
        return A.ioore(t5, 0);
      largest = t5[0];
      for (size = 0, _i = 0; _i < t5.length; t5.length === t8 || (0, A.throwConcurrentModificationError)(t5), ++_i) {
        room = t5[_i];
        t2 = room.points;
        t4 = J.getInterceptor$asx(t2);
        if (t4.get$length(t2) > size) {
          size = t4.get$length(t2);
          largest = room;
        }
      }
      this.tryToConnect$4(largest, context, pointToRoom, t3);
      for (t2 = t3.notConnected$0(), t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, A.throwConcurrentModificationError)(t2), ++_i) {
        room = t2[_i];
        B.JSArray_methods.remove$1(t5, room);
        for (t4 = J.get$iterator$ax(room.points); t4.moveNext$0();)
          t1.$indexSet(0, t4.get$current(t4), B.TileType_1);
      }
      A.solveMap(t5, context);
    }
  };
  A.CaveGenerator_generateCaves_isFloor.prototype = {
    call$2(dx, dy) {
      return J.$eq$(this.context.collision.$get$2(0, dx, dy), B.TileType_0);
    },
    $signature: 6
  };
  A.CaveGenerator_generateCaves_isWall.prototype = {
    call$2(dx, dy) {
      return J.$eq$(this.context.collision.$get$2(0, dx, dy), B.TileType_1);
    },
    $signature: 6
  };
  A.Constraint.prototype = {};
  A.WidgetConstraint.prototype = {};
  A.And.prototype = {};
  A.Or.prototype = {
    score$2(value, context) {
      this.$ti._precomputed1._as(value);
      return Math.min(B.C_CornerConstraint.score$2(value, context), B.C_AgainstSingleWallConstraint.score$2(value, context) + B.AdjacentConstraint_TerrainWidget_7.score$2(value, context));
    }
  };
  A.CenteredConstraint.prototype = {
    score$2(value, context) {
      var n, s, e, w;
      if (context.collision.$index(0, value) === B.TileType_1 || context.widgets.$index(0, value) !== B.TerrainWidget_3)
        return 1 / 0;
      n = A.walkUntilWall(value, B.Directions_4, context);
      s = A.walkUntilWall(value, B.Directions_6, context);
      e = A.walkUntilWall(value, B.Directions_5, context);
      w = A.walkUntilWall(value, B.Directions_7, context);
      return Math.max(Math.max(Math.max(n, s), e), w) - Math.min(Math.min(Math.min(n, s), e), w);
    }
  };
  A.AgainstSingleWallConstraint.prototype = {
    score$2(value, context) {
      if (context.collision.$index(0, value) === B.TileType_1 || context.widgets.$index(0, value) !== B.TerrainWidget_3)
        return 1 / 0;
      if (A.nextToWallNotDoor(value, B.Directions_4, context) + A.nextToWallNotDoor(value, B.Directions_6, context) + A.nextToWallNotDoor(value, B.Directions_5, context) + A.nextToWallNotDoor(value, B.Directions_7, context) === 1)
        return 1;
      return 1 / 0;
    }
  };
  A.CornerConstraint.prototype = {
    score$2(value, context) {
      if (context.collision.$index(0, value) === B.TileType_1 || context.widgets.$index(0, value) !== B.TerrainWidget_3)
        return 1 / 0;
      if (A.nextToWallNotDoor(value, B.Directions_4, context) + A.nextToWallNotDoor(value, B.Directions_6, context) + A.nextToWallNotDoor(value, B.Directions_5, context) + A.nextToWallNotDoor(value, B.Directions_7, context) === 2)
        return 1;
      return 1 / 0;
    }
  };
  A.AdjacentConstraint.prototype = {
    score$2(value, context) {
      var n, s, e, w, t1, t2, score;
      if (context.collision.$index(0, value) === B.TileType_1 || context.widgets.$index(0, value) !== B.TerrainWidget_3)
        return 1 / 0;
      n = A.moveBy(value, B.Directions_4);
      s = A.moveBy(value, B.Directions_6);
      e = A.moveBy(value, B.Directions_5);
      w = A.moveBy(value, B.Directions_7);
      t1 = context.widgets;
      t2 = this.type;
      score = t1.$index(0, n) === t2 ? 1 : 0;
      if (t1.$index(0, s) === t2)
        ++score;
      if (t1.$index(0, e) === t2)
        ++score;
      return 1 / (t1.$index(0, w) === t2 ? score + 1 : score);
    }
  };
  A.WidgetPlacement.prototype = {
    onPlaced$2(arg0, arg1) {
      return this.onPlaced.call$2(arg0, arg1);
    }
  };
  A.placeTable_closure.prototype = {
    call$2(point, context) {
      context.widgets.$indexSet(0, point, B.TerrainWidget_5);
    },
    $signature: 1
  };
  A.placeChair_closure.prototype = {
    call$2(point, context) {
      context.widgets.$indexSet(0, point, B.TerrainWidget_4);
    },
    $signature: 1
  };
  A.placeLight_closure.prototype = {
    call$2(point, context) {
      var t1 = context.widgets;
      if (context.materials.$index(0, point) === B.TerrainType_2)
        t1.$indexSet(0, point, B.TerrainWidget_10);
      else
        t1.$indexSet(0, point, B.TerrainWidget_2);
    },
    $signature: 1
  };
  A.placeCenterLight_closure.prototype = {
    call$2(point, context) {
      var t1 = context.widgets;
      if (context.materials.$index(0, point) === B.TerrainType_2)
        t1.$indexSet(0, point, B.TerrainWidget_10);
      else
        t1.$indexSet(0, point, B.TerrainWidget_2);
    },
    $signature: 1
  };
  A.placeChest_closure.prototype = {
    call$2(point, context) {
      context.widgets.$indexSet(0, point, B.TerrainWidget_6);
    },
    $signature: 1
  };
  A.placeMechanism_closure.prototype = {
    call$2(point, context) {
      context.widgets.$indexSet(0, point, B.TerrainWidget_8);
      context.locks.$indexSet(0, point, B.LockState_3);
    },
    $signature: 1
  };
  A.placeBookshelf_closure.prototype = {
    call$2(point, context) {
      context.widgets.$indexSet(0, point, B.TerrainWidget_7);
    },
    $signature: 1
  };
  A.solveMap_closure.prototype = {
    call$2(a, b) {
      var t1 = type$.EncounterRoom;
      t1._as(a);
      t1._as(b);
      return J.get$length$asx(a.points) - J.get$length$asx(b.points);
    },
    $signature: 20
  };
  A.GeneratorContext.prototype = {};
  A.BoardGenerator.prototype = {
    generate$1(mapConfig) {
      var noiseA, tiles, dx, dy, t6, t7, isFloor, t8, logicalPosition, tile, terrainWidget, flora, item, _4000 = 4000,
        t1 = new A.Grid(100, 40, A.List_List$filled(_4000, B.TileType_0, type$.TileType), type$.Grid_TileType),
        t2 = A.List_List$filled(_4000, 0, type$.double),
        t3 = A.List_List$filled(_4000, B.TerrainType_0, type$.TerrainType),
        t4 = new A.Grid(100, 40, A.List_List$filled(_4000, B.TerrainWidget_3, type$.TerrainWidget), type$.Grid_TerrainWidget),
        t5 = type$.JSArray_EncounterRoom,
        context = new A.GeneratorContext(mapConfig, t1, new A.Grid(100, 40, t2, type$.Grid_double), new A.Grid(100, 40, t3, type$.Grid_TerrainType), t4, new A.Grid(100, 40, A.List_List$filled(_4000, B.LockState_4, type$.LockState), type$.Grid_LockState), new A.Grid(100, 40, A.List_List$filled(_4000, null, type$.nullable_Item), type$.Grid_nullable_Item), new A.EncounterConnections(A._setArrayType([], t5), A.LinkedHashMap_LinkedHashMap$_empty(type$.EncounterRoom, type$.List_EncounterRoom)), A._setArrayType([], t5));
      switch (mapConfig.biome) {
        case B.Biome_1:
          new A.CaveGenerator(B.C__JSRandom).generateCaves$1(context);
          break;
        case B.Biome_2:
          new A.RuinGenerator(A.LinkedHashSet_LinkedHashSet$_empty(type$.Point), B.C__JSRandom).generateRuins$1(context);
          break;
        case B.Biome_4:
        case B.Biome_0:
        case B.Biome_3:
          new A.SurfaceGenerator(B.C__JSRandom).generateField$1(context);
          break;
      }
      noiseA = new Float32Array(4000);
      new A.PerlinNoise().generateNoise$3(noiseA, 100, 40);
      tiles = new A.Grid(100, 40, A.List_List$generate(_4000, new A.BoardGenerator_generate_closure(), type$.Tile), type$.Grid_Tile);
      for (dx = 0; dx < 100; ++dx)
        for (t2 = dx !== 0, t3 = dx !== 99, dy = 0; dy < 40; ++dy)
          if (!t2 || !t3 || dy === 0 || dy === 39) {
            t1.$set$3(0, B.TileType_1, dx, dy);
            t4.$set$3(0, B.TerrainWidget_3, dx, dy);
          }
      this.itemGenerator.generate$3(context.rooms, context, mapConfig.level);
      for (t2 = context.liquid, t3 = this.random, t5 = context.materials, t6 = context.items, t7 = context.locks, dx = 0; dx < 100; ++dx)
        for (dy = 0; dy < 40; ++dy) {
          isFloor = J.$eq$(t1.$get$2(0, dx, dy), B.TileType_0);
          t8 = t1.$get$2(0, dx, dy);
          t8.toString;
          logicalPosition = new A.Point(dx, dy);
          t3.nextDouble$0();
          tile = tiles.$index(0, logicalPosition);
          t5.$index(0, logicalPosition);
          terrainWidget = t4.$index(0, logicalPosition);
          tile.tileType = t8;
          tile.set$terrainType(t5.$index(0, logicalPosition));
          t8 = dy * 100 + dx;
          if (!(t8 < 4000))
            return A.ioore(noiseA, t8);
          flora = noiseA[t8];
          item = t6.$get$2(0, dx, dy);
          if (!J.$eq$(t2.$index(0, logicalPosition), 1))
            if (terrainWidget !== B.TerrainWidget_3)
              switch (terrainWidget) {
                case B.TerrainWidget_0:
                  t7.$index(0, logicalPosition);
                  break;
                case B.TerrainWidget_2:
                  break;
                case B.TerrainWidget_3:
                  break;
                case B.TerrainWidget_4:
                  break;
                case B.TerrainWidget_5:
                  break;
                case B.TerrainWidget_1:
                  break;
                case B.TerrainWidget_6:
                  if (item != null)
                    B.JSArray_methods.add$1(tile.items, item);
                  break;
                case B.TerrainWidget_7:
                  break;
                case B.TerrainWidget_8:
                  break;
                case B.TerrainWidget_9:
                  break;
                case B.TerrainWidget_10:
                  break;
              }
            else if (isFloor)
              flora < 0.42;
          if (item != null)
            B.JSArray_methods.add$1(tile.items, item);
        }
      return new A.MapDescription(tiles, mapConfig);
    }
  };
  A.BoardGenerator_generate_closure.prototype = {
    call$1(_) {
      return A.Tile$();
    },
    $signature: 21
  };
  A.Tunneled.prototype = {
    get$length(_) {
      var t1 = this.start,
        t2 = this.end;
      return Math.sqrt(Math.pow(t2.dx - t1.dx, 2) + Math.pow(t2.dy - t1.dy, 2));
    }
  };
  A.EncounterConnections.prototype = {
    notConnected$0() {
      var t1, t2, t3, _i, room,
        result = A._setArrayType([], type$.JSArray_EncounterRoom);
      for (t1 = this.rooms, t2 = t1.length, t3 = this.connections, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        room = t1[_i];
        if (t3.$index(0, room).length === 0)
          B.JSArray_methods.add$1(result, room);
      }
      return result;
    }
  };
  A.EncounterRoom.prototype = {
    toString$0(_) {
      return "Room{" + J.get$length$asx(this.points) + "; " + this.center.toString$0(0) + "}";
    }
  };
  A.FloodFiller.prototype = {
    floodFillFrom$1(point) {
      var t2, t3, t4, t5, current, _i, next, t6,
        t1 = type$.JSArray_Point,
        queue = A._setArrayType([point], t1),
        room = A._setArrayType([point], t1);
      for (t1 = this.context.collision, t2 = t1.width, t3 = t1.height, t4 = this.visited; t5 = queue.length, t5 !== 0;) {
        if (0 >= t5)
          return A.ioore(queue, -1);
        current = queue.pop();
        if (t4.contains$1(0, current))
          continue;
        t4.add$1(0, current);
        B.JSArray_methods.add$1(room, current);
        for (_i = 0; _i < 8; ++_i) {
          next = A.moveBy(current, B.List_6pZ[_i]);
          t5 = next.dx;
          if (t5 >= 0) {
            t6 = next.dy;
            t5 = t6 >= 0 && t5 < t2 && t6 < t3;
          } else
            t5 = false;
          if (t5 && !t4.contains$1(0, next) && t1.$index(0, next) === B.TileType_0)
            B.JSArray_methods.add$1(queue, next);
        }
      }
      B.JSArray_methods.add$1(this.rooms, room);
    }
  };
  A.ItemTable.prototype = {
    addItem$2(item, weight) {
      var itemType, _this = this;
      type$.Object._as(item);
      if (item instanceof A.Armor)
        itemType = B.ItemType_2;
      else if (item instanceof A.MeleeWeapon)
        itemType = B.ItemType_0;
      else
        itemType = item instanceof A.RangedWeapon ? B.ItemType_1 : B.ItemType_3;
      B.JSArray_methods.add$1(_this.items, item);
      B.JSArray_methods.add$1(_this.types, itemType);
      B.JSArray_methods.add$1(_this.weights, weight);
      _this.total += weight;
    },
    addItem$1(item) {
      return this.addItem$2(item, 10);
    },
    pick$1(random) {
      var t1, t2, candidate, itemType, _box_0 = {},
        i = _box_0.totalProb = 0,
        probs = A.List_List$generate(this.weights.length, new A.ItemTable_pick_closure(_box_0, this), type$.double),
        roll = random.nextDouble$0();
      for (t1 = probs.length, t2 = roll > -1; i < t1; ++i) {
        candidate = probs[i];
        if (t2 && roll <= candidate) {
          t1 = this.items;
          if (!(i < t1.length))
            return A.ioore(t1, i);
          t1 = t1[i];
          if (t1 instanceof A.Armor)
            itemType = B.ItemType_2;
          else if (t1 instanceof A.MeleeWeapon)
            itemType = B.ItemType_0;
          else if (t1 instanceof A.RangedWeapon)
            itemType = B.ItemType_1;
          else {
            J.toString$0$(t1);
            itemType = B.ItemType_3;
          }
          $.ItemHelpers_nextId = $.ItemHelpers_nextId + 1;
          return new A.Item(t1, itemType);
        }
      }
      throw A.wrapException(A.StateError$(""));
    },
    scalePrototype$1($prototype) {
      var t1, t2,
        index = B.JSArray_methods.indexOf$1(this.items, $prototype);
      if (index === -1)
        return;
      t1 = this.weights;
      if (!(index >= 0 && index < t1.length))
        return A.ioore(t1, index);
      t2 = t1[index];
      if (t2 === 0)
        return;
      B.JSArray_methods.$indexSet(t1, index, t2 - 2);
      this.total -= 2;
    },
    scaleCategory$1(itemType) {
      var t1, t2, i, t3;
      for (t1 = this.types, t2 = this.weights, i = 0; i < t1.length; ++i) {
        if (t1[i] !== itemType)
          continue;
        if (!(i < t2.length))
          return A.ioore(t2, i);
        t3 = t2[i];
        if (t3 === 0)
          return;
        B.JSArray_methods.$indexSet(t2, i, t3 - 2);
        this.total -= 2;
      }
    }
  };
  A.ItemTable_pick_closure.prototype = {
    call$1(i) {
      var t3,
        t1 = this.$this,
        t2 = t1.weights;
      if (!(i < t2.length))
        return A.ioore(t2, i);
      t3 = this._box_0;
      return t3.totalProb = t2[i] / t1.total + t3.totalProb;
    },
    $signature: 23
  };
  A.Nothing.prototype = {};
  A.ItemGenerator.prototype = {
    generate$3(rooms, context, level) {
      var table, t1, _i;
      type$.List_EncounterRoom._as(rooms);
      table = new A.ItemTable(A._setArrayType([], type$.JSArray_Object), A._setArrayType([], type$.JSArray_ItemType), A._setArrayType([], type$.JSArray_int));
      t1 = table.get$addItem();
      new A.WhereIterable(B.List_eDa, type$.bool_Function_Armor._as(new A.ItemGenerator_generate_closure()), type$.WhereIterable_Armor).forEach$1(0, t1);
      new A.WhereIterable(B.List_HuN, type$.bool_Function_MeleeWeapon._as(new A.ItemGenerator_generate_closure0()), type$.WhereIterable_MeleeWeapon).forEach$1(0, t1);
      new A.WhereIterable(B.List_Lpb, type$.bool_Function_RangedWeapon._as(new A.ItemGenerator_generate_closure1()), type$.WhereIterable_RangedWeapon).forEach$1(0, t1);
      new A.WhereIterable(B.List_03s, type$.bool_Function_ArmorUpgrade._as(new A.ItemGenerator_generate_closure2()), type$.WhereIterable_ArmorUpgrade).forEach$1(0, t1);
      table.addItem$1(B.C_Nothing);
      for (t1 = rooms.length, _i = 0; _i < rooms.length; rooms.length === t1 || (0, A.throwConcurrentModificationError)(rooms), ++_i)
        this._dropInRoom$3(table, rooms[_i], context);
    },
    _dropInRoom$3(itemTable, room, context) {
      var point, t7, widget, item,
        t1 = context.items,
        t2 = context.widgets,
        t3 = room.points,
        t4 = this.random,
        t5 = J.getInterceptor$asx(t3),
        t6 = room.containers,
        iter = 0;
      while (true) {
        if (!(iter < 10)) {
          point = B.Point_0_0;
          break;
        }
        t7 = t6.length;
        if (t7 !== 0) {
          t7 = t4.nextInt$1(t7);
          if (!(t7 >= 0 && t7 < t6.length))
            return A.ioore(t6, t7);
          point = t6[t7];
        } else
          point = t5.$index(t3, t4.nextInt$1(t5.get$length(t3)));
        widget = t2.$index(0, point);
        if (t1.$index(0, point) == null)
          t7 = widget === B.TerrainWidget_6 || widget === B.TerrainWidget_3;
        else
          t7 = false;
        if (t7)
          break;
        ++iter;
      }
      if (point.$eq(0, B.Point_0_0))
        return;
      item = itemTable.pick$1(t4);
      t2 = item.item;
      if (!J.$eq$(t2, B.C_Nothing)) {
        itemTable.scalePrototype$1(t2);
        itemTable.scaleCategory$1(item.type);
        t1.$indexSet(0, point, item);
      }
    }
  };
  A.ItemGenerator_generate_closure.prototype = {
    call$1(x) {
      return type$.Armor._as(x).level <= 1000;
    },
    $signature: 24
  };
  A.ItemGenerator_generate_closure0.prototype = {
    call$1(x) {
      return type$.MeleeWeapon._as(x).level <= 1000;
    },
    $signature: 25
  };
  A.ItemGenerator_generate_closure1.prototype = {
    call$1(x) {
      return type$.RangedWeapon._as(x).level <= 1000;
    },
    $signature: 26
  };
  A.ItemGenerator_generate_closure2.prototype = {
    call$1(x) {
      return type$.ArmorUpgrade._as(x).level <= 1000;
    },
    $signature: 27
  };
  A.PerlinNoise.prototype = {
    grad$4(_, hash, x, y, z) {
      var v, t1,
        h = hash & 15,
        u = h < 8 ? x : y;
      if (h < 4)
        v = y;
      else
        v = h === 12 || h === 14 ? x : z;
      t1 = (h & 1) === 0 ? u : -u;
      return t1 + ((h & 2) === 0 ? v : -v);
    },
    generateNoise$3(buffer, width, height) {
      var dx, t1, dy, index, t2, $X, $Y, $Z, x, y, z, u, v, t3, $A, aa, t4, ab, $B, ba, bb, t5, t6, t7, t8, t9, t10, _this = this;
      for (dx = 0; dx < width; ++dx)
        for (t1 = dx * 0.1, dy = 0; dy < height; ++dy) {
          index = dy * width + dx;
          t2 = dy * 0.1;
          $X = B.JSNumber_methods.floor$0(t1) & 255;
          $Y = B.JSNumber_methods.floor$0(t2) & 255;
          $Z = B.JSNumber_methods.floor$0(0.3) & 255;
          x = t1 - Math.floor(t1);
          y = t2 - Math.floor(t2);
          z = 0.3 - Math.floor(0.3);
          u = x * x * x * (x * (x * 6 - 15) + 10);
          v = y * y * y * (y * (y * 6 - 15) + 10);
          t2 = $.$get$_p();
          t3 = t2.length;
          if (!($X < t3))
            return A.ioore(t2, $X);
          $A = t2[$X] + $Y;
          if (!($A < t3))
            return A.ioore(t2, $A);
          aa = t2[$A] + $Z;
          t4 = $A + 1;
          if (!(t4 < t3))
            return A.ioore(t2, t4);
          ab = t2[t4] + $Z;
          t4 = $X + 1;
          if (!(t4 < t3))
            return A.ioore(t2, t4);
          $B = t2[t4] + $Y;
          if (!($B < t3))
            return A.ioore(t2, $B);
          ba = t2[$B] + $Z;
          t4 = $B + 1;
          if (!(t4 < t3))
            return A.ioore(t2, t4);
          bb = t2[t4] + $Z;
          if (!(aa < t3))
            return A.ioore(t2, aa);
          t4 = _this.grad$4(0, t2[aa], x, y, z);
          if (!(ba < t3))
            return A.ioore(t2, ba);
          t5 = x - 1;
          t4 += u * (_this.grad$4(0, t2[ba], t5, y, z) - t4);
          if (!(ab < t3))
            return A.ioore(t2, ab);
          t6 = y - 1;
          t7 = _this.grad$4(0, t2[ab], x, t6, z);
          if (!(bb < t3))
            return A.ioore(t2, bb);
          t4 += v * (t7 + u * (_this.grad$4(0, t2[bb], t5, t6, z) - t7) - t4);
          t7 = aa + 1;
          if (!(t7 < t3))
            return A.ioore(t2, t7);
          t8 = z - 1;
          t7 = _this.grad$4(0, t2[t7], x, y, t8);
          t9 = ba + 1;
          if (!(t9 < t3))
            return A.ioore(t2, t9);
          t7 += u * (_this.grad$4(0, t2[t9], t5, y, t8) - t7);
          t9 = ab + 1;
          if (!(t9 < t3))
            return A.ioore(t2, t9);
          t9 = _this.grad$4(0, t2[t9], x, t6, t8);
          t10 = bb + 1;
          if (!(t10 < t3))
            return A.ioore(t2, t10);
          t8 = _this.grad$4(0, t2[t10], t5, t6, t8);
          if (!(index < 4000))
            return A.ioore(buffer, index);
          buffer[index] = (t4 + z * z * z * (z * (z * 6 - 15) + 10) * (t7 + v * (t9 + u * (t8 - t9) - t7) - t4) + 1) / 2;
        }
    }
  };
  A.RuinOrientation.prototype = {
    toString$0(_) {
      return "RuinOrientation." + this._name;
    }
  };
  A.RoomSizeKind.prototype = {
    toString$0(_) {
      return "RoomSizeKind." + this._name;
    }
  };
  A.RuinGenerator.prototype = {
    generateRuins$1(context) {
      var orientation, size, centerPoint, center, t3, missed, center0, t4, t5, dx, dy, point, pointToRoom, t6, t7, _i, room, t8, _this = this,
        t1 = _this.random,
        t2 = t1.nextInt$1(5);
      if (!(t2 >= 0 && t2 < 5))
        return A.ioore(B.List_scx, t2);
      orientation = B.List_scx[t2];
      size = _this.sizeForRoom$1(B.RoomSizeKind_2);
      centerPoint = _this._locationForOrientation$1(orientation);
      center = A.EncounterRoom$(_this.drawRoom$3(context, size, new A.Point(B.JSNumber_methods.round$0(Math.max(1, centerPoint.dx - size.width / 2)), B.JSNumber_methods.round$0(Math.max(1, centerPoint.dy - A.Primitives_objectHashCode(size) / 2)))));
      t2 = context.rooms;
      B.JSArray_methods.add$1(t2, center);
      for (t3 = type$.JSArray_Point, missed = 0; missed < 2000;) {
        center0 = new A.Point(t1.nextInt$1(98) + 1, t1.nextInt$1(38) + 1);
        t4 = [B.RoomSizeKind_0, B.RoomSizeKind_0, B.RoomSizeKind_0, B.RoomSizeKind_1];
        t5 = t1.nextInt$1(4);
        if (!(t5 >= 0 && t5 < 4))
          return A.ioore(t4, t5);
        size = _this.sizeForRoom$1(t4[t5]);
        if (!_this.roomCollides$3(context, size, center0)) {
          t4 = _this.drawRoom$3(context, size, center0);
          B.JSArray_methods.add$1(t2, new A.EncounterRoom(t4, A._setArrayType([], t3), A._setArrayType([], t3), A.EncounterRoom__center(t4)));
        } else
          ++missed;
      }
      for (t1 = _this.occupied, t3 = context.materials, t4 = context.collision, dx = 0; dx < 100; ++dx)
        for (dy = 0; dy < 40; ++dy) {
          point = new A.Point(dx, dy);
          t3.$set$3(0, B.TerrainType_2, dx, dy);
          if (!t1.contains$1(0, point))
            t4.$indexSet(0, point, B.TileType_1);
        }
      pointToRoom = A.LinkedHashMap_LinkedHashMap$_empty(type$.Point, type$.EncounterRoom);
      for (t1 = t2.length, t3 = context.connections, t5 = t3.rooms, t6 = t3.connections, t7 = type$.JSArray_EncounterRoom, _i = 0; _i < t2.length; t2.length === t1 || (0, A.throwConcurrentModificationError)(t2), ++_i) {
        room = t2[_i];
        B.JSArray_methods.add$1(t5, room);
        t6.$indexSet(0, room, A._setArrayType([], t7));
        for (t8 = J.get$iterator$ax(room.points); t8.moveNext$0();)
          pointToRoom.$indexSet(0, t8.get$current(t8), room);
      }
      _this.tryToConnect$4(center, context, pointToRoom, t3);
      for (t1 = t3.notConnected$0(), t3 = t1.length, _i = 0; _i < t1.length; t1.length === t3 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        room = t1[_i];
        B.JSArray_methods.remove$1(t2, room);
        for (t5 = J.get$iterator$ax(room.points); t5.moveNext$0();)
          t4.$indexSet(0, t5.get$current(t5), B.TileType_1);
      }
      A.solveMap(t2, context);
    },
    sizeForRoom$1(roomSize) {
      var t1;
      switch (roomSize) {
        case B.RoomSizeKind_0:
          t1 = this.random;
          return new A.RoomSize(t1.nextInt$1(5) + 5, t1.nextInt$1(5) + 5);
        case B.RoomSizeKind_1:
          t1 = this.random;
          return new A.RoomSize(t1.nextInt$1(10) + 9, t1.nextInt$1(10) + 9);
        case B.RoomSizeKind_2:
          t1 = this.random;
          return new A.RoomSize(t1.nextInt$1(10) + 20, t1.nextInt$1(10) + 20);
      }
    },
    _locationForOrientation$1(orientation) {
      switch (orientation) {
        case B.RuinOrientation_0:
          return new A.Point(50, 10);
        case B.RuinOrientation_1:
          return new A.Point(50, 30);
        case B.RuinOrientation_2:
          return new A.Point(75, 20);
        case B.RuinOrientation_3:
          return new A.Point(25, 20);
        case B.RuinOrientation_4:
          return new A.Point(50, 20);
      }
    },
    drawRoom$3(context, size, topLeft) {
      var t1, t2, t3, t4, t5, t6, t7, t8, dx, t9, t10, t11, dy, isWall, t12, point,
        width = size.width,
        height = size.height,
        points = A._setArrayType([], type$.JSArray_Point);
      for (t1 = this.occupied, t2 = context.collision, t3 = topLeft.dx, t4 = topLeft.dy, t5 = width - 1, t6 = height - 1, t7 = t2.width, t8 = t2.height, dx = 0; dx < width; ++dx)
        for (t9 = dx + t3, t10 = dx !== 0, t11 = dx !== t5, dy = 0; dy < height; ++dy) {
          isWall = !t10 || !t11 || dy === 0 || dy === t6;
          t12 = dy + t4;
          point = new A.Point(t9, t12);
          if (!(t9 >= 0 && t12 >= 0 && t9 < t7 && t12 < t8))
            continue;
          t1.add$1(0, point);
          t2.$indexSet(0, point, isWall ? B.TileType_1 : B.TileType_0);
          if (!isWall)
            B.JSArray_methods.add$1(points, point);
        }
      return points;
    },
    roomCollides$3(context, size, topLeft) {
      var t1, t2, t3, t4, t5, t6, dx, t7, dy, t8, point,
        width = size.width,
        height = size.height;
      for (t1 = context.collision, t2 = topLeft.dx, t3 = topLeft.dy, t4 = t1.width, t5 = t1.height, t6 = this.occupied, dx = 0; dx < width; ++dx)
        for (t7 = dx + t2, dy = 0; dy < height; ++dy) {
          t8 = dy + t3;
          point = new A.Point(t7, t8);
          if (!(t7 >= 0 && t8 >= 0 && t7 < t4 && t8 < t5))
            return true;
          if (t1.$index(0, point) === B.TileType_1 || t6.contains$1(0, point))
            return true;
        }
      return false;
    }
  };
  A.RoomSize.prototype = {};
  A.SurfaceGenerator.prototype = {
    _initTerrainType$1(context) {
      var t1, i,
        terrainType = context.config.biome === B.Biome_0 ? B.TerrainType_0 : B.TerrainType_4;
      for (t1 = context.materials._storage, i = 0; i < t1.length; ++i)
        B.JSArray_methods.$indexSet(t1, i, terrainType);
    },
    generateField$1(context) {
      var t1, t2, i, j, t3, floodFiller, t4, t5, dx, dy, point, rooms, t6, _i, t7, t8, placed, width, height, i0, t9, t10, j0, t11, t12, t13, t14, j1, doors, roomPoints, isValidForDoor, selectedDoor, door, above, below, left, right;
      this._initTerrainType$1(context);
      for (t1 = this.random, t2 = context.collision, i = 0; i < 100; ++i)
        for (j = 0; j < 40; ++j)
          if (t1.nextDouble$0() > 0.6)
            t2.$indexSet(0, new A.Point(i, j), B.TileType_1);
      new A.CellularAutomata(context).simulate$1(10);
      t3 = A.LinkedHashSet_LinkedHashSet$_empty(type$.Point);
      floodFiller = new A.FloodFiller(context, A._setArrayType([], type$.JSArray_List_Point), t3);
      for (t4 = t2.width, t5 = t2.height, dx = 0; dx < t4; ++dx)
        for (dy = 0; dy < t5; ++dy) {
          point = new A.Point(dx, dy);
          if (t3.contains$1(0, point) || t2.$index(0, point) === B.TileType_1)
            continue;
          floodFiller.floodFillFrom$1(point);
        }
      t3 = floodFiller.rooms;
      B.JSArray_methods.sort$1(t3, new A.SurfaceGenerator_generateField_closure());
      for (i = 1; i < t3.length; ++i) {
        rooms = t3[i];
        for (t6 = rooms.length, _i = 0; _i < rooms.length; rooms.length === t6 || (0, A.throwConcurrentModificationError)(rooms), ++_i)
          t2.$indexSet(0, rooms[_i], B.TileType_1);
      }
      for (t3 = t2._storage, t6 = context.widgets, t7 = t6._storage, i = 0; i < t3.length; ++i)
        if (t3[i] === B.TileType_1) {
          B.JSArray_methods.$indexSet(t7, i, B.TerrainWidget_9);
          B.JSArray_methods.$indexSet(t3, i, B.TileType_0);
        }
      $label0$1:
        for (t3 = context.rooms, t7 = type$.JSArray_Point, t8 = context.materials, placed = 0; placed < 3;) {
          width = t1.nextInt$1(3) + 5;
          height = t1.nextInt$1(3) + 5;
          i = t1.nextInt$1(100 - width);
          j = t1.nextInt$1(40 - height);
          for (i0 = i - 1, t9 = i + width, t10 = t9 + 1, j0 = j - 1, t11 = j + height, t12 = t11 + 1; i0 < t10; ++i0)
            for (t13 = i0 >= 0, t14 = i0 < t4, j1 = j0; j1 < t12; ++j1) {
              point = new A.Point(i0, j1);
              if (!(t13 && j1 >= 0 && t14 && j1 < t5))
                continue $label0$1;
              if (t6.$index(0, point) !== B.TerrainWidget_3 || t2.$index(0, point) !== B.TileType_0)
                continue $label0$1;
            }
          doors = A._setArrayType([], t7);
          roomPoints = A._setArrayType([], t7);
          for (t10 = t9 - 1, t12 = t11 - 1, i0 = i; i0 < t9; ++i0)
            for (t13 = i0 - i !== 0, t14 = i0 !== t10, j0 = j; j0 < t11; ++j0) {
              point = new A.Point(i0, j0);
              if (!t13 || !t14 || j0 - j === 0 || j0 === t12) {
                t2.$indexSet(0, point, B.TileType_1);
                B.JSArray_methods.add$1(doors, point);
              } else
                B.JSArray_methods.add$1(roomPoints, point);
              t8.$indexSet(0, point, B.TerrainType_2);
            }
          isValidForDoor = new A.SurfaceGenerator_generateField_isValidForDoor(context);
          B.JSArray_methods.shuffle$0(doors);
          t9 = doors.length;
          _i = 0;
          while (true) {
            if (!(_i < doors.length)) {
              selectedDoor = B.Point_0_0;
              break;
            }
            door = doors[_i];
            above = A.moveBy(door, B.Directions_4);
            below = A.moveBy(door, B.Directions_6);
            left = A.moveBy(door, B.Directions_7);
            right = A.moveBy(door, B.Directions_5);
            if (A.boolConversionCheck(isValidForDoor.call$1(above)) && A.boolConversionCheck(isValidForDoor.call$1(below))) {
              selectedDoor = door;
              break;
            }
            if (A.boolConversionCheck(isValidForDoor.call$1(left)) && A.boolConversionCheck(isValidForDoor.call$1(right))) {
              selectedDoor = door;
              break;
            }
            doors.length === t9 || (0, A.throwConcurrentModificationError)(doors);
            ++_i;
          }
          t9 = 0 === selectedDoor.dx && 0 === selectedDoor.dy;
          if (t9)
            continue $label0$1;
          t2.$indexSet(0, selectedDoor, B.TileType_0);
          t6.$indexSet(0, selectedDoor, B.TerrainWidget_0);
          B.JSArray_methods.add$1(t3, new A.EncounterRoom(roomPoints, A._setArrayType([], t7), A._setArrayType([], t7), A.EncounterRoom__center(roomPoints)));
          ++placed;
        }
      for (t1 = t3.length, _i = 0; _i < t3.length; t3.length === t1 || (0, A.throwConcurrentModificationError)(t3), ++_i)
        A.solveRoom(t3[_i], $.$get$messRoom(), context);
    }
  };
  A.SurfaceGenerator_generateField_closure.prototype = {
    call$2(a, b) {
      var t1 = type$.List_Point;
      t1._as(a);
      return J.get$length$asx(t1._as(b)) - J.get$length$asx(a);
    },
    $signature: 28
  };
  A.SurfaceGenerator_generateField_isValidForDoor.prototype = {
    call$1(point) {
      var t1 = this.context;
      return t1.collision.$index(0, point) === B.TileType_0 && t1.widgets.$index(0, point) === B.TerrainWidget_3;
    },
    $signature: 29
  };
  (function aliases() {
    var _ = J.Interceptor.prototype;
    _.super$Interceptor$toString = _.toString$0;
    _ = J.JavaScriptObject.prototype;
    _.super$JavaScriptObject$toString = _.toString$0;
  })();
  (function installTearOffs() {
    var _static_1 = hunkHelpers._static_1,
      _static_0 = hunkHelpers._static_0,
      _instance = hunkHelpers.installInstanceTearOff;
    _static_1(A, "async__AsyncRun__scheduleImmediateJsOverride$closure", "_AsyncRun__scheduleImmediateJsOverride", 3);
    _static_1(A, "async__AsyncRun__scheduleImmediateWithSetImmediate$closure", "_AsyncRun__scheduleImmediateWithSetImmediate", 3);
    _static_1(A, "async__AsyncRun__scheduleImmediateWithTimer$closure", "_AsyncRun__scheduleImmediateWithTimer", 3);
    _static_0(A, "async___startMicrotaskLoop$closure", "_startMicrotaskLoop", 0);
    _instance(A.ItemTable.prototype, "get$addItem", 0, 1, null, ["call$2", "call$1"], ["addItem$2", "addItem$1"], 22, 0, 0);
    _static_1(A, "main__repainter$closure", "repainter", 30);
  })();
  (function inheritance() {
    var _mixin = hunkHelpers.mixin,
      _inherit = hunkHelpers.inherit,
      _inheritMany = hunkHelpers.inheritMany;
    _inherit(A.Object, null);
    _inheritMany(A.Object, [A.JS_CONST, J.Interceptor, J.ArrayIterator, A.Error, A.SentinelValue, A.Iterable, A.ListIterator, A.Iterator, A.FixedLengthListMixin, A.TypeErrorDecoder, A.NullThrownFromJavaScriptException, A._StackTrace, A.Closure, A.MapMixin, A.LinkedHashMapCell, A.LinkedHashMapKeyIterator, A.Rti, A._FunctionParameters, A._Type, A._TimerImpl, A.AsyncError, A._Completer, A._FutureListener, A._Future, A._AsyncCallbackEntry, A.Stream, A.StreamSubscription, A._Zone, A.__SetBase_Object_SetMixin, A._LinkedHashSetCell, A._LinkedHashSetIterator, A.ListMixin, A.SetMixin, A._Enum, A.OutOfMemoryError, A.StackOverflowError, A._Exception, A.Null, A._StringStackTrace, A.StringBuffer, A.CssStyleDeclarationBase, A.EventStreamProvider, A.ImmutableListMixin, A.FixedSizeListIterator, A._JSRandom, A.Renderer, A.Color, A.Grid, A.Item, A.Armor, A.MeleePower, A.Critical, A.MeleeWeapon, A.AmmoUsage, A.RangedWeapon, A.ArmorUpgrade, A.MapConfig, A.Tile, A.Point, A.MapDescription, A.Agent, A.DotRenderer, A.FOVSystem, A.VisibilityGrid, A.Quadrant, A.Row, A.LightingRenderer, A.SpriteRenderer, A.Sprite, A.MapTheme, A.TerrainRenderer, A.FOVRenderer, A.World, A.Stage, A.TileInstance, A.CellularAutomata, A.GeneratorBase, A.Constraint, A.WidgetPlacement, A.GeneratorContext, A.BoardGenerator, A.Tunneled, A.EncounterConnections, A.EncounterRoom, A.FloodFiller, A.ItemTable, A.Nothing, A.ItemGenerator, A.PerlinNoise, A.RoomSize, A.SurfaceGenerator]);
    _inheritMany(J.Interceptor, [J.JSBool, J.JSNull, J.JavaScriptObject, J.JSArray, J.JSNumber, J.JSString, A.NativeTypedData, A.EventTarget, A.AccessibleNodeList, A.Blob, A.CssTransformComponent, A.CssRule, A._CssStyleDeclaration_Interceptor_CssStyleDeclarationBase, A.CssStyleValue, A.DataTransferItemList, A.DomException, A._DomRectList_Interceptor_ListMixin, A.DomRectReadOnly, A._DomStringList_Interceptor_ListMixin, A.DomTokenList, A.Event, A._FileList_Interceptor_ListMixin, A.Gamepad, A.History, A._HtmlCollection_Interceptor_ListMixin, A.Location, A.MediaList, A._MidiInputMap_Interceptor_MapMixin, A._MidiOutputMap_Interceptor_MapMixin, A.MimeType, A._MimeTypeArray_Interceptor_ListMixin, A._NodeList_Interceptor_ListMixin, A.Plugin, A._PluginArray_Interceptor_ListMixin, A._RtcStatsReport_Interceptor_MapMixin, A.SpeechGrammar, A._SpeechGrammarList_Interceptor_ListMixin, A.SpeechRecognitionResult, A._Storage_Interceptor_MapMixin, A.StyleSheet, A._TextTrackCueList_Interceptor_ListMixin, A.TimeRanges, A.Touch, A._TouchList_Interceptor_ListMixin, A.TrackDefaultList, A.Url, A.__CssRuleList_Interceptor_ListMixin, A.__GamepadList_Interceptor_ListMixin, A.__NamedNodeMap_Interceptor_ListMixin, A.__SpeechRecognitionResultList_Interceptor_ListMixin, A.__StyleSheetList_Interceptor_ListMixin, A.Length, A._LengthList_Interceptor_ListMixin, A.Number, A._NumberList_Interceptor_ListMixin, A.PointList, A._StringList_Interceptor_ListMixin, A.Transform, A._TransformList_Interceptor_ListMixin, A.AudioBuffer, A._AudioParamMap_Interceptor_MapMixin, A.Buffer, A.Program, A.RenderingContext2, A.Texture, A.UniformLocation, A.VertexArrayObject, A._SqlResultSetRowList_Interceptor_ListMixin]);
    _inheritMany(J.JavaScriptObject, [J.PlainJavaScriptObject, J.UnknownJavaScriptObject, J.JavaScriptFunction]);
    _inherit(J.JSUnmodifiableArray, J.JSArray);
    _inheritMany(J.JSNumber, [J.JSInt, J.JSNumNotInt]);
    _inheritMany(A.Error, [A.LateError, A.TypeError, A.JsNoSuchMethodError, A.UnknownJsTypeError, A.RuntimeError, A.AssertionError, A._Error, A.NullThrownError, A.ArgumentError, A.UnsupportedError, A.UnimplementedError, A.StateError, A.ConcurrentModificationError, A.CyclicInitializationError]);
    _inheritMany(A.Iterable, [A.EfficientLengthIterable, A.MappedIterable, A.WhereIterable]);
    _inheritMany(A.EfficientLengthIterable, [A.ListIterable, A.LinkedHashMapKeyIterable]);
    _inherit(A.SubListIterable, A.ListIterable);
    _inherit(A.EfficientLengthMappedIterable, A.MappedIterable);
    _inheritMany(A.Iterator, [A.MappedIterator, A.WhereIterator]);
    _inherit(A.NullError, A.TypeError);
    _inheritMany(A.Closure, [A.Closure0Args, A.Closure2Args, A.TearOffClosure, A.JsLinkedHashMap_values_closure, A.initHooks_closure, A.initHooks_closure1, A._AsyncRun__initializeScheduleImmediate_internalCallback, A._AsyncRun__initializeScheduleImmediate_closure, A._Future__propagateToListeners_handleWhenCompleteCallback_closure, A.Stream_length_closure, A._RootZone_bindUnaryCallbackGuarded_closure, A._EventStreamSubscription_closure, A.Renderer_closure, A.Renderer_closure0, A.loadTexture_closure, A.blueprintToStage_closure, A.GeneratorBase_tryToConnect_countWalls, A.BoardGenerator_generate_closure, A.ItemTable_pick_closure, A.ItemGenerator_generate_closure, A.ItemGenerator_generate_closure0, A.ItemGenerator_generate_closure1, A.ItemGenerator_generate_closure2, A.SurfaceGenerator_generateField_isValidForDoor]);
    _inheritMany(A.TearOffClosure, [A.StaticClosure, A.BoundClosure]);
    _inherit(A._AssertionError, A.AssertionError);
    _inherit(A.MapBase, A.MapMixin);
    _inherit(A.JsLinkedHashMap, A.MapBase);
    _inheritMany(A.Closure2Args, [A.initHooks_closure0, A.MapBase_mapToString_closure, A.MidiInputMap_keys_closure, A.MidiOutputMap_keys_closure, A.RtcStatsReport_keys_closure, A.Storage_keys_closure, A.AudioParamMap_keys_closure, A.CellularAutomata_simulate_alive, A.CaveGenerator_generateCaves_isFloor, A.CaveGenerator_generateCaves_isWall, A.placeTable_closure, A.placeChair_closure, A.placeLight_closure, A.placeCenterLight_closure, A.placeChest_closure, A.placeMechanism_closure, A.placeBookshelf_closure, A.solveMap_closure, A.SurfaceGenerator_generateField_closure]);
    _inherit(A.NativeTypedArray, A.NativeTypedData);
    _inheritMany(A.NativeTypedArray, [A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin]);
    _inherit(A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin);
    _inherit(A.NativeTypedArrayOfDouble, A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inherit(A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin);
    _inherit(A.NativeTypedArrayOfInt, A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inherit(A.NativeFloat32List, A.NativeTypedArrayOfDouble);
    _inheritMany(A.NativeTypedArrayOfInt, [A.NativeInt16List, A.NativeInt32List, A.NativeInt8List, A.NativeUint16List, A.NativeUint32List, A.NativeUint8ClampedList, A.NativeUint8List]);
    _inherit(A._TypeError, A._Error);
    _inheritMany(A.Closure0Args, [A._AsyncRun__scheduleImmediateJsOverride_internalCallback, A._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback, A._TimerImpl_internalCallback, A._Future__addListener_closure, A._Future__prependListeners_closure, A._Future__asyncCompleteWithValue_closure, A._Future__propagateToListeners_handleWhenCompleteCallback, A._Future__propagateToListeners_handleValueCallback, A._Future__propagateToListeners_handleError, A.Stream_length_closure0, A._rootHandleError_closure, A._RootZone_bindCallbackGuarded_closure]);
    _inherit(A._AsyncCompleter, A._Completer);
    _inherit(A._RootZone, A._Zone);
    _inherit(A._SetBase, A.__SetBase_Object_SetMixin);
    _inherit(A._LinkedHashSet, A._SetBase);
    _inheritMany(A.ArgumentError, [A.RangeError, A.IndexError]);
    _inheritMany(A.EventTarget, [A.Node, A.FileWriter, A.SourceBuffer, A._SourceBufferList_EventTarget_ListMixin, A.TextTrack, A.TextTrackCue, A._TextTrackList_EventTarget_ListMixin, A.VideoTrackList, A.Window, A.AudioTrackList, A.BaseAudioContext]);
    _inheritMany(A.Node, [A.Element, A.CharacterData]);
    _inheritMany(A.Element, [A.HtmlElement, A.SvgElement]);
    _inheritMany(A.HtmlElement, [A.AnchorElement, A.AreaElement, A.BodyElement, A.CanvasElement, A.FormElement, A.ImageElement, A.MediaElement, A.SelectElement]);
    _inherit(A.CssPerspective, A.CssTransformComponent);
    _inherit(A.CssStyleDeclaration, A._CssStyleDeclaration_Interceptor_CssStyleDeclarationBase);
    _inheritMany(A.CssStyleValue, [A.CssTransformValue, A.CssUnparsedValue]);
    _inherit(A._DomRectList_Interceptor_ListMixin_ImmutableListMixin, A._DomRectList_Interceptor_ListMixin);
    _inherit(A.DomRectList, A._DomRectList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(A._DomStringList_Interceptor_ListMixin_ImmutableListMixin, A._DomStringList_Interceptor_ListMixin);
    _inherit(A.DomStringList, A._DomStringList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(A.File, A.Blob);
    _inherit(A._FileList_Interceptor_ListMixin_ImmutableListMixin, A._FileList_Interceptor_ListMixin);
    _inherit(A.FileList, A._FileList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(A._HtmlCollection_Interceptor_ListMixin_ImmutableListMixin, A._HtmlCollection_Interceptor_ListMixin);
    _inherit(A.HtmlCollection, A._HtmlCollection_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(A.UIEvent, A.Event);
    _inherit(A.KeyboardEvent, A.UIEvent);
    _inherit(A.MidiInputMap, A._MidiInputMap_Interceptor_MapMixin);
    _inherit(A.MidiOutputMap, A._MidiOutputMap_Interceptor_MapMixin);
    _inherit(A._MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin, A._MimeTypeArray_Interceptor_ListMixin);
    _inherit(A.MimeTypeArray, A._MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(A._NodeList_Interceptor_ListMixin_ImmutableListMixin, A._NodeList_Interceptor_ListMixin);
    _inherit(A.NodeList, A._NodeList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(A._PluginArray_Interceptor_ListMixin_ImmutableListMixin, A._PluginArray_Interceptor_ListMixin);
    _inherit(A.PluginArray, A._PluginArray_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(A.RtcStatsReport, A._RtcStatsReport_Interceptor_MapMixin);
    _inherit(A._SourceBufferList_EventTarget_ListMixin_ImmutableListMixin, A._SourceBufferList_EventTarget_ListMixin);
    _inherit(A.SourceBufferList, A._SourceBufferList_EventTarget_ListMixin_ImmutableListMixin);
    _inherit(A._SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin, A._SpeechGrammarList_Interceptor_ListMixin);
    _inherit(A.SpeechGrammarList, A._SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(A.Storage, A._Storage_Interceptor_MapMixin);
    _inherit(A._TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin, A._TextTrackCueList_Interceptor_ListMixin);
    _inherit(A.TextTrackCueList, A._TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(A._TextTrackList_EventTarget_ListMixin_ImmutableListMixin, A._TextTrackList_EventTarget_ListMixin);
    _inherit(A.TextTrackList, A._TextTrackList_EventTarget_ListMixin_ImmutableListMixin);
    _inherit(A._TouchList_Interceptor_ListMixin_ImmutableListMixin, A._TouchList_Interceptor_ListMixin);
    _inherit(A.TouchList, A._TouchList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(A.VideoElement, A.MediaElement);
    _inherit(A.__CssRuleList_Interceptor_ListMixin_ImmutableListMixin, A.__CssRuleList_Interceptor_ListMixin);
    _inherit(A._CssRuleList, A.__CssRuleList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(A._DomRect, A.DomRectReadOnly);
    _inherit(A.__GamepadList_Interceptor_ListMixin_ImmutableListMixin, A.__GamepadList_Interceptor_ListMixin);
    _inherit(A._GamepadList, A.__GamepadList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(A.__NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin, A.__NamedNodeMap_Interceptor_ListMixin);
    _inherit(A._NamedNodeMap, A.__NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(A.__SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin, A.__SpeechRecognitionResultList_Interceptor_ListMixin);
    _inherit(A._SpeechRecognitionResultList, A.__SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(A.__StyleSheetList_Interceptor_ListMixin_ImmutableListMixin, A.__StyleSheetList_Interceptor_ListMixin);
    _inherit(A._StyleSheetList, A.__StyleSheetList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(A._EventStream, A.Stream);
    _inherit(A._ElementEventStreamImpl, A._EventStream);
    _inherit(A._EventStreamSubscription, A.StreamSubscription);
    _inherit(A._LengthList_Interceptor_ListMixin_ImmutableListMixin, A._LengthList_Interceptor_ListMixin);
    _inherit(A.LengthList, A._LengthList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(A._NumberList_Interceptor_ListMixin_ImmutableListMixin, A._NumberList_Interceptor_ListMixin);
    _inherit(A.NumberList, A._NumberList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(A._StringList_Interceptor_ListMixin_ImmutableListMixin, A._StringList_Interceptor_ListMixin);
    _inherit(A.StringList, A._StringList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(A._TransformList_Interceptor_ListMixin_ImmutableListMixin, A._TransformList_Interceptor_ListMixin);
    _inherit(A.TransformList, A._TransformList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(A.AudioParamMap, A._AudioParamMap_Interceptor_MapMixin);
    _inherit(A.OfflineAudioContext, A.BaseAudioContext);
    _inherit(A._SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin, A._SqlResultSetRowList_Interceptor_ListMixin);
    _inherit(A.SqlResultSetRowList, A._SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin);
    _inheritMany(A._Enum, [A.ItemType, A.HandRequirement, A.DamageType, A.DiceType, A.WeaponProperties, A.CriticalEffect, A.AmmoType, A.ArmorUpgradeType, A.TileType, A.TerrainType, A.TerrainWidget, A.LockState, A.Biome, A.Cardinal, A.Directions, A.RuinOrientation, A.RoomSizeKind]);
    _inheritMany(A.GeneratorBase, [A.CaveGenerator, A.RuinGenerator]);
    _inheritMany(A.Constraint, [A.WidgetConstraint, A.And, A.Or]);
    _inheritMany(A.WidgetConstraint, [A.CenteredConstraint, A.AgainstSingleWallConstraint, A.CornerConstraint, A.AdjacentConstraint]);
    _mixin(A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, A.ListMixin);
    _mixin(A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, A.FixedLengthListMixin);
    _mixin(A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin, A.ListMixin);
    _mixin(A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, A.FixedLengthListMixin);
    _mixin(A.__SetBase_Object_SetMixin, A.SetMixin);
    _mixin(A._CssStyleDeclaration_Interceptor_CssStyleDeclarationBase, A.CssStyleDeclarationBase);
    _mixin(A._DomRectList_Interceptor_ListMixin, A.ListMixin);
    _mixin(A._DomRectList_Interceptor_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._DomStringList_Interceptor_ListMixin, A.ListMixin);
    _mixin(A._DomStringList_Interceptor_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._FileList_Interceptor_ListMixin, A.ListMixin);
    _mixin(A._FileList_Interceptor_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._HtmlCollection_Interceptor_ListMixin, A.ListMixin);
    _mixin(A._HtmlCollection_Interceptor_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._MidiInputMap_Interceptor_MapMixin, A.MapMixin);
    _mixin(A._MidiOutputMap_Interceptor_MapMixin, A.MapMixin);
    _mixin(A._MimeTypeArray_Interceptor_ListMixin, A.ListMixin);
    _mixin(A._MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._NodeList_Interceptor_ListMixin, A.ListMixin);
    _mixin(A._NodeList_Interceptor_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._PluginArray_Interceptor_ListMixin, A.ListMixin);
    _mixin(A._PluginArray_Interceptor_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._RtcStatsReport_Interceptor_MapMixin, A.MapMixin);
    _mixin(A._SourceBufferList_EventTarget_ListMixin, A.ListMixin);
    _mixin(A._SourceBufferList_EventTarget_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._SpeechGrammarList_Interceptor_ListMixin, A.ListMixin);
    _mixin(A._SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._Storage_Interceptor_MapMixin, A.MapMixin);
    _mixin(A._TextTrackCueList_Interceptor_ListMixin, A.ListMixin);
    _mixin(A._TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._TextTrackList_EventTarget_ListMixin, A.ListMixin);
    _mixin(A._TextTrackList_EventTarget_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._TouchList_Interceptor_ListMixin, A.ListMixin);
    _mixin(A._TouchList_Interceptor_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A.__CssRuleList_Interceptor_ListMixin, A.ListMixin);
    _mixin(A.__CssRuleList_Interceptor_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A.__GamepadList_Interceptor_ListMixin, A.ListMixin);
    _mixin(A.__GamepadList_Interceptor_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A.__NamedNodeMap_Interceptor_ListMixin, A.ListMixin);
    _mixin(A.__NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A.__SpeechRecognitionResultList_Interceptor_ListMixin, A.ListMixin);
    _mixin(A.__SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A.__StyleSheetList_Interceptor_ListMixin, A.ListMixin);
    _mixin(A.__StyleSheetList_Interceptor_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._LengthList_Interceptor_ListMixin, A.ListMixin);
    _mixin(A._LengthList_Interceptor_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._NumberList_Interceptor_ListMixin, A.ListMixin);
    _mixin(A._NumberList_Interceptor_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._StringList_Interceptor_ListMixin, A.ListMixin);
    _mixin(A._StringList_Interceptor_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._TransformList_Interceptor_ListMixin, A.ListMixin);
    _mixin(A._TransformList_Interceptor_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._AudioParamMap_Interceptor_MapMixin, A.MapMixin);
    _mixin(A._SqlResultSetRowList_Interceptor_ListMixin, A.ListMixin);
    _mixin(A._SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
  })();
  var init = {
    typeUniverse: {eC: new Map(), tR: {}, eT: {}, tPV: {}, sEA: []},
    mangledGlobalNames: {int: "int", double: "double", num: "num", String: "String", bool: "bool", Null: "Null", List: "List"},
    mangledNames: {},
    types: ["~()", "~(Point,GeneratorContext)", "~(String,@)", "~(~())", "Null()", "~(Event)", "bool(int,int)", "@(@)", "@(@,String)", "@(String)", "Null(@)", "Null(~())", "_Future<@>(@)", "~(Object?,Object?)", "~(String,String)", "Null(Texture)", "~(KeyboardEvent)", "TileInstance(int)", "int(int,int)", "int(Point)", "int(EncounterRoom,EncounterRoom)", "Tile(int)", "~(Object[int])", "double(int)", "bool(Armor)", "bool(MeleeWeapon)", "bool(RangedWeapon)", "bool(ArmorUpgrade)", "int(List<Point>,List<Point>)", "bool(Point)", "~(num)"],
    interceptorsByTag: null,
    leafTags: null,
    arrayRti: Symbol("$ti")
  };
  A._Universe_addRules(init.typeUniverse, JSON.parse('{"PlainJavaScriptObject":"JavaScriptObject","UnknownJavaScriptObject":"JavaScriptObject","JavaScriptFunction":"JavaScriptObject","AbortPaymentEvent":"Event","ExtendableEvent":"Event","AudioContext":"BaseAudioContext","AbsoluteOrientationSensor":"EventTarget","OrientationSensor":"EventTarget","Sensor":"EventTarget","AElement":"SvgElement","GraphicsElement":"SvgElement","BRElement":"HtmlElement","HtmlDocument":"Node","Document":"Node","VttCue":"TextTrackCue","CompositionEvent":"UIEvent","CDataSection":"CharacterData","Text":"CharacterData","HtmlFormControlsCollection":"HtmlCollection","CssCharsetRule":"CssRule","CssStyleSheet":"StyleSheet","AudioElement":"MediaElement","NativeFloat64List":"NativeTypedArrayOfDouble","NativeByteData":"NativeTypedData","JSBool":{"bool":[]},"JSNull":{"Null":[]},"JSArray":{"List":["1"],"Iterable":["1"]},"JSUnmodifiableArray":{"JSArray":["1"],"List":["1"],"Iterable":["1"]},"ArrayIterator":{"Iterator":["1"]},"JSNumber":{"double":[],"num":[]},"JSInt":{"double":[],"int":[],"num":[]},"JSNumNotInt":{"double":[],"num":[]},"JSString":{"String":[]},"LateError":{"Error":[]},"EfficientLengthIterable":{"Iterable":["1"]},"ListIterable":{"Iterable":["1"]},"SubListIterable":{"ListIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"ListIterator":{"Iterator":["1"]},"MappedIterable":{"Iterable":["2"],"Iterable.E":"2"},"EfficientLengthMappedIterable":{"MappedIterable":["1","2"],"Iterable":["2"],"Iterable.E":"2"},"MappedIterator":{"Iterator":["2"]},"WhereIterable":{"Iterable":["1"],"Iterable.E":"1"},"WhereIterator":{"Iterator":["1"]},"NullError":{"TypeError":[],"Error":[]},"JsNoSuchMethodError":{"Error":[]},"UnknownJsTypeError":{"Error":[]},"_StackTrace":{"StackTrace":[]},"Closure":{"Function":[]},"Closure0Args":{"Function":[]},"Closure2Args":{"Function":[]},"TearOffClosure":{"Function":[]},"StaticClosure":{"Function":[]},"BoundClosure":{"Function":[]},"RuntimeError":{"Error":[]},"_AssertionError":{"Error":[]},"JsLinkedHashMap":{"MapMixin":["1","2"],"Map":["1","2"],"MapMixin.K":"1","MapMixin.V":"2"},"LinkedHashMapKeyIterable":{"Iterable":["1"],"Iterable.E":"1"},"LinkedHashMapKeyIterator":{"Iterator":["1"]},"NativeTypedData":{"TypedData":[]},"NativeTypedArray":{"JavaScriptIndexingBehavior":["1"],"TypedData":[]},"NativeTypedArrayOfDouble":{"ListMixin":["double"],"JavaScriptIndexingBehavior":["double"],"List":["double"],"TypedData":[],"Iterable":["double"],"FixedLengthListMixin":["double"],"ListMixin.E":"double"},"NativeTypedArrayOfInt":{"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"TypedData":[],"Iterable":["int"],"FixedLengthListMixin":["int"]},"NativeFloat32List":{"ListMixin":["double"],"Float32List":[],"JavaScriptIndexingBehavior":["double"],"List":["double"],"TypedData":[],"Iterable":["double"],"FixedLengthListMixin":["double"],"ListMixin.E":"double"},"NativeInt16List":{"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"TypedData":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int"},"NativeInt32List":{"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"TypedData":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int"},"NativeInt8List":{"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"TypedData":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int"},"NativeUint16List":{"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"TypedData":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int"},"NativeUint32List":{"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"TypedData":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int"},"NativeUint8ClampedList":{"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"TypedData":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int"},"NativeUint8List":{"ListMixin":["int"],"Uint8List":[],"JavaScriptIndexingBehavior":["int"],"List":["int"],"TypedData":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int"},"_Error":{"Error":[]},"_TypeError":{"TypeError":[],"Error":[]},"_Future":{"Future":["1"]},"AsyncError":{"Error":[]},"_AsyncCompleter":{"_Completer":["1"]},"_Zone":{"Zone":[]},"_RootZone":{"_Zone":[],"Zone":[]},"_LinkedHashSet":{"SetMixin":["1"],"Set":["1"],"Iterable":["1"]},"_LinkedHashSetIterator":{"Iterator":["1"]},"MapBase":{"MapMixin":["1","2"],"Map":["1","2"]},"MapMixin":{"Map":["1","2"]},"_SetBase":{"SetMixin":["1"],"Set":["1"],"Iterable":["1"]},"double":{"num":[]},"int":{"num":[]},"List":{"Iterable":["1"]},"AssertionError":{"Error":[]},"TypeError":{"Error":[]},"NullThrownError":{"Error":[]},"ArgumentError":{"Error":[]},"RangeError":{"Error":[]},"IndexError":{"Error":[]},"UnsupportedError":{"Error":[]},"UnimplementedError":{"Error":[]},"StateError":{"Error":[]},"ConcurrentModificationError":{"Error":[]},"OutOfMemoryError":{"Error":[]},"StackOverflowError":{"Error":[]},"CyclicInitializationError":{"Error":[]},"_StringStackTrace":{"StackTrace":[]},"KeyboardEvent":{"Event":[]},"Node":{"EventTarget":[]},"SourceBuffer":{"EventTarget":[]},"TextTrack":{"EventTarget":[]},"TextTrackCue":{"EventTarget":[]},"HtmlElement":{"Element":[],"Node":[],"EventTarget":[]},"AnchorElement":{"Element":[],"Node":[],"EventTarget":[]},"AreaElement":{"Element":[],"Node":[],"EventTarget":[]},"BodyElement":{"Element":[],"Node":[],"EventTarget":[]},"CanvasElement":{"Element":[],"Node":[],"EventTarget":[]},"CharacterData":{"Node":[],"EventTarget":[]},"DomRectList":{"ListMixin":["Rectangle<num>"],"ImmutableListMixin":["Rectangle<num>"],"List":["Rectangle<num>"],"JavaScriptIndexingBehavior":["Rectangle<num>"],"Iterable":["Rectangle<num>"],"ImmutableListMixin.E":"Rectangle<num>","ListMixin.E":"Rectangle<num>"},"DomRectReadOnly":{"Rectangle":["num"]},"DomStringList":{"ListMixin":["String"],"ImmutableListMixin":["String"],"List":["String"],"JavaScriptIndexingBehavior":["String"],"Iterable":["String"],"ImmutableListMixin.E":"String","ListMixin.E":"String"},"Element":{"Node":[],"EventTarget":[]},"FileList":{"ListMixin":["File"],"ImmutableListMixin":["File"],"List":["File"],"JavaScriptIndexingBehavior":["File"],"Iterable":["File"],"ImmutableListMixin.E":"File","ListMixin.E":"File"},"FileWriter":{"EventTarget":[]},"FormElement":{"Element":[],"Node":[],"EventTarget":[]},"HtmlCollection":{"ListMixin":["Node"],"ImmutableListMixin":["Node"],"List":["Node"],"JavaScriptIndexingBehavior":["Node"],"Iterable":["Node"],"ImmutableListMixin.E":"Node","ListMixin.E":"Node"},"ImageElement":{"Element":[],"Node":[],"EventTarget":[]},"MediaElement":{"Element":[],"Node":[],"EventTarget":[]},"MidiInputMap":{"MapMixin":["String","@"],"Map":["String","@"],"MapMixin.K":"String","MapMixin.V":"@"},"MidiOutputMap":{"MapMixin":["String","@"],"Map":["String","@"],"MapMixin.K":"String","MapMixin.V":"@"},"MimeTypeArray":{"ListMixin":["MimeType"],"ImmutableListMixin":["MimeType"],"List":["MimeType"],"JavaScriptIndexingBehavior":["MimeType"],"Iterable":["MimeType"],"ImmutableListMixin.E":"MimeType","ListMixin.E":"MimeType"},"NodeList":{"ListMixin":["Node"],"ImmutableListMixin":["Node"],"List":["Node"],"JavaScriptIndexingBehavior":["Node"],"Iterable":["Node"],"ImmutableListMixin.E":"Node","ListMixin.E":"Node"},"PluginArray":{"ListMixin":["Plugin"],"ImmutableListMixin":["Plugin"],"List":["Plugin"],"JavaScriptIndexingBehavior":["Plugin"],"Iterable":["Plugin"],"ImmutableListMixin.E":"Plugin","ListMixin.E":"Plugin"},"RtcStatsReport":{"MapMixin":["String","@"],"Map":["String","@"],"MapMixin.K":"String","MapMixin.V":"@"},"SelectElement":{"Element":[],"Node":[],"EventTarget":[]},"SourceBufferList":{"ListMixin":["SourceBuffer"],"ImmutableListMixin":["SourceBuffer"],"List":["SourceBuffer"],"JavaScriptIndexingBehavior":["SourceBuffer"],"EventTarget":[],"Iterable":["SourceBuffer"],"ImmutableListMixin.E":"SourceBuffer","ListMixin.E":"SourceBuffer"},"SpeechGrammarList":{"ListMixin":["SpeechGrammar"],"ImmutableListMixin":["SpeechGrammar"],"List":["SpeechGrammar"],"JavaScriptIndexingBehavior":["SpeechGrammar"],"Iterable":["SpeechGrammar"],"ImmutableListMixin.E":"SpeechGrammar","ListMixin.E":"SpeechGrammar"},"Storage":{"MapMixin":["String","String"],"Map":["String","String"],"MapMixin.K":"String","MapMixin.V":"String"},"TextTrackCueList":{"ListMixin":["TextTrackCue"],"ImmutableListMixin":["TextTrackCue"],"List":["TextTrackCue"],"JavaScriptIndexingBehavior":["TextTrackCue"],"Iterable":["TextTrackCue"],"ImmutableListMixin.E":"TextTrackCue","ListMixin.E":"TextTrackCue"},"TextTrackList":{"ListMixin":["TextTrack"],"ImmutableListMixin":["TextTrack"],"List":["TextTrack"],"JavaScriptIndexingBehavior":["TextTrack"],"EventTarget":[],"Iterable":["TextTrack"],"ImmutableListMixin.E":"TextTrack","ListMixin.E":"TextTrack"},"TouchList":{"ListMixin":["Touch"],"ImmutableListMixin":["Touch"],"List":["Touch"],"JavaScriptIndexingBehavior":["Touch"],"Iterable":["Touch"],"ImmutableListMixin.E":"Touch","ListMixin.E":"Touch"},"UIEvent":{"Event":[]},"VideoElement":{"Element":[],"Node":[],"EventTarget":[]},"VideoTrackList":{"EventTarget":[]},"Window":{"EventTarget":[]},"_CssRuleList":{"ListMixin":["CssRule"],"ImmutableListMixin":["CssRule"],"List":["CssRule"],"JavaScriptIndexingBehavior":["CssRule"],"Iterable":["CssRule"],"ImmutableListMixin.E":"CssRule","ListMixin.E":"CssRule"},"_DomRect":{"Rectangle":["num"]},"_GamepadList":{"ListMixin":["Gamepad?"],"ImmutableListMixin":["Gamepad?"],"List":["Gamepad?"],"JavaScriptIndexingBehavior":["Gamepad?"],"Iterable":["Gamepad?"],"ImmutableListMixin.E":"Gamepad?","ListMixin.E":"Gamepad?"},"_NamedNodeMap":{"ListMixin":["Node"],"ImmutableListMixin":["Node"],"List":["Node"],"JavaScriptIndexingBehavior":["Node"],"Iterable":["Node"],"ImmutableListMixin.E":"Node","ListMixin.E":"Node"},"_SpeechRecognitionResultList":{"ListMixin":["SpeechRecognitionResult"],"ImmutableListMixin":["SpeechRecognitionResult"],"List":["SpeechRecognitionResult"],"JavaScriptIndexingBehavior":["SpeechRecognitionResult"],"Iterable":["SpeechRecognitionResult"],"ImmutableListMixin.E":"SpeechRecognitionResult","ListMixin.E":"SpeechRecognitionResult"},"_StyleSheetList":{"ListMixin":["StyleSheet"],"ImmutableListMixin":["StyleSheet"],"List":["StyleSheet"],"JavaScriptIndexingBehavior":["StyleSheet"],"Iterable":["StyleSheet"],"ImmutableListMixin.E":"StyleSheet","ListMixin.E":"StyleSheet"},"_EventStream":{"Stream":["1"]},"_ElementEventStreamImpl":{"_EventStream":["1"],"Stream":["1"]},"FixedSizeListIterator":{"Iterator":["1"]},"_JSRandom":{"Random":[]},"LengthList":{"ListMixin":["Length"],"ImmutableListMixin":["Length"],"List":["Length"],"Iterable":["Length"],"ImmutableListMixin.E":"Length","ListMixin.E":"Length"},"NumberList":{"ListMixin":["Number"],"ImmutableListMixin":["Number"],"List":["Number"],"Iterable":["Number"],"ImmutableListMixin.E":"Number","ListMixin.E":"Number"},"StringList":{"ListMixin":["String"],"ImmutableListMixin":["String"],"List":["String"],"Iterable":["String"],"ImmutableListMixin.E":"String","ListMixin.E":"String"},"SvgElement":{"Element":[],"Node":[],"EventTarget":[]},"TransformList":{"ListMixin":["Transform"],"ImmutableListMixin":["Transform"],"List":["Transform"],"Iterable":["Transform"],"ImmutableListMixin.E":"Transform","ListMixin.E":"Transform"},"AudioParamMap":{"MapMixin":["String","@"],"Map":["String","@"],"MapMixin.K":"String","MapMixin.V":"@"},"AudioTrackList":{"EventTarget":[]},"BaseAudioContext":{"EventTarget":[]},"OfflineAudioContext":{"EventTarget":[]},"SqlResultSetRowList":{"ListMixin":["Map<@,@>"],"ImmutableListMixin":["Map<@,@>"],"List":["Map<@,@>"],"Iterable":["Map<@,@>"],"ImmutableListMixin.E":"Map<@,@>","ListMixin.E":"Map<@,@>"},"WidgetConstraint":{"Constraint":["Point"]},"And":{"Constraint":["1"]},"Or":{"Constraint":["1"]},"CenteredConstraint":{"Constraint":["Point"]},"AgainstSingleWallConstraint":{"Constraint":["Point"]},"CornerConstraint":{"Constraint":["Point"]},"AdjacentConstraint":{"Constraint":["Point"]}}'));
  A._Universe_addErasedTypes(init.typeUniverse, JSON.parse('{"EfficientLengthIterable":1,"NativeTypedArray":1,"StreamSubscription":1,"MapBase":2,"_SetBase":1,"__SetBase_Object_SetMixin":1}'));
  var string$ = {
    _versi_: "#version 300 es\n\nin vec2 a_position;\nin vec4 a_color;\n\nuniform vec2 u_resolution;\n\nout vec4 v_color;\n\nvoid main() {\n  vec2 zeroToOne = a_position / u_resolution;\n  vec2 zeroToTwo = zeroToOne * 2.0;\n  vec2 clipSpace = zeroToTwo - 1.0;\n  gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);\n  v_color = a_color;\n}\n",
    _versip: "#version 300 es\nprecision highp float;\n\nin vec4 v_color;\n\nout vec4 outColor;\n\nvoid main() {\n   outColor = v_color;\n}\n",
    Error_: "Error handler must accept one Object or one Object and a StackTrace as arguments, and return a value of the returned future's type"
  };
  var type$ = (function rtii() {
    var findType = A.findType;
    return {
      Armor: findType("Armor"),
      ArmorUpgrade: findType("ArmorUpgrade"),
      AsyncError: findType("AsyncError"),
      CanvasElement: findType("CanvasElement"),
      CssRule: findType("CssRule"),
      EncounterRoom: findType("EncounterRoom"),
      Error: findType("Error"),
      Event: findType("Event"),
      File: findType("File"),
      Function: findType("Function"),
      Future_dynamic: findType("Future<@>"),
      Grid_LockState: findType("Grid<LockState>"),
      Grid_TerrainType: findType("Grid<TerrainType>"),
      Grid_TerrainWidget: findType("Grid<TerrainWidget>"),
      Grid_Tile: findType("Grid<Tile>"),
      Grid_TileInstance: findType("Grid<TileInstance>"),
      Grid_TileType: findType("Grid<TileType>"),
      Grid_double: findType("Grid<double>"),
      Grid_nullable_Item: findType("Grid<Item?>"),
      ImageElement: findType("ImageElement"),
      Iterable_dynamic: findType("Iterable<@>"),
      JSArray_ArmorUpgradeType: findType("JSArray<ArmorUpgradeType>"),
      JSArray_Directions: findType("JSArray<Directions>"),
      JSArray_EncounterRoom: findType("JSArray<EncounterRoom>"),
      JSArray_Item: findType("JSArray<Item>"),
      JSArray_ItemType: findType("JSArray<ItemType>"),
      JSArray_List_Point: findType("JSArray<List<Point>>"),
      JSArray_Object: findType("JSArray<Object>"),
      JSArray_Point: findType("JSArray<Point>"),
      JSArray_Sprite: findType("JSArray<Sprite>"),
      JSArray_String: findType("JSArray<String>"),
      JSArray_Tunneled: findType("JSArray<Tunneled>"),
      JSArray_WeaponProperties: findType("JSArray<WeaponProperties>"),
      JSArray_WidgetPlacement: findType("JSArray<WidgetPlacement>"),
      JSArray_double: findType("JSArray<double>"),
      JSArray_dynamic: findType("JSArray<@>"),
      JSArray_int: findType("JSArray<int>"),
      JSNull: findType("JSNull"),
      JavaScriptFunction: findType("JavaScriptFunction"),
      JavaScriptIndexingBehavior_dynamic: findType("JavaScriptIndexingBehavior<@>"),
      KeyboardEvent: findType("KeyboardEvent"),
      Length: findType("Length"),
      List_EncounterRoom: findType("List<EncounterRoom>"),
      List_Point: findType("List<Point>"),
      LockState: findType("LockState"),
      Map_Point_EncounterRoom: findType("Map<Point,EncounterRoom>"),
      Map_dynamic_dynamic: findType("Map<@,@>"),
      MeleeWeapon: findType("MeleeWeapon"),
      MimeType: findType("MimeType"),
      Node: findType("Node"),
      Null: findType("Null"),
      Number: findType("Number"),
      Object: findType("Object"),
      Plugin: findType("Plugin"),
      Point: findType("Point"),
      RangedWeapon: findType("RangedWeapon"),
      Rectangle_num: findType("Rectangle<num>"),
      SourceBuffer: findType("SourceBuffer"),
      SpeechGrammar: findType("SpeechGrammar"),
      SpeechRecognitionResult: findType("SpeechRecognitionResult"),
      StackTrace: findType("StackTrace"),
      String: findType("String"),
      StyleSheet: findType("StyleSheet"),
      TerrainType: findType("TerrainType"),
      TerrainWidget: findType("TerrainWidget"),
      TextTrack: findType("TextTrack"),
      TextTrackCue: findType("TextTrackCue"),
      Texture: findType("Texture"),
      Tile: findType("Tile"),
      TileInstance: findType("TileInstance"),
      TileType: findType("TileType"),
      Touch: findType("Touch"),
      Transform: findType("Transform"),
      Tunneled: findType("Tunneled"),
      TypeError: findType("TypeError"),
      UnknownJavaScriptObject: findType("UnknownJavaScriptObject"),
      VideoElement: findType("VideoElement"),
      WhereIterable_Armor: findType("WhereIterable<Armor>"),
      WhereIterable_ArmorUpgrade: findType("WhereIterable<ArmorUpgrade>"),
      WhereIterable_MeleeWeapon: findType("WhereIterable<MeleeWeapon>"),
      WhereIterable_RangedWeapon: findType("WhereIterable<RangedWeapon>"),
      WidgetPlacement: findType("WidgetPlacement"),
      _AsyncCompleter_Texture: findType("_AsyncCompleter<Texture>"),
      _ElementEventStreamImpl_Event: findType("_ElementEventStreamImpl<Event>"),
      _Future_Texture: findType("_Future<Texture>"),
      _Future_dynamic: findType("_Future<@>"),
      _Future_int: findType("_Future<int>"),
      bool: findType("bool"),
      bool_Function_Armor: findType("bool(Armor)"),
      bool_Function_ArmorUpgrade: findType("bool(ArmorUpgrade)"),
      bool_Function_MeleeWeapon: findType("bool(MeleeWeapon)"),
      bool_Function_Object: findType("bool(Object)"),
      bool_Function_RangedWeapon: findType("bool(RangedWeapon)"),
      double: findType("double"),
      dynamic: findType("@"),
      dynamic_Function: findType("@()"),
      dynamic_Function_Object: findType("@(Object)"),
      dynamic_Function_Object_StackTrace: findType("@(Object,StackTrace)"),
      int: findType("int"),
      legacy_Never: findType("0&*"),
      legacy_Object: findType("Object*"),
      nullable_Future_Null: findType("Future<Null>?"),
      nullable_Gamepad: findType("Gamepad?"),
      nullable_Item: findType("Item?"),
      nullable_Object: findType("Object?"),
      nullable__FutureListener_dynamic_dynamic: findType("_FutureListener<@,@>?"),
      nullable__LinkedHashSetCell: findType("_LinkedHashSetCell?"),
      nullable_dynamic_Function_Event: findType("@(Event)?"),
      nullable_void_Function: findType("~()?"),
      nullable_void_Function_KeyboardEvent: findType("~(KeyboardEvent)?"),
      num: findType("num"),
      void: findType("~"),
      void_Function: findType("~()"),
      void_Function_String_String: findType("~(String,String)"),
      void_Function_String_dynamic: findType("~(String,@)"),
      void_Function_num: findType("~(num)")
    };
  })();
  (function constants() {
    var makeConstList = hunkHelpers.makeConstList;
    B.CanvasElement_methods = A.CanvasElement.prototype;
    B.Interceptor_methods = J.Interceptor.prototype;
    B.JSArray_methods = J.JSArray.prototype;
    B.JSInt_methods = J.JSInt.prototype;
    B.JSNumber_methods = J.JSNumber.prototype;
    B.JSString_methods = J.JSString.prototype;
    B.JavaScriptFunction_methods = J.JavaScriptFunction.prototype;
    B.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
    B.RenderingContext2_methods = A.RenderingContext2.prototype;
    B.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
    B.Window_methods = A.Window.prototype;
    B.TerrainWidget_5 = new A.TerrainWidget("table");
    B.AdjacentConstraint_TerrainWidget_5 = new A.AdjacentConstraint(B.TerrainWidget_5);
    B.TerrainWidget_7 = new A.TerrainWidget("bookshelf");
    B.AdjacentConstraint_TerrainWidget_7 = new A.AdjacentConstraint(B.TerrainWidget_7);
    B.Biome_0 = new A.Biome("surface");
    B.Biome_1 = new A.Biome("caves");
    B.Biome_2 = new A.Biome("ruins");
    B.Biome_3 = new A.Biome("village");
    B.Biome_4 = new A.Biome("snow");
    B.C_AgainstSingleWallConstraint = new A.AgainstSingleWallConstraint();
    B.C_And = new A.And(A.findType("And<Point>"));
    B.C_CenteredConstraint = new A.CenteredConstraint();
    B.C_CornerConstraint = new A.CornerConstraint();
    B.C_JS_CONST = function getTagFallback(o) {
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
    B.C_JS_CONST0 = function() {
  var toStringFunction = Object.prototype.toString;
  function getTag(o) {
    var s = toStringFunction.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = toStringFunction.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (self.HTMLElement && object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: getTag,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
    B.C_JS_CONST6 = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var ua = navigator.userAgent;
    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
    if (ua.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
    B.C_JS_CONST1 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
    B.C_JS_CONST2 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
    B.C_JS_CONST5 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
    B.C_JS_CONST4 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
    B.C_JS_CONST3 = function(hooks) { return hooks; }
;
    B.C_Nothing = new A.Nothing();
    B.C_Or = new A.Or(A.findType("Or<Point>"));
    B.C_OutOfMemoryError = new A.OutOfMemoryError();
    B.C_SentinelValue = new A.SentinelValue();
    B.C__JSRandom = new A._JSRandom();
    B.C__RootZone = new A._RootZone();
    B.C__StringStackTrace = new A._StringStackTrace();
    B.Cardinal_0 = new A.Cardinal("north");
    B.Cardinal_1 = new A.Cardinal("south");
    B.Cardinal_2 = new A.Cardinal("east");
    B.Cardinal_3 = new A.Cardinal("west");
    B.Directions_0 = new A.Directions("se");
    B.Directions_1 = new A.Directions("ne");
    B.Directions_2 = new A.Directions("sw");
    B.Directions_3 = new A.Directions("nw");
    B.Directions_4 = new A.Directions("n");
    B.Directions_5 = new A.Directions("e");
    B.Directions_6 = new A.Directions("s");
    B.Directions_7 = new A.Directions("w");
    B.ItemType_0 = new A.ItemType("melee");
    B.ItemType_1 = new A.ItemType("ranged");
    B.ItemType_2 = new A.ItemType("armor");
    B.ItemType_3 = new A.ItemType("other");
    B.ArmorUpgradeType_0 = new A.ArmorUpgradeType("light");
    B.ArmorUpgradeType_1 = new A.ArmorUpgradeType("heavy");
    B.ArmorUpgradeType_2 = new A.ArmorUpgradeType("powered");
    B.List_wEo = A._setArrayType(makeConstList([B.ArmorUpgradeType_0, B.ArmorUpgradeType_1, B.ArmorUpgradeType_2]), type$.JSArray_ArmorUpgradeType);
    B.ArmorUpgrade_1 = new A.ArmorUpgrade(1);
    B.ArmorUpgrade_10 = new A.ArmorUpgrade(1);
    B.ArmorUpgrade_11 = new A.ArmorUpgrade(1);
    B.ArmorUpgrade_12 = new A.ArmorUpgrade(1);
    B.List_ArmorUpgradeType_2 = A._setArrayType(makeConstList([B.ArmorUpgradeType_2]), type$.JSArray_ArmorUpgradeType);
    B.ArmorUpgrade_2 = new A.ArmorUpgrade(2);
    B.List_GVa = A._setArrayType(makeConstList([B.ArmorUpgradeType_0, B.ArmorUpgradeType_1]), type$.JSArray_ArmorUpgradeType);
    B.ArmorUpgrade_20 = new A.ArmorUpgrade(2);
    B.List_03s = A._setArrayType(makeConstList([B.ArmorUpgrade_1, B.ArmorUpgrade_10, B.ArmorUpgrade_11, B.ArmorUpgrade_12, B.ArmorUpgrade_2, B.ArmorUpgrade_20]), A.findType("JSArray<ArmorUpgrade>"));
    B.List_3Vk = A._setArrayType(makeConstList([B.Cardinal_0, B.Cardinal_1, B.Cardinal_2, B.Cardinal_3]), A.findType("JSArray<Cardinal>"));
    B.List_6pZ = A._setArrayType(makeConstList([B.Directions_0, B.Directions_1, B.Directions_2, B.Directions_3, B.Directions_4, B.Directions_5, B.Directions_6, B.Directions_7]), type$.JSArray_Directions);
    B.List_Directions_4_Directions_6 = A._setArrayType(makeConstList([B.Directions_4, B.Directions_6]), type$.JSArray_Directions);
    B.List_Directions_5_Directions_7 = A._setArrayType(makeConstList([B.Directions_5, B.Directions_7]), type$.JSArray_Directions);
    B.HandRequirement_0 = new A.HandRequirement("oneHand");
    B.DamageType_5 = new A.DamageType("bludgeoning");
    B.CriticalEffect_0 = new A.CriticalEffect("none");
    B.C_Critical = new A.Critical();
    B.DiceType_2 = new A.DiceType("d6");
    B.WeaponProperties_0 = new A.WeaponProperties("archaic");
    B.WeaponProperties_2 = new A.WeaponProperties("analog");
    B.List_saI = A._setArrayType(makeConstList([B.WeaponProperties_0, B.WeaponProperties_2]), type$.JSArray_WeaponProperties);
    B.MeleeWeapon_0_Club = new A.MeleeWeapon(0, "Club");
    B.DiceType_1 = new A.DiceType("d4");
    B.WeaponProperties_3 = new A.WeaponProperties("operative");
    B.List_YGE = A._setArrayType(makeConstList([B.WeaponProperties_2, B.WeaponProperties_3]), type$.JSArray_WeaponProperties);
    B.MeleeWeapon_6FR = new A.MeleeWeapon(1, "Tactical Baton");
    B.DamageType_7 = new A.DamageType("slashing");
    B.MeleeWeapon_s8I = new A.MeleeWeapon(1, "Survival Knife");
    B.HandRequirement_1 = new A.HandRequirement("twoHand");
    B.DamageType_6 = new A.DamageType("piercing");
    B.WeaponProperties_4 = new A.WeaponProperties("block");
    B.List_E4y = A._setArrayType(makeConstList([B.WeaponProperties_2, B.WeaponProperties_4]), type$.JSArray_WeaponProperties);
    B.MeleeWeapon_K2a = new A.MeleeWeapon(1, "Tactical Spear");
    B.DamageType_3 = new A.DamageType("fire");
    B.CriticalEffect_4 = new A.CriticalEffect("burn");
    B.C_Critical0 = new A.Critical();
    B.WeaponProperties_5 = new A.WeaponProperties("powered");
    B.List_WeaponProperties_5 = A._setArrayType(makeConstList([B.WeaponProperties_5]), type$.JSArray_WeaponProperties);
    B.C_MeleePower = new A.MeleePower();
    B.MeleeWeapon_cdS = new A.MeleeWeapon(7, "Flame Sword");
    B.CriticalEffect_11 = new A.CriticalEffect("wound");
    B.C_Critical1 = new A.Critical();
    B.DiceType_3 = new A.DiceType("d8");
    B.MeleeWeapon_C72 = new A.MeleeWeapon(9, "Plasma Sword");
    B.DamageType_2 = new A.DamageType("electricity");
    B.CriticalEffect_1 = new A.CriticalEffect("arc");
    B.C_Critical2 = new A.Critical();
    B.DiceType_4 = new A.DiceType("d12");
    B.WeaponProperties_6 = new A.WeaponProperties("stun");
    B.List_PGC = A._setArrayType(makeConstList([B.WeaponProperties_6, B.WeaponProperties_5]), type$.JSArray_WeaponProperties);
    B.MeleeWeapon_qNA = new A.MeleeWeapon(8, "Shock Staff");
    B.List_HuN = A._setArrayType(makeConstList([B.MeleeWeapon_0_Club, B.MeleeWeapon_6FR, B.MeleeWeapon_s8I, B.MeleeWeapon_K2a, B.MeleeWeapon_cdS, B.MeleeWeapon_C72, B.MeleeWeapon_qNA]), A.findType("JSArray<MeleeWeapon>"));
    B.DamageType_1 = new A.DamageType("cold");
    B.CriticalEffect_9 = new A.CriticalEffect("staggered");
    B.C_Critical3 = new A.Critical();
    B.AmmoType_1 = new A.AmmoType("charge");
    B.C_AmmoUsage = new A.AmmoUsage();
    B.RangedWeapon_l6H = new A.RangedWeapon("Zero pistol", 5);
    B.List_WeaponProperties_2 = A._setArrayType(makeConstList([B.WeaponProperties_2]), type$.JSArray_WeaponProperties);
    B.AmmoType_2 = new A.AmmoType("rounds");
    B.C_AmmoUsage0 = new A.AmmoUsage();
    B.RangedWeapon_Uq7 = new A.RangedWeapon("Tac Pistol", 1);
    B.DiceType_0 = new A.DiceType("d3");
    B.C_Critical4 = new A.Critical();
    B.WeaponProperties_7 = new A.WeaponProperties("line");
    B.WeaponProperties_8 = new A.WeaponProperties("unwieldy");
    B.List_aTZ = A._setArrayType(makeConstList([B.WeaponProperties_7, B.WeaponProperties_8]), type$.JSArray_WeaponProperties);
    B.AmmoType_0 = new A.AmmoType("petro");
    B.C_AmmoUsage1 = new A.AmmoUsage();
    B.RangedWeapon_IY7 = new A.RangedWeapon("Flame Rifle", 2);
    B.List_Lpb = A._setArrayType(makeConstList([B.RangedWeapon_l6H, B.RangedWeapon_Uq7, B.RangedWeapon_IY7]), A.findType("JSArray<RangedWeapon>"));
    B.Armor_mS8 = new A.Armor("Second Skin", 1);
    B.Armor_6YB = new A.Armor("Estex Suit I", 1);
    B.Armor_Hue = new A.Armor("Flight Suit", 1);
    B.Armor_CTi = new A.Armor("Freebooter Armor I", 2);
    B.Armor_zjx = new A.Armor("Kasatha microcord I", 2);
    B.Armor_8Gl = new A.Armor("Ceremonial Plate", 1);
    B.Armor_cMb = new A.Armor("Golemforged Plating", 1);
    B.List_eDa = A._setArrayType(makeConstList([B.Armor_mS8, B.Armor_6YB, B.Armor_Hue, B.Armor_CTi, B.Armor_zjx, B.Armor_8Gl, B.Armor_cMb]), A.findType("JSArray<Armor>"));
    B.List_empty = A._setArrayType(makeConstList([]), type$.JSArray_Directions);
    B.RuinOrientation_0 = new A.RuinOrientation("north");
    B.RuinOrientation_1 = new A.RuinOrientation("south");
    B.RuinOrientation_2 = new A.RuinOrientation("east");
    B.RuinOrientation_3 = new A.RuinOrientation("west");
    B.RuinOrientation_4 = new A.RuinOrientation("center");
    B.List_scx = A._setArrayType(makeConstList([B.RuinOrientation_0, B.RuinOrientation_1, B.RuinOrientation_2, B.RuinOrientation_3, B.RuinOrientation_4]), A.findType("JSArray<RuinOrientation>"));
    B.LockState_0 = new A.LockState("lockedDoor");
    B.LockState_3 = new A.LockState("doorMechanism");
    B.LockState_4 = new A.LockState("none");
    B.Point_0_0 = new A.Point(0, 0);
    B.RoomSizeKind_0 = new A.RoomSizeKind("small");
    B.RoomSizeKind_1 = new A.RoomSizeKind("medium");
    B.RoomSizeKind_2 = new A.RoomSizeKind("large");
    B.TerrainType_0 = new A.TerrainType("dirt");
    B.TerrainType_2 = new A.TerrainType("metal");
    B.TerrainType_4 = new A.TerrainType("snow");
    B.TerrainWidget_0 = new A.TerrainWidget("door");
    B.TerrainWidget_1 = new A.TerrainWidget("grass");
    B.TerrainWidget_10 = new A.TerrainWidget("mechanicalLight");
    B.TerrainWidget_2 = new A.TerrainWidget("light");
    B.TerrainWidget_3 = new A.TerrainWidget("none");
    B.TerrainWidget_4 = new A.TerrainWidget("chair");
    B.TerrainWidget_6 = new A.TerrainWidget("chest");
    B.TerrainWidget_8 = new A.TerrainWidget("mechanism");
    B.TerrainWidget_9 = new A.TerrainWidget("tree");
    B.TileType_0 = new A.TileType("floor");
    B.TileType_1 = new A.TileType("wall");
    B.Type_Object_xQ6 = A.typeLiteral("Object");
  })();
  (function staticFields() {
    $._JS_INTEROP_INTERCEPTOR_TAG = null;
    $.Closure_functionCounter = 0;
    $.BoundClosure__receiverFieldNameCache = null;
    $.BoundClosure__interceptorFieldNameCache = null;
    $.getTagFunction = null;
    $.alternateTagFunction = null;
    $.prototypeForTagFunction = null;
    $.dispatchRecordsForInstanceTags = null;
    $.interceptorsForUncacheableTags = null;
    $.initNativeDispatchFlag = null;
    $._nextCallback = null;
    $._lastCallback = null;
    $._lastPriorityCallback = null;
    $._isInCallbackLoop = false;
    $.Zone__current = B.C__RootZone;
    $._toStringVisiting = A._setArrayType([], type$.JSArray_Object);
    $.ItemHelpers_nextId = 0;
  })();
  (function lazyInitializers() {
    var _lazyFinal = hunkHelpers.lazyFinal;
    _lazyFinal($, "DART_CLOSURE_PROPERTY_NAME", "$get$DART_CLOSURE_PROPERTY_NAME", function() {
      return A.getIsolateAffinityTag("_$dart_dartClosure");
    });
    _lazyFinal($, "TypeErrorDecoder_noSuchMethodPattern", "$get$TypeErrorDecoder_noSuchMethodPattern", function() {
      return A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn({
        toString: function() {
          return "$receiver$";
        }
      }));
    });
    _lazyFinal($, "TypeErrorDecoder_notClosurePattern", "$get$TypeErrorDecoder_notClosurePattern", function() {
      return A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn({$method$: null,
        toString: function() {
          return "$receiver$";
        }
      }));
    });
    _lazyFinal($, "TypeErrorDecoder_nullCallPattern", "$get$TypeErrorDecoder_nullCallPattern", function() {
      return A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn(null));
    });
    _lazyFinal($, "TypeErrorDecoder_nullLiteralCallPattern", "$get$TypeErrorDecoder_nullLiteralCallPattern", function() {
      return A.TypeErrorDecoder_extractPattern(function() {
        var $argumentsExpr$ = "$arguments$";
        try {
          null.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazyFinal($, "TypeErrorDecoder_undefinedCallPattern", "$get$TypeErrorDecoder_undefinedCallPattern", function() {
      return A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn(void 0));
    });
    _lazyFinal($, "TypeErrorDecoder_undefinedLiteralCallPattern", "$get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
      return A.TypeErrorDecoder_extractPattern(function() {
        var $argumentsExpr$ = "$arguments$";
        try {
          (void 0).$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazyFinal($, "TypeErrorDecoder_nullPropertyPattern", "$get$TypeErrorDecoder_nullPropertyPattern", function() {
      return A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokePropertyErrorOn(null));
    });
    _lazyFinal($, "TypeErrorDecoder_nullLiteralPropertyPattern", "$get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
      return A.TypeErrorDecoder_extractPattern(function() {
        try {
          null.$method$;
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazyFinal($, "TypeErrorDecoder_undefinedPropertyPattern", "$get$TypeErrorDecoder_undefinedPropertyPattern", function() {
      return A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokePropertyErrorOn(void 0));
    });
    _lazyFinal($, "TypeErrorDecoder_undefinedLiteralPropertyPattern", "$get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
      return A.TypeErrorDecoder_extractPattern(function() {
        try {
          (void 0).$method$;
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazyFinal($, "_AsyncRun__scheduleImmediateClosure", "$get$_AsyncRun__scheduleImmediateClosure", function() {
      return A._AsyncRun__initializeScheduleImmediate();
    });
    _lazyFinal($, "_hashSeed", "$get$_hashSeed", function() {
      return A.objectHashCode(B.Type_Object_xQ6);
    });
    _lazyFinal($, "MapTheme_deepCaveTheme", "$get$MapTheme_deepCaveTheme", function() {
      var t1 = A.Color$(4278780675);
      return new A.MapTheme(A.Color$(4279308561), A.Color$(4280361249), t1);
    });
    _lazyFinal($, "_random", "$get$_random", function() {
      return A.Random_Random();
    });
    _lazyFinal($, "placeTable", "$get$placeTable", function() {
      return A.WidgetPlacement$(B.C_CenteredConstraint, new A.placeTable_closure());
    });
    _lazyFinal($, "placeChair", "$get$placeChair", function() {
      return A.WidgetPlacement$(B.AdjacentConstraint_TerrainWidget_5, new A.placeChair_closure());
    });
    _lazyFinal($, "placeLight", "$get$placeLight", function() {
      return A.WidgetPlacement$(B.C_CornerConstraint, new A.placeLight_closure());
    });
    _lazyFinal($, "placeCenterLight", "$get$placeCenterLight", function() {
      return A.WidgetPlacement$(B.C_CenteredConstraint, new A.placeCenterLight_closure());
    });
    _lazyFinal($, "placeChest", "$get$placeChest", function() {
      return A.WidgetPlacement$(B.C_CenteredConstraint, new A.placeChest_closure());
    });
    _lazyFinal($, "placeMechanism", "$get$placeMechanism", function() {
      return A.WidgetPlacement$(B.C_CornerConstraint, new A.placeMechanism_closure());
    });
    _lazyFinal($, "placeBookshelf", "$get$placeBookshelf", function() {
      return A.WidgetPlacement$(B.C_Or, new A.placeBookshelf_closure());
    });
    _lazyFinal($, "messRoom", "$get$messRoom", function() {
      var t1 = $.$get$placeTable(),
        t2 = $.$get$placeChair();
      return A._setArrayType([t1, t2, t2, $.$get$placeLight()], type$.JSArray_WidgetPlacement);
    });
    _lazyFinal($, "libraryRoom", "$get$libraryRoom", function() {
      var t1 = $.$get$placeBookshelf();
      return A._setArrayType([t1, t1, t1, t1, t1, $.$get$placeLight(), $.$get$placeTable(), $.$get$placeChair()], type$.JSArray_WidgetPlacement);
    });
    _lazyFinal($, "largeRoom", "$get$largeRoom", function() {
      var t1 = $.$get$placeLight();
      return A._setArrayType([t1, t1, t1, t1], type$.JSArray_WidgetPlacement);
    });
    _lazyFinal($, "hugeRoom", "$get$hugeRoom", function() {
      var t1 = $.$get$placeLight(),
        t2 = $.$get$placeCenterLight();
      return A._setArrayType([t1, t1, t1, t1, t1, t1, t2, t2, t2, t2], type$.JSArray_WidgetPlacement);
    });
    _lazyFinal($, "treasureRoom", "$get$treasureRoom", function() {
      return A._setArrayType([$.$get$placeChest(), $.$get$placeLight()], type$.JSArray_WidgetPlacement);
    });
    _lazyFinal($, "_p", "$get$_p", function() {
      return new Uint8Array(A._ensureNativeList(A._setArrayType([151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180, 151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180], type$.JSArray_int)));
    });
    _lazyFinal($, "world", "$get$world", function() {
      var t1 = A.Point$from(0, 0),
        t2 = A._setArrayType([], A.findType("JSArray<Row>"));
      t2 = new A.FOVSystem(A.NativeUint8List_NativeUint8List(16000000), A.NativeUint8List_NativeUint8List(4000), t1, t2);
      t1 = A.Random_Random();
      t1 = A.blueprintToStage(new A.BoardGenerator(A.Random_Random(), new A.ItemGenerator(t1)).generate$1(new A.MapConfig(B.Biome_1, false, 1)));
      t2.invalidateTiles$1(t1.tiles);
      t2.initializeAll$0();
      return new A.World(t2, new A.Agent(new A.Sprite(0, 4, 1, 1)), t1);
    });
    _lazyFinal($, "renderer", "$get$renderer", function() {
      return A.Renderer$(A.findType("RenderingContext2")._as(B.CanvasElement_methods.getContext$1(type$.CanvasElement._as(A.document().querySelector("#glCanvas")), "webgl2")), $.$get$world());
    });
  })();
  (function nativeSupport() {
    !function() {
      var intern = function(s) {
        var o = {};
        o[s] = 1;
        return Object.keys(hunkHelpers.convertToFastObject(o))[0];
      };
      init.getIsolateTag = function(name) {
        return intern("___dart_" + name + init.isolateTag);
      };
      var tableProperty = "___dart_isolate_tags_";
      var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
      var rootProperty = "_ZxYxX";
      for (var i = 0;; i++) {
        var property = intern(rootProperty + "_" + i + "_");
        if (!(property in usedProperties)) {
          usedProperties[property] = 1;
          init.isolateTag = property;
          break;
        }
      }
      init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
    }();
    hunkHelpers.setOrUpdateInterceptorsByTag({ArrayBuffer: J.Interceptor, AnimationEffectReadOnly: J.Interceptor, AnimationEffectTiming: J.Interceptor, AnimationEffectTimingReadOnly: J.Interceptor, AnimationTimeline: J.Interceptor, AnimationWorkletGlobalScope: J.Interceptor, AuthenticatorAssertionResponse: J.Interceptor, AuthenticatorAttestationResponse: J.Interceptor, AuthenticatorResponse: J.Interceptor, BackgroundFetchFetch: J.Interceptor, BackgroundFetchManager: J.Interceptor, BackgroundFetchSettledFetch: J.Interceptor, BarProp: J.Interceptor, BarcodeDetector: J.Interceptor, BluetoothRemoteGATTDescriptor: J.Interceptor, Body: J.Interceptor, BudgetState: J.Interceptor, CacheStorage: J.Interceptor, CanvasGradient: J.Interceptor, CanvasPattern: J.Interceptor, CanvasRenderingContext2D: J.Interceptor, Client: J.Interceptor, Clients: J.Interceptor, CookieStore: J.Interceptor, Coordinates: J.Interceptor, Credential: J.Interceptor, CredentialUserData: J.Interceptor, CredentialsContainer: J.Interceptor, Crypto: J.Interceptor, CryptoKey: J.Interceptor, CSS: J.Interceptor, CSSVariableReferenceValue: J.Interceptor, CustomElementRegistry: J.Interceptor, DataTransfer: J.Interceptor, DataTransferItem: J.Interceptor, DeprecatedStorageInfo: J.Interceptor, DeprecatedStorageQuota: J.Interceptor, DeprecationReport: J.Interceptor, DetectedBarcode: J.Interceptor, DetectedFace: J.Interceptor, DetectedText: J.Interceptor, DeviceAcceleration: J.Interceptor, DeviceRotationRate: J.Interceptor, DirectoryEntry: J.Interceptor, DirectoryReader: J.Interceptor, DocumentOrShadowRoot: J.Interceptor, DocumentTimeline: J.Interceptor, DOMError: J.Interceptor, DOMImplementation: J.Interceptor, Iterator: J.Interceptor, DOMMatrix: J.Interceptor, DOMMatrixReadOnly: J.Interceptor, DOMParser: J.Interceptor, DOMPoint: J.Interceptor, DOMPointReadOnly: J.Interceptor, DOMQuad: J.Interceptor, DOMStringMap: J.Interceptor, Entry: J.Interceptor, External: J.Interceptor, FaceDetector: J.Interceptor, FederatedCredential: J.Interceptor, FileEntry: J.Interceptor, DOMFileSystem: J.Interceptor, FontFace: J.Interceptor, FontFaceSource: J.Interceptor, FormData: J.Interceptor, GamepadButton: J.Interceptor, GamepadPose: J.Interceptor, Geolocation: J.Interceptor, Position: J.Interceptor, GeolocationPosition: J.Interceptor, Headers: J.Interceptor, HTMLHyperlinkElementUtils: J.Interceptor, IdleDeadline: J.Interceptor, ImageBitmap: J.Interceptor, ImageBitmapRenderingContext: J.Interceptor, ImageCapture: J.Interceptor, ImageData: J.Interceptor, InputDeviceCapabilities: J.Interceptor, IntersectionObserver: J.Interceptor, IntersectionObserverEntry: J.Interceptor, InterventionReport: J.Interceptor, KeyframeEffect: J.Interceptor, KeyframeEffectReadOnly: J.Interceptor, MediaCapabilities: J.Interceptor, MediaCapabilitiesInfo: J.Interceptor, MediaDeviceInfo: J.Interceptor, MediaError: J.Interceptor, MediaKeyStatusMap: J.Interceptor, MediaKeySystemAccess: J.Interceptor, MediaKeys: J.Interceptor, MediaKeysPolicy: J.Interceptor, MediaMetadata: J.Interceptor, MediaSession: J.Interceptor, MediaSettingsRange: J.Interceptor, MemoryInfo: J.Interceptor, MessageChannel: J.Interceptor, Metadata: J.Interceptor, MutationObserver: J.Interceptor, WebKitMutationObserver: J.Interceptor, MutationRecord: J.Interceptor, NavigationPreloadManager: J.Interceptor, Navigator: J.Interceptor, NavigatorAutomationInformation: J.Interceptor, NavigatorConcurrentHardware: J.Interceptor, NavigatorCookies: J.Interceptor, NavigatorUserMediaError: J.Interceptor, NodeFilter: J.Interceptor, NodeIterator: J.Interceptor, NonDocumentTypeChildNode: J.Interceptor, NonElementParentNode: J.Interceptor, NoncedElement: J.Interceptor, OffscreenCanvasRenderingContext2D: J.Interceptor, OverconstrainedError: J.Interceptor, PaintRenderingContext2D: J.Interceptor, PaintSize: J.Interceptor, PaintWorkletGlobalScope: J.Interceptor, PasswordCredential: J.Interceptor, Path2D: J.Interceptor, PaymentAddress: J.Interceptor, PaymentInstruments: J.Interceptor, PaymentManager: J.Interceptor, PaymentResponse: J.Interceptor, PerformanceEntry: J.Interceptor, PerformanceLongTaskTiming: J.Interceptor, PerformanceMark: J.Interceptor, PerformanceMeasure: J.Interceptor, PerformanceNavigation: J.Interceptor, PerformanceNavigationTiming: J.Interceptor, PerformanceObserver: J.Interceptor, PerformanceObserverEntryList: J.Interceptor, PerformancePaintTiming: J.Interceptor, PerformanceResourceTiming: J.Interceptor, PerformanceServerTiming: J.Interceptor, PerformanceTiming: J.Interceptor, Permissions: J.Interceptor, PhotoCapabilities: J.Interceptor, PositionError: J.Interceptor, GeolocationPositionError: J.Interceptor, Presentation: J.Interceptor, PresentationReceiver: J.Interceptor, PublicKeyCredential: J.Interceptor, PushManager: J.Interceptor, PushMessageData: J.Interceptor, PushSubscription: J.Interceptor, PushSubscriptionOptions: J.Interceptor, Range: J.Interceptor, RelatedApplication: J.Interceptor, ReportBody: J.Interceptor, ReportingObserver: J.Interceptor, ResizeObserver: J.Interceptor, ResizeObserverEntry: J.Interceptor, RTCCertificate: J.Interceptor, RTCIceCandidate: J.Interceptor, mozRTCIceCandidate: J.Interceptor, RTCLegacyStatsReport: J.Interceptor, RTCRtpContributingSource: J.Interceptor, RTCRtpReceiver: J.Interceptor, RTCRtpSender: J.Interceptor, RTCSessionDescription: J.Interceptor, mozRTCSessionDescription: J.Interceptor, RTCStatsResponse: J.Interceptor, Screen: J.Interceptor, ScrollState: J.Interceptor, ScrollTimeline: J.Interceptor, Selection: J.Interceptor, SharedArrayBuffer: J.Interceptor, SpeechRecognitionAlternative: J.Interceptor, SpeechSynthesisVoice: J.Interceptor, StaticRange: J.Interceptor, StorageManager: J.Interceptor, StyleMedia: J.Interceptor, StylePropertyMap: J.Interceptor, StylePropertyMapReadonly: J.Interceptor, SyncManager: J.Interceptor, TaskAttributionTiming: J.Interceptor, TextDetector: J.Interceptor, TextMetrics: J.Interceptor, TrackDefault: J.Interceptor, TreeWalker: J.Interceptor, TrustedHTML: J.Interceptor, TrustedScriptURL: J.Interceptor, TrustedURL: J.Interceptor, UnderlyingSourceBase: J.Interceptor, URLSearchParams: J.Interceptor, VRCoordinateSystem: J.Interceptor, VRDisplayCapabilities: J.Interceptor, VREyeParameters: J.Interceptor, VRFrameData: J.Interceptor, VRFrameOfReference: J.Interceptor, VRPose: J.Interceptor, VRStageBounds: J.Interceptor, VRStageBoundsPoint: J.Interceptor, VRStageParameters: J.Interceptor, ValidityState: J.Interceptor, VideoPlaybackQuality: J.Interceptor, VideoTrack: J.Interceptor, VTTRegion: J.Interceptor, WindowClient: J.Interceptor, WorkletAnimation: J.Interceptor, WorkletGlobalScope: J.Interceptor, XPathEvaluator: J.Interceptor, XPathExpression: J.Interceptor, XPathNSResolver: J.Interceptor, XPathResult: J.Interceptor, XMLSerializer: J.Interceptor, XSLTProcessor: J.Interceptor, Bluetooth: J.Interceptor, BluetoothCharacteristicProperties: J.Interceptor, BluetoothRemoteGATTServer: J.Interceptor, BluetoothRemoteGATTService: J.Interceptor, BluetoothUUID: J.Interceptor, BudgetService: J.Interceptor, Cache: J.Interceptor, DOMFileSystemSync: J.Interceptor, DirectoryEntrySync: J.Interceptor, DirectoryReaderSync: J.Interceptor, EntrySync: J.Interceptor, FileEntrySync: J.Interceptor, FileReaderSync: J.Interceptor, FileWriterSync: J.Interceptor, HTMLAllCollection: J.Interceptor, Mojo: J.Interceptor, MojoHandle: J.Interceptor, MojoWatcher: J.Interceptor, NFC: J.Interceptor, PagePopupController: J.Interceptor, Report: J.Interceptor, Request: J.Interceptor, Response: J.Interceptor, SubtleCrypto: J.Interceptor, USBAlternateInterface: J.Interceptor, USBConfiguration: J.Interceptor, USBDevice: J.Interceptor, USBEndpoint: J.Interceptor, USBInTransferResult: J.Interceptor, USBInterface: J.Interceptor, USBIsochronousInTransferPacket: J.Interceptor, USBIsochronousInTransferResult: J.Interceptor, USBIsochronousOutTransferPacket: J.Interceptor, USBIsochronousOutTransferResult: J.Interceptor, USBOutTransferResult: J.Interceptor, WorkerLocation: J.Interceptor, WorkerNavigator: J.Interceptor, Worklet: J.Interceptor, IDBCursor: J.Interceptor, IDBCursorWithValue: J.Interceptor, IDBFactory: J.Interceptor, IDBIndex: J.Interceptor, IDBKeyRange: J.Interceptor, IDBObjectStore: J.Interceptor, IDBObservation: J.Interceptor, IDBObserver: J.Interceptor, IDBObserverChanges: J.Interceptor, SVGAngle: J.Interceptor, SVGAnimatedAngle: J.Interceptor, SVGAnimatedBoolean: J.Interceptor, SVGAnimatedEnumeration: J.Interceptor, SVGAnimatedInteger: J.Interceptor, SVGAnimatedLength: J.Interceptor, SVGAnimatedLengthList: J.Interceptor, SVGAnimatedNumber: J.Interceptor, SVGAnimatedNumberList: J.Interceptor, SVGAnimatedPreserveAspectRatio: J.Interceptor, SVGAnimatedRect: J.Interceptor, SVGAnimatedString: J.Interceptor, SVGAnimatedTransformList: J.Interceptor, SVGMatrix: J.Interceptor, SVGPoint: J.Interceptor, SVGPreserveAspectRatio: J.Interceptor, SVGRect: J.Interceptor, SVGUnitTypes: J.Interceptor, AudioListener: J.Interceptor, AudioParam: J.Interceptor, AudioTrack: J.Interceptor, AudioWorkletGlobalScope: J.Interceptor, AudioWorkletProcessor: J.Interceptor, PeriodicWave: J.Interceptor, WebGLActiveInfo: J.Interceptor, ANGLEInstancedArrays: J.Interceptor, ANGLE_instanced_arrays: J.Interceptor, WebGLCanvas: J.Interceptor, WebGLColorBufferFloat: J.Interceptor, WebGLCompressedTextureASTC: J.Interceptor, WebGLCompressedTextureATC: J.Interceptor, WEBGL_compressed_texture_atc: J.Interceptor, WebGLCompressedTextureETC1: J.Interceptor, WEBGL_compressed_texture_etc1: J.Interceptor, WebGLCompressedTextureETC: J.Interceptor, WebGLCompressedTexturePVRTC: J.Interceptor, WEBGL_compressed_texture_pvrtc: J.Interceptor, WebGLCompressedTextureS3TC: J.Interceptor, WEBGL_compressed_texture_s3tc: J.Interceptor, WebGLCompressedTextureS3TCsRGB: J.Interceptor, WebGLDebugRendererInfo: J.Interceptor, WEBGL_debug_renderer_info: J.Interceptor, WebGLDebugShaders: J.Interceptor, WEBGL_debug_shaders: J.Interceptor, WebGLDepthTexture: J.Interceptor, WEBGL_depth_texture: J.Interceptor, WebGLDrawBuffers: J.Interceptor, WEBGL_draw_buffers: J.Interceptor, EXTsRGB: J.Interceptor, EXT_sRGB: J.Interceptor, EXTBlendMinMax: J.Interceptor, EXT_blend_minmax: J.Interceptor, EXTColorBufferFloat: J.Interceptor, EXTColorBufferHalfFloat: J.Interceptor, EXTDisjointTimerQuery: J.Interceptor, EXTDisjointTimerQueryWebGL2: J.Interceptor, EXTFragDepth: J.Interceptor, EXT_frag_depth: J.Interceptor, EXTShaderTextureLOD: J.Interceptor, EXT_shader_texture_lod: J.Interceptor, EXTTextureFilterAnisotropic: J.Interceptor, EXT_texture_filter_anisotropic: J.Interceptor, WebGLFramebuffer: J.Interceptor, WebGLGetBufferSubDataAsync: J.Interceptor, WebGLLoseContext: J.Interceptor, WebGLExtensionLoseContext: J.Interceptor, WEBGL_lose_context: J.Interceptor, OESElementIndexUint: J.Interceptor, OES_element_index_uint: J.Interceptor, OESStandardDerivatives: J.Interceptor, OES_standard_derivatives: J.Interceptor, OESTextureFloat: J.Interceptor, OES_texture_float: J.Interceptor, OESTextureFloatLinear: J.Interceptor, OES_texture_float_linear: J.Interceptor, OESTextureHalfFloat: J.Interceptor, OES_texture_half_float: J.Interceptor, OESTextureHalfFloatLinear: J.Interceptor, OES_texture_half_float_linear: J.Interceptor, OESVertexArrayObject: J.Interceptor, OES_vertex_array_object: J.Interceptor, WebGLQuery: J.Interceptor, WebGLRenderbuffer: J.Interceptor, WebGLRenderingContext: J.Interceptor, WebGLSampler: J.Interceptor, WebGLShader: J.Interceptor, WebGLShaderPrecisionFormat: J.Interceptor, WebGLSync: J.Interceptor, WebGLTimerQueryEXT: J.Interceptor, WebGLTransformFeedback: J.Interceptor, WebGLVertexArrayObjectOES: J.Interceptor, WebGL: J.Interceptor, WebGL2RenderingContextBase: J.Interceptor, Database: J.Interceptor, SQLError: J.Interceptor, SQLResultSet: J.Interceptor, SQLTransaction: J.Interceptor, DataView: A.NativeTypedData, ArrayBufferView: A.NativeTypedData, Float64Array: A.NativeTypedArrayOfDouble, Float32Array: A.NativeFloat32List, Int16Array: A.NativeInt16List, Int32Array: A.NativeInt32List, Int8Array: A.NativeInt8List, Uint16Array: A.NativeUint16List, Uint32Array: A.NativeUint32List, Uint8ClampedArray: A.NativeUint8ClampedList, CanvasPixelArray: A.NativeUint8ClampedList, Uint8Array: A.NativeUint8List, HTMLBRElement: A.HtmlElement, HTMLBaseElement: A.HtmlElement, HTMLButtonElement: A.HtmlElement, HTMLContentElement: A.HtmlElement, HTMLDListElement: A.HtmlElement, HTMLDataElement: A.HtmlElement, HTMLDataListElement: A.HtmlElement, HTMLDetailsElement: A.HtmlElement, HTMLDialogElement: A.HtmlElement, HTMLDivElement: A.HtmlElement, HTMLEmbedElement: A.HtmlElement, HTMLFieldSetElement: A.HtmlElement, HTMLHRElement: A.HtmlElement, HTMLHeadElement: A.HtmlElement, HTMLHeadingElement: A.HtmlElement, HTMLHtmlElement: A.HtmlElement, HTMLIFrameElement: A.HtmlElement, HTMLInputElement: A.HtmlElement, HTMLLIElement: A.HtmlElement, HTMLLabelElement: A.HtmlElement, HTMLLegendElement: A.HtmlElement, HTMLLinkElement: A.HtmlElement, HTMLMapElement: A.HtmlElement, HTMLMenuElement: A.HtmlElement, HTMLMetaElement: A.HtmlElement, HTMLMeterElement: A.HtmlElement, HTMLModElement: A.HtmlElement, HTMLOListElement: A.HtmlElement, HTMLObjectElement: A.HtmlElement, HTMLOptGroupElement: A.HtmlElement, HTMLOptionElement: A.HtmlElement, HTMLOutputElement: A.HtmlElement, HTMLParagraphElement: A.HtmlElement, HTMLParamElement: A.HtmlElement, HTMLPictureElement: A.HtmlElement, HTMLPreElement: A.HtmlElement, HTMLProgressElement: A.HtmlElement, HTMLQuoteElement: A.HtmlElement, HTMLScriptElement: A.HtmlElement, HTMLShadowElement: A.HtmlElement, HTMLSlotElement: A.HtmlElement, HTMLSourceElement: A.HtmlElement, HTMLSpanElement: A.HtmlElement, HTMLStyleElement: A.HtmlElement, HTMLTableCaptionElement: A.HtmlElement, HTMLTableCellElement: A.HtmlElement, HTMLTableDataCellElement: A.HtmlElement, HTMLTableHeaderCellElement: A.HtmlElement, HTMLTableColElement: A.HtmlElement, HTMLTableElement: A.HtmlElement, HTMLTableRowElement: A.HtmlElement, HTMLTableSectionElement: A.HtmlElement, HTMLTemplateElement: A.HtmlElement, HTMLTextAreaElement: A.HtmlElement, HTMLTimeElement: A.HtmlElement, HTMLTitleElement: A.HtmlElement, HTMLTrackElement: A.HtmlElement, HTMLUListElement: A.HtmlElement, HTMLUnknownElement: A.HtmlElement, HTMLDirectoryElement: A.HtmlElement, HTMLFontElement: A.HtmlElement, HTMLFrameElement: A.HtmlElement, HTMLFrameSetElement: A.HtmlElement, HTMLMarqueeElement: A.HtmlElement, HTMLElement: A.HtmlElement, AccessibleNodeList: A.AccessibleNodeList, HTMLAnchorElement: A.AnchorElement, HTMLAreaElement: A.AreaElement, Blob: A.Blob, HTMLBodyElement: A.BodyElement, HTMLCanvasElement: A.CanvasElement, CDATASection: A.CharacterData, CharacterData: A.CharacterData, Comment: A.CharacterData, ProcessingInstruction: A.CharacterData, Text: A.CharacterData, CSSPerspective: A.CssPerspective, CSSCharsetRule: A.CssRule, CSSConditionRule: A.CssRule, CSSFontFaceRule: A.CssRule, CSSGroupingRule: A.CssRule, CSSImportRule: A.CssRule, CSSKeyframeRule: A.CssRule, MozCSSKeyframeRule: A.CssRule, WebKitCSSKeyframeRule: A.CssRule, CSSKeyframesRule: A.CssRule, MozCSSKeyframesRule: A.CssRule, WebKitCSSKeyframesRule: A.CssRule, CSSMediaRule: A.CssRule, CSSNamespaceRule: A.CssRule, CSSPageRule: A.CssRule, CSSRule: A.CssRule, CSSStyleRule: A.CssRule, CSSSupportsRule: A.CssRule, CSSViewportRule: A.CssRule, CSSStyleDeclaration: A.CssStyleDeclaration, MSStyleCSSProperties: A.CssStyleDeclaration, CSS2Properties: A.CssStyleDeclaration, CSSImageValue: A.CssStyleValue, CSSKeywordValue: A.CssStyleValue, CSSNumericValue: A.CssStyleValue, CSSPositionValue: A.CssStyleValue, CSSResourceValue: A.CssStyleValue, CSSUnitValue: A.CssStyleValue, CSSURLImageValue: A.CssStyleValue, CSSStyleValue: A.CssStyleValue, CSSMatrixComponent: A.CssTransformComponent, CSSRotation: A.CssTransformComponent, CSSScale: A.CssTransformComponent, CSSSkew: A.CssTransformComponent, CSSTranslation: A.CssTransformComponent, CSSTransformComponent: A.CssTransformComponent, CSSTransformValue: A.CssTransformValue, CSSUnparsedValue: A.CssUnparsedValue, DataTransferItemList: A.DataTransferItemList, DOMException: A.DomException, ClientRectList: A.DomRectList, DOMRectList: A.DomRectList, DOMRectReadOnly: A.DomRectReadOnly, DOMStringList: A.DomStringList, DOMTokenList: A.DomTokenList, Element: A.Element, AbortPaymentEvent: A.Event, AnimationEvent: A.Event, AnimationPlaybackEvent: A.Event, ApplicationCacheErrorEvent: A.Event, BackgroundFetchClickEvent: A.Event, BackgroundFetchEvent: A.Event, BackgroundFetchFailEvent: A.Event, BackgroundFetchedEvent: A.Event, BeforeInstallPromptEvent: A.Event, BeforeUnloadEvent: A.Event, BlobEvent: A.Event, CanMakePaymentEvent: A.Event, ClipboardEvent: A.Event, CloseEvent: A.Event, CustomEvent: A.Event, DeviceMotionEvent: A.Event, DeviceOrientationEvent: A.Event, ErrorEvent: A.Event, ExtendableEvent: A.Event, ExtendableMessageEvent: A.Event, FetchEvent: A.Event, FontFaceSetLoadEvent: A.Event, ForeignFetchEvent: A.Event, GamepadEvent: A.Event, HashChangeEvent: A.Event, InstallEvent: A.Event, MediaEncryptedEvent: A.Event, MediaKeyMessageEvent: A.Event, MediaQueryListEvent: A.Event, MediaStreamEvent: A.Event, MediaStreamTrackEvent: A.Event, MessageEvent: A.Event, MIDIConnectionEvent: A.Event, MIDIMessageEvent: A.Event, MutationEvent: A.Event, NotificationEvent: A.Event, PageTransitionEvent: A.Event, PaymentRequestEvent: A.Event, PaymentRequestUpdateEvent: A.Event, PopStateEvent: A.Event, PresentationConnectionAvailableEvent: A.Event, PresentationConnectionCloseEvent: A.Event, ProgressEvent: A.Event, PromiseRejectionEvent: A.Event, PushEvent: A.Event, RTCDataChannelEvent: A.Event, RTCDTMFToneChangeEvent: A.Event, RTCPeerConnectionIceEvent: A.Event, RTCTrackEvent: A.Event, SecurityPolicyViolationEvent: A.Event, SensorErrorEvent: A.Event, SpeechRecognitionError: A.Event, SpeechRecognitionEvent: A.Event, SpeechSynthesisEvent: A.Event, StorageEvent: A.Event, SyncEvent: A.Event, TrackEvent: A.Event, TransitionEvent: A.Event, WebKitTransitionEvent: A.Event, VRDeviceEvent: A.Event, VRDisplayEvent: A.Event, VRSessionEvent: A.Event, MojoInterfaceRequestEvent: A.Event, ResourceProgressEvent: A.Event, USBConnectionEvent: A.Event, IDBVersionChangeEvent: A.Event, AudioProcessingEvent: A.Event, OfflineAudioCompletionEvent: A.Event, WebGLContextEvent: A.Event, Event: A.Event, InputEvent: A.Event, SubmitEvent: A.Event, AbsoluteOrientationSensor: A.EventTarget, Accelerometer: A.EventTarget, AccessibleNode: A.EventTarget, AmbientLightSensor: A.EventTarget, Animation: A.EventTarget, ApplicationCache: A.EventTarget, DOMApplicationCache: A.EventTarget, OfflineResourceList: A.EventTarget, BackgroundFetchRegistration: A.EventTarget, BatteryManager: A.EventTarget, BroadcastChannel: A.EventTarget, CanvasCaptureMediaStreamTrack: A.EventTarget, DedicatedWorkerGlobalScope: A.EventTarget, EventSource: A.EventTarget, FileReader: A.EventTarget, FontFaceSet: A.EventTarget, Gyroscope: A.EventTarget, XMLHttpRequest: A.EventTarget, XMLHttpRequestEventTarget: A.EventTarget, XMLHttpRequestUpload: A.EventTarget, LinearAccelerationSensor: A.EventTarget, Magnetometer: A.EventTarget, MediaDevices: A.EventTarget, MediaKeySession: A.EventTarget, MediaQueryList: A.EventTarget, MediaRecorder: A.EventTarget, MediaSource: A.EventTarget, MediaStream: A.EventTarget, MediaStreamTrack: A.EventTarget, MessagePort: A.EventTarget, MIDIAccess: A.EventTarget, MIDIInput: A.EventTarget, MIDIOutput: A.EventTarget, MIDIPort: A.EventTarget, NetworkInformation: A.EventTarget, Notification: A.EventTarget, OffscreenCanvas: A.EventTarget, OrientationSensor: A.EventTarget, PaymentRequest: A.EventTarget, Performance: A.EventTarget, PermissionStatus: A.EventTarget, PresentationAvailability: A.EventTarget, PresentationConnection: A.EventTarget, PresentationConnectionList: A.EventTarget, PresentationRequest: A.EventTarget, RelativeOrientationSensor: A.EventTarget, RemotePlayback: A.EventTarget, RTCDataChannel: A.EventTarget, DataChannel: A.EventTarget, RTCDTMFSender: A.EventTarget, RTCPeerConnection: A.EventTarget, webkitRTCPeerConnection: A.EventTarget, mozRTCPeerConnection: A.EventTarget, ScreenOrientation: A.EventTarget, Sensor: A.EventTarget, ServiceWorker: A.EventTarget, ServiceWorkerContainer: A.EventTarget, ServiceWorkerGlobalScope: A.EventTarget, ServiceWorkerRegistration: A.EventTarget, SharedWorker: A.EventTarget, SharedWorkerGlobalScope: A.EventTarget, SpeechRecognition: A.EventTarget, SpeechSynthesis: A.EventTarget, SpeechSynthesisUtterance: A.EventTarget, VR: A.EventTarget, VRDevice: A.EventTarget, VRDisplay: A.EventTarget, VRSession: A.EventTarget, VisualViewport: A.EventTarget, WebSocket: A.EventTarget, Worker: A.EventTarget, WorkerGlobalScope: A.EventTarget, WorkerPerformance: A.EventTarget, BluetoothDevice: A.EventTarget, BluetoothRemoteGATTCharacteristic: A.EventTarget, Clipboard: A.EventTarget, MojoInterfaceInterceptor: A.EventTarget, USB: A.EventTarget, IDBDatabase: A.EventTarget, IDBOpenDBRequest: A.EventTarget, IDBVersionChangeRequest: A.EventTarget, IDBRequest: A.EventTarget, IDBTransaction: A.EventTarget, AnalyserNode: A.EventTarget, RealtimeAnalyserNode: A.EventTarget, AudioBufferSourceNode: A.EventTarget, AudioDestinationNode: A.EventTarget, AudioNode: A.EventTarget, AudioScheduledSourceNode: A.EventTarget, AudioWorkletNode: A.EventTarget, BiquadFilterNode: A.EventTarget, ChannelMergerNode: A.EventTarget, AudioChannelMerger: A.EventTarget, ChannelSplitterNode: A.EventTarget, AudioChannelSplitter: A.EventTarget, ConstantSourceNode: A.EventTarget, ConvolverNode: A.EventTarget, DelayNode: A.EventTarget, DynamicsCompressorNode: A.EventTarget, GainNode: A.EventTarget, AudioGainNode: A.EventTarget, IIRFilterNode: A.EventTarget, MediaElementAudioSourceNode: A.EventTarget, MediaStreamAudioDestinationNode: A.EventTarget, MediaStreamAudioSourceNode: A.EventTarget, OscillatorNode: A.EventTarget, Oscillator: A.EventTarget, PannerNode: A.EventTarget, AudioPannerNode: A.EventTarget, webkitAudioPannerNode: A.EventTarget, ScriptProcessorNode: A.EventTarget, JavaScriptAudioNode: A.EventTarget, StereoPannerNode: A.EventTarget, WaveShaperNode: A.EventTarget, EventTarget: A.EventTarget, File: A.File, FileList: A.FileList, FileWriter: A.FileWriter, HTMLFormElement: A.FormElement, Gamepad: A.Gamepad, History: A.History, HTMLCollection: A.HtmlCollection, HTMLFormControlsCollection: A.HtmlCollection, HTMLOptionsCollection: A.HtmlCollection, HTMLImageElement: A.ImageElement, KeyboardEvent: A.KeyboardEvent, Location: A.Location, HTMLAudioElement: A.MediaElement, HTMLMediaElement: A.MediaElement, MediaList: A.MediaList, MIDIInputMap: A.MidiInputMap, MIDIOutputMap: A.MidiOutputMap, MimeType: A.MimeType, MimeTypeArray: A.MimeTypeArray, Document: A.Node, DocumentFragment: A.Node, HTMLDocument: A.Node, ShadowRoot: A.Node, XMLDocument: A.Node, Attr: A.Node, DocumentType: A.Node, Node: A.Node, NodeList: A.NodeList, RadioNodeList: A.NodeList, Plugin: A.Plugin, PluginArray: A.PluginArray, RTCStatsReport: A.RtcStatsReport, HTMLSelectElement: A.SelectElement, SourceBuffer: A.SourceBuffer, SourceBufferList: A.SourceBufferList, SpeechGrammar: A.SpeechGrammar, SpeechGrammarList: A.SpeechGrammarList, SpeechRecognitionResult: A.SpeechRecognitionResult, Storage: A.Storage, CSSStyleSheet: A.StyleSheet, StyleSheet: A.StyleSheet, TextTrack: A.TextTrack, TextTrackCue: A.TextTrackCue, VTTCue: A.TextTrackCue, TextTrackCueList: A.TextTrackCueList, TextTrackList: A.TextTrackList, TimeRanges: A.TimeRanges, Touch: A.Touch, TouchList: A.TouchList, TrackDefaultList: A.TrackDefaultList, CompositionEvent: A.UIEvent, FocusEvent: A.UIEvent, MouseEvent: A.UIEvent, DragEvent: A.UIEvent, PointerEvent: A.UIEvent, TextEvent: A.UIEvent, TouchEvent: A.UIEvent, WheelEvent: A.UIEvent, UIEvent: A.UIEvent, URL: A.Url, HTMLVideoElement: A.VideoElement, VideoTrackList: A.VideoTrackList, Window: A.Window, DOMWindow: A.Window, CSSRuleList: A._CssRuleList, ClientRect: A._DomRect, DOMRect: A._DomRect, GamepadList: A._GamepadList, NamedNodeMap: A._NamedNodeMap, MozNamedAttrMap: A._NamedNodeMap, SpeechRecognitionResultList: A._SpeechRecognitionResultList, StyleSheetList: A._StyleSheetList, SVGLength: A.Length, SVGLengthList: A.LengthList, SVGNumber: A.Number, SVGNumberList: A.NumberList, SVGPointList: A.PointList, SVGStringList: A.StringList, SVGAElement: A.SvgElement, SVGAnimateElement: A.SvgElement, SVGAnimateMotionElement: A.SvgElement, SVGAnimateTransformElement: A.SvgElement, SVGAnimationElement: A.SvgElement, SVGCircleElement: A.SvgElement, SVGClipPathElement: A.SvgElement, SVGDefsElement: A.SvgElement, SVGDescElement: A.SvgElement, SVGDiscardElement: A.SvgElement, SVGEllipseElement: A.SvgElement, SVGFEBlendElement: A.SvgElement, SVGFEColorMatrixElement: A.SvgElement, SVGFEComponentTransferElement: A.SvgElement, SVGFECompositeElement: A.SvgElement, SVGFEConvolveMatrixElement: A.SvgElement, SVGFEDiffuseLightingElement: A.SvgElement, SVGFEDisplacementMapElement: A.SvgElement, SVGFEDistantLightElement: A.SvgElement, SVGFEFloodElement: A.SvgElement, SVGFEFuncAElement: A.SvgElement, SVGFEFuncBElement: A.SvgElement, SVGFEFuncGElement: A.SvgElement, SVGFEFuncRElement: A.SvgElement, SVGFEGaussianBlurElement: A.SvgElement, SVGFEImageElement: A.SvgElement, SVGFEMergeElement: A.SvgElement, SVGFEMergeNodeElement: A.SvgElement, SVGFEMorphologyElement: A.SvgElement, SVGFEOffsetElement: A.SvgElement, SVGFEPointLightElement: A.SvgElement, SVGFESpecularLightingElement: A.SvgElement, SVGFESpotLightElement: A.SvgElement, SVGFETileElement: A.SvgElement, SVGFETurbulenceElement: A.SvgElement, SVGFilterElement: A.SvgElement, SVGForeignObjectElement: A.SvgElement, SVGGElement: A.SvgElement, SVGGeometryElement: A.SvgElement, SVGGraphicsElement: A.SvgElement, SVGImageElement: A.SvgElement, SVGLineElement: A.SvgElement, SVGLinearGradientElement: A.SvgElement, SVGMarkerElement: A.SvgElement, SVGMaskElement: A.SvgElement, SVGMetadataElement: A.SvgElement, SVGPathElement: A.SvgElement, SVGPatternElement: A.SvgElement, SVGPolygonElement: A.SvgElement, SVGPolylineElement: A.SvgElement, SVGRadialGradientElement: A.SvgElement, SVGRectElement: A.SvgElement, SVGScriptElement: A.SvgElement, SVGSetElement: A.SvgElement, SVGStopElement: A.SvgElement, SVGStyleElement: A.SvgElement, SVGElement: A.SvgElement, SVGSVGElement: A.SvgElement, SVGSwitchElement: A.SvgElement, SVGSymbolElement: A.SvgElement, SVGTSpanElement: A.SvgElement, SVGTextContentElement: A.SvgElement, SVGTextElement: A.SvgElement, SVGTextPathElement: A.SvgElement, SVGTextPositioningElement: A.SvgElement, SVGTitleElement: A.SvgElement, SVGUseElement: A.SvgElement, SVGViewElement: A.SvgElement, SVGGradientElement: A.SvgElement, SVGComponentTransferFunctionElement: A.SvgElement, SVGFEDropShadowElement: A.SvgElement, SVGMPathElement: A.SvgElement, SVGTransform: A.Transform, SVGTransformList: A.TransformList, AudioBuffer: A.AudioBuffer, AudioParamMap: A.AudioParamMap, AudioTrackList: A.AudioTrackList, AudioContext: A.BaseAudioContext, webkitAudioContext: A.BaseAudioContext, BaseAudioContext: A.BaseAudioContext, OfflineAudioContext: A.OfflineAudioContext, WebGLBuffer: A.Buffer, WebGLProgram: A.Program, WebGL2RenderingContext: A.RenderingContext2, WebGLTexture: A.Texture, WebGLUniformLocation: A.UniformLocation, WebGLVertexArrayObject: A.VertexArrayObject, SQLResultSetRowList: A.SqlResultSetRowList});
    hunkHelpers.setOrUpdateLeafTags({ArrayBuffer: true, AnimationEffectReadOnly: true, AnimationEffectTiming: true, AnimationEffectTimingReadOnly: true, AnimationTimeline: true, AnimationWorkletGlobalScope: true, AuthenticatorAssertionResponse: true, AuthenticatorAttestationResponse: true, AuthenticatorResponse: true, BackgroundFetchFetch: true, BackgroundFetchManager: true, BackgroundFetchSettledFetch: true, BarProp: true, BarcodeDetector: true, BluetoothRemoteGATTDescriptor: true, Body: true, BudgetState: true, CacheStorage: true, CanvasGradient: true, CanvasPattern: true, CanvasRenderingContext2D: true, Client: true, Clients: true, CookieStore: true, Coordinates: true, Credential: true, CredentialUserData: true, CredentialsContainer: true, Crypto: true, CryptoKey: true, CSS: true, CSSVariableReferenceValue: true, CustomElementRegistry: true, DataTransfer: true, DataTransferItem: true, DeprecatedStorageInfo: true, DeprecatedStorageQuota: true, DeprecationReport: true, DetectedBarcode: true, DetectedFace: true, DetectedText: true, DeviceAcceleration: true, DeviceRotationRate: true, DirectoryEntry: true, DirectoryReader: true, DocumentOrShadowRoot: true, DocumentTimeline: true, DOMError: true, DOMImplementation: true, Iterator: true, DOMMatrix: true, DOMMatrixReadOnly: true, DOMParser: true, DOMPoint: true, DOMPointReadOnly: true, DOMQuad: true, DOMStringMap: true, Entry: true, External: true, FaceDetector: true, FederatedCredential: true, FileEntry: true, DOMFileSystem: true, FontFace: true, FontFaceSource: true, FormData: true, GamepadButton: true, GamepadPose: true, Geolocation: true, Position: true, GeolocationPosition: true, Headers: true, HTMLHyperlinkElementUtils: true, IdleDeadline: true, ImageBitmap: true, ImageBitmapRenderingContext: true, ImageCapture: true, ImageData: true, InputDeviceCapabilities: true, IntersectionObserver: true, IntersectionObserverEntry: true, InterventionReport: true, KeyframeEffect: true, KeyframeEffectReadOnly: true, MediaCapabilities: true, MediaCapabilitiesInfo: true, MediaDeviceInfo: true, MediaError: true, MediaKeyStatusMap: true, MediaKeySystemAccess: true, MediaKeys: true, MediaKeysPolicy: true, MediaMetadata: true, MediaSession: true, MediaSettingsRange: true, MemoryInfo: true, MessageChannel: true, Metadata: true, MutationObserver: true, WebKitMutationObserver: true, MutationRecord: true, NavigationPreloadManager: true, Navigator: true, NavigatorAutomationInformation: true, NavigatorConcurrentHardware: true, NavigatorCookies: true, NavigatorUserMediaError: true, NodeFilter: true, NodeIterator: true, NonDocumentTypeChildNode: true, NonElementParentNode: true, NoncedElement: true, OffscreenCanvasRenderingContext2D: true, OverconstrainedError: true, PaintRenderingContext2D: true, PaintSize: true, PaintWorkletGlobalScope: true, PasswordCredential: true, Path2D: true, PaymentAddress: true, PaymentInstruments: true, PaymentManager: true, PaymentResponse: true, PerformanceEntry: true, PerformanceLongTaskTiming: true, PerformanceMark: true, PerformanceMeasure: true, PerformanceNavigation: true, PerformanceNavigationTiming: true, PerformanceObserver: true, PerformanceObserverEntryList: true, PerformancePaintTiming: true, PerformanceResourceTiming: true, PerformanceServerTiming: true, PerformanceTiming: true, Permissions: true, PhotoCapabilities: true, PositionError: true, GeolocationPositionError: true, Presentation: true, PresentationReceiver: true, PublicKeyCredential: true, PushManager: true, PushMessageData: true, PushSubscription: true, PushSubscriptionOptions: true, Range: true, RelatedApplication: true, ReportBody: true, ReportingObserver: true, ResizeObserver: true, ResizeObserverEntry: true, RTCCertificate: true, RTCIceCandidate: true, mozRTCIceCandidate: true, RTCLegacyStatsReport: true, RTCRtpContributingSource: true, RTCRtpReceiver: true, RTCRtpSender: true, RTCSessionDescription: true, mozRTCSessionDescription: true, RTCStatsResponse: true, Screen: true, ScrollState: true, ScrollTimeline: true, Selection: true, SharedArrayBuffer: true, SpeechRecognitionAlternative: true, SpeechSynthesisVoice: true, StaticRange: true, StorageManager: true, StyleMedia: true, StylePropertyMap: true, StylePropertyMapReadonly: true, SyncManager: true, TaskAttributionTiming: true, TextDetector: true, TextMetrics: true, TrackDefault: true, TreeWalker: true, TrustedHTML: true, TrustedScriptURL: true, TrustedURL: true, UnderlyingSourceBase: true, URLSearchParams: true, VRCoordinateSystem: true, VRDisplayCapabilities: true, VREyeParameters: true, VRFrameData: true, VRFrameOfReference: true, VRPose: true, VRStageBounds: true, VRStageBoundsPoint: true, VRStageParameters: true, ValidityState: true, VideoPlaybackQuality: true, VideoTrack: true, VTTRegion: true, WindowClient: true, WorkletAnimation: true, WorkletGlobalScope: true, XPathEvaluator: true, XPathExpression: true, XPathNSResolver: true, XPathResult: true, XMLSerializer: true, XSLTProcessor: true, Bluetooth: true, BluetoothCharacteristicProperties: true, BluetoothRemoteGATTServer: true, BluetoothRemoteGATTService: true, BluetoothUUID: true, BudgetService: true, Cache: true, DOMFileSystemSync: true, DirectoryEntrySync: true, DirectoryReaderSync: true, EntrySync: true, FileEntrySync: true, FileReaderSync: true, FileWriterSync: true, HTMLAllCollection: true, Mojo: true, MojoHandle: true, MojoWatcher: true, NFC: true, PagePopupController: true, Report: true, Request: true, Response: true, SubtleCrypto: true, USBAlternateInterface: true, USBConfiguration: true, USBDevice: true, USBEndpoint: true, USBInTransferResult: true, USBInterface: true, USBIsochronousInTransferPacket: true, USBIsochronousInTransferResult: true, USBIsochronousOutTransferPacket: true, USBIsochronousOutTransferResult: true, USBOutTransferResult: true, WorkerLocation: true, WorkerNavigator: true, Worklet: true, IDBCursor: true, IDBCursorWithValue: true, IDBFactory: true, IDBIndex: true, IDBKeyRange: true, IDBObjectStore: true, IDBObservation: true, IDBObserver: true, IDBObserverChanges: true, SVGAngle: true, SVGAnimatedAngle: true, SVGAnimatedBoolean: true, SVGAnimatedEnumeration: true, SVGAnimatedInteger: true, SVGAnimatedLength: true, SVGAnimatedLengthList: true, SVGAnimatedNumber: true, SVGAnimatedNumberList: true, SVGAnimatedPreserveAspectRatio: true, SVGAnimatedRect: true, SVGAnimatedString: true, SVGAnimatedTransformList: true, SVGMatrix: true, SVGPoint: true, SVGPreserveAspectRatio: true, SVGRect: true, SVGUnitTypes: true, AudioListener: true, AudioParam: true, AudioTrack: true, AudioWorkletGlobalScope: true, AudioWorkletProcessor: true, PeriodicWave: true, WebGLActiveInfo: true, ANGLEInstancedArrays: true, ANGLE_instanced_arrays: true, WebGLCanvas: true, WebGLColorBufferFloat: true, WebGLCompressedTextureASTC: true, WebGLCompressedTextureATC: true, WEBGL_compressed_texture_atc: true, WebGLCompressedTextureETC1: true, WEBGL_compressed_texture_etc1: true, WebGLCompressedTextureETC: true, WebGLCompressedTexturePVRTC: true, WEBGL_compressed_texture_pvrtc: true, WebGLCompressedTextureS3TC: true, WEBGL_compressed_texture_s3tc: true, WebGLCompressedTextureS3TCsRGB: true, WebGLDebugRendererInfo: true, WEBGL_debug_renderer_info: true, WebGLDebugShaders: true, WEBGL_debug_shaders: true, WebGLDepthTexture: true, WEBGL_depth_texture: true, WebGLDrawBuffers: true, WEBGL_draw_buffers: true, EXTsRGB: true, EXT_sRGB: true, EXTBlendMinMax: true, EXT_blend_minmax: true, EXTColorBufferFloat: true, EXTColorBufferHalfFloat: true, EXTDisjointTimerQuery: true, EXTDisjointTimerQueryWebGL2: true, EXTFragDepth: true, EXT_frag_depth: true, EXTShaderTextureLOD: true, EXT_shader_texture_lod: true, EXTTextureFilterAnisotropic: true, EXT_texture_filter_anisotropic: true, WebGLFramebuffer: true, WebGLGetBufferSubDataAsync: true, WebGLLoseContext: true, WebGLExtensionLoseContext: true, WEBGL_lose_context: true, OESElementIndexUint: true, OES_element_index_uint: true, OESStandardDerivatives: true, OES_standard_derivatives: true, OESTextureFloat: true, OES_texture_float: true, OESTextureFloatLinear: true, OES_texture_float_linear: true, OESTextureHalfFloat: true, OES_texture_half_float: true, OESTextureHalfFloatLinear: true, OES_texture_half_float_linear: true, OESVertexArrayObject: true, OES_vertex_array_object: true, WebGLQuery: true, WebGLRenderbuffer: true, WebGLRenderingContext: true, WebGLSampler: true, WebGLShader: true, WebGLShaderPrecisionFormat: true, WebGLSync: true, WebGLTimerQueryEXT: true, WebGLTransformFeedback: true, WebGLVertexArrayObjectOES: true, WebGL: true, WebGL2RenderingContextBase: true, Database: true, SQLError: true, SQLResultSet: true, SQLTransaction: true, DataView: true, ArrayBufferView: false, Float64Array: true, Float32Array: true, Int16Array: true, Int32Array: true, Int8Array: true, Uint16Array: true, Uint32Array: true, Uint8ClampedArray: true, CanvasPixelArray: true, Uint8Array: false, HTMLBRElement: true, HTMLBaseElement: true, HTMLButtonElement: true, HTMLContentElement: true, HTMLDListElement: true, HTMLDataElement: true, HTMLDataListElement: true, HTMLDetailsElement: true, HTMLDialogElement: true, HTMLDivElement: true, HTMLEmbedElement: true, HTMLFieldSetElement: true, HTMLHRElement: true, HTMLHeadElement: true, HTMLHeadingElement: true, HTMLHtmlElement: true, HTMLIFrameElement: true, HTMLInputElement: true, HTMLLIElement: true, HTMLLabelElement: true, HTMLLegendElement: true, HTMLLinkElement: true, HTMLMapElement: true, HTMLMenuElement: true, HTMLMetaElement: true, HTMLMeterElement: true, HTMLModElement: true, HTMLOListElement: true, HTMLObjectElement: true, HTMLOptGroupElement: true, HTMLOptionElement: true, HTMLOutputElement: true, HTMLParagraphElement: true, HTMLParamElement: true, HTMLPictureElement: true, HTMLPreElement: true, HTMLProgressElement: true, HTMLQuoteElement: true, HTMLScriptElement: true, HTMLShadowElement: true, HTMLSlotElement: true, HTMLSourceElement: true, HTMLSpanElement: true, HTMLStyleElement: true, HTMLTableCaptionElement: true, HTMLTableCellElement: true, HTMLTableDataCellElement: true, HTMLTableHeaderCellElement: true, HTMLTableColElement: true, HTMLTableElement: true, HTMLTableRowElement: true, HTMLTableSectionElement: true, HTMLTemplateElement: true, HTMLTextAreaElement: true, HTMLTimeElement: true, HTMLTitleElement: true, HTMLTrackElement: true, HTMLUListElement: true, HTMLUnknownElement: true, HTMLDirectoryElement: true, HTMLFontElement: true, HTMLFrameElement: true, HTMLFrameSetElement: true, HTMLMarqueeElement: true, HTMLElement: false, AccessibleNodeList: true, HTMLAnchorElement: true, HTMLAreaElement: true, Blob: false, HTMLBodyElement: true, HTMLCanvasElement: true, CDATASection: true, CharacterData: true, Comment: true, ProcessingInstruction: true, Text: true, CSSPerspective: true, CSSCharsetRule: true, CSSConditionRule: true, CSSFontFaceRule: true, CSSGroupingRule: true, CSSImportRule: true, CSSKeyframeRule: true, MozCSSKeyframeRule: true, WebKitCSSKeyframeRule: true, CSSKeyframesRule: true, MozCSSKeyframesRule: true, WebKitCSSKeyframesRule: true, CSSMediaRule: true, CSSNamespaceRule: true, CSSPageRule: true, CSSRule: true, CSSStyleRule: true, CSSSupportsRule: true, CSSViewportRule: true, CSSStyleDeclaration: true, MSStyleCSSProperties: true, CSS2Properties: true, CSSImageValue: true, CSSKeywordValue: true, CSSNumericValue: true, CSSPositionValue: true, CSSResourceValue: true, CSSUnitValue: true, CSSURLImageValue: true, CSSStyleValue: false, CSSMatrixComponent: true, CSSRotation: true, CSSScale: true, CSSSkew: true, CSSTranslation: true, CSSTransformComponent: false, CSSTransformValue: true, CSSUnparsedValue: true, DataTransferItemList: true, DOMException: true, ClientRectList: true, DOMRectList: true, DOMRectReadOnly: false, DOMStringList: true, DOMTokenList: true, Element: false, AbortPaymentEvent: true, AnimationEvent: true, AnimationPlaybackEvent: true, ApplicationCacheErrorEvent: true, BackgroundFetchClickEvent: true, BackgroundFetchEvent: true, BackgroundFetchFailEvent: true, BackgroundFetchedEvent: true, BeforeInstallPromptEvent: true, BeforeUnloadEvent: true, BlobEvent: true, CanMakePaymentEvent: true, ClipboardEvent: true, CloseEvent: true, CustomEvent: true, DeviceMotionEvent: true, DeviceOrientationEvent: true, ErrorEvent: true, ExtendableEvent: true, ExtendableMessageEvent: true, FetchEvent: true, FontFaceSetLoadEvent: true, ForeignFetchEvent: true, GamepadEvent: true, HashChangeEvent: true, InstallEvent: true, MediaEncryptedEvent: true, MediaKeyMessageEvent: true, MediaQueryListEvent: true, MediaStreamEvent: true, MediaStreamTrackEvent: true, MessageEvent: true, MIDIConnectionEvent: true, MIDIMessageEvent: true, MutationEvent: true, NotificationEvent: true, PageTransitionEvent: true, PaymentRequestEvent: true, PaymentRequestUpdateEvent: true, PopStateEvent: true, PresentationConnectionAvailableEvent: true, PresentationConnectionCloseEvent: true, ProgressEvent: true, PromiseRejectionEvent: true, PushEvent: true, RTCDataChannelEvent: true, RTCDTMFToneChangeEvent: true, RTCPeerConnectionIceEvent: true, RTCTrackEvent: true, SecurityPolicyViolationEvent: true, SensorErrorEvent: true, SpeechRecognitionError: true, SpeechRecognitionEvent: true, SpeechSynthesisEvent: true, StorageEvent: true, SyncEvent: true, TrackEvent: true, TransitionEvent: true, WebKitTransitionEvent: true, VRDeviceEvent: true, VRDisplayEvent: true, VRSessionEvent: true, MojoInterfaceRequestEvent: true, ResourceProgressEvent: true, USBConnectionEvent: true, IDBVersionChangeEvent: true, AudioProcessingEvent: true, OfflineAudioCompletionEvent: true, WebGLContextEvent: true, Event: false, InputEvent: false, SubmitEvent: false, AbsoluteOrientationSensor: true, Accelerometer: true, AccessibleNode: true, AmbientLightSensor: true, Animation: true, ApplicationCache: true, DOMApplicationCache: true, OfflineResourceList: true, BackgroundFetchRegistration: true, BatteryManager: true, BroadcastChannel: true, CanvasCaptureMediaStreamTrack: true, DedicatedWorkerGlobalScope: true, EventSource: true, FileReader: true, FontFaceSet: true, Gyroscope: true, XMLHttpRequest: true, XMLHttpRequestEventTarget: true, XMLHttpRequestUpload: true, LinearAccelerationSensor: true, Magnetometer: true, MediaDevices: true, MediaKeySession: true, MediaQueryList: true, MediaRecorder: true, MediaSource: true, MediaStream: true, MediaStreamTrack: true, MessagePort: true, MIDIAccess: true, MIDIInput: true, MIDIOutput: true, MIDIPort: true, NetworkInformation: true, Notification: true, OffscreenCanvas: true, OrientationSensor: true, PaymentRequest: true, Performance: true, PermissionStatus: true, PresentationAvailability: true, PresentationConnection: true, PresentationConnectionList: true, PresentationRequest: true, RelativeOrientationSensor: true, RemotePlayback: true, RTCDataChannel: true, DataChannel: true, RTCDTMFSender: true, RTCPeerConnection: true, webkitRTCPeerConnection: true, mozRTCPeerConnection: true, ScreenOrientation: true, Sensor: true, ServiceWorker: true, ServiceWorkerContainer: true, ServiceWorkerGlobalScope: true, ServiceWorkerRegistration: true, SharedWorker: true, SharedWorkerGlobalScope: true, SpeechRecognition: true, SpeechSynthesis: true, SpeechSynthesisUtterance: true, VR: true, VRDevice: true, VRDisplay: true, VRSession: true, VisualViewport: true, WebSocket: true, Worker: true, WorkerGlobalScope: true, WorkerPerformance: true, BluetoothDevice: true, BluetoothRemoteGATTCharacteristic: true, Clipboard: true, MojoInterfaceInterceptor: true, USB: true, IDBDatabase: true, IDBOpenDBRequest: true, IDBVersionChangeRequest: true, IDBRequest: true, IDBTransaction: true, AnalyserNode: true, RealtimeAnalyserNode: true, AudioBufferSourceNode: true, AudioDestinationNode: true, AudioNode: true, AudioScheduledSourceNode: true, AudioWorkletNode: true, BiquadFilterNode: true, ChannelMergerNode: true, AudioChannelMerger: true, ChannelSplitterNode: true, AudioChannelSplitter: true, ConstantSourceNode: true, ConvolverNode: true, DelayNode: true, DynamicsCompressorNode: true, GainNode: true, AudioGainNode: true, IIRFilterNode: true, MediaElementAudioSourceNode: true, MediaStreamAudioDestinationNode: true, MediaStreamAudioSourceNode: true, OscillatorNode: true, Oscillator: true, PannerNode: true, AudioPannerNode: true, webkitAudioPannerNode: true, ScriptProcessorNode: true, JavaScriptAudioNode: true, StereoPannerNode: true, WaveShaperNode: true, EventTarget: false, File: true, FileList: true, FileWriter: true, HTMLFormElement: true, Gamepad: true, History: true, HTMLCollection: true, HTMLFormControlsCollection: true, HTMLOptionsCollection: true, HTMLImageElement: true, KeyboardEvent: true, Location: true, HTMLAudioElement: true, HTMLMediaElement: false, MediaList: true, MIDIInputMap: true, MIDIOutputMap: true, MimeType: true, MimeTypeArray: true, Document: true, DocumentFragment: true, HTMLDocument: true, ShadowRoot: true, XMLDocument: true, Attr: true, DocumentType: true, Node: false, NodeList: true, RadioNodeList: true, Plugin: true, PluginArray: true, RTCStatsReport: true, HTMLSelectElement: true, SourceBuffer: true, SourceBufferList: true, SpeechGrammar: true, SpeechGrammarList: true, SpeechRecognitionResult: true, Storage: true, CSSStyleSheet: true, StyleSheet: true, TextTrack: true, TextTrackCue: true, VTTCue: true, TextTrackCueList: true, TextTrackList: true, TimeRanges: true, Touch: true, TouchList: true, TrackDefaultList: true, CompositionEvent: true, FocusEvent: true, MouseEvent: true, DragEvent: true, PointerEvent: true, TextEvent: true, TouchEvent: true, WheelEvent: true, UIEvent: false, URL: true, HTMLVideoElement: true, VideoTrackList: true, Window: true, DOMWindow: true, CSSRuleList: true, ClientRect: true, DOMRect: true, GamepadList: true, NamedNodeMap: true, MozNamedAttrMap: true, SpeechRecognitionResultList: true, StyleSheetList: true, SVGLength: true, SVGLengthList: true, SVGNumber: true, SVGNumberList: true, SVGPointList: true, SVGStringList: true, SVGAElement: true, SVGAnimateElement: true, SVGAnimateMotionElement: true, SVGAnimateTransformElement: true, SVGAnimationElement: true, SVGCircleElement: true, SVGClipPathElement: true, SVGDefsElement: true, SVGDescElement: true, SVGDiscardElement: true, SVGEllipseElement: true, SVGFEBlendElement: true, SVGFEColorMatrixElement: true, SVGFEComponentTransferElement: true, SVGFECompositeElement: true, SVGFEConvolveMatrixElement: true, SVGFEDiffuseLightingElement: true, SVGFEDisplacementMapElement: true, SVGFEDistantLightElement: true, SVGFEFloodElement: true, SVGFEFuncAElement: true, SVGFEFuncBElement: true, SVGFEFuncGElement: true, SVGFEFuncRElement: true, SVGFEGaussianBlurElement: true, SVGFEImageElement: true, SVGFEMergeElement: true, SVGFEMergeNodeElement: true, SVGFEMorphologyElement: true, SVGFEOffsetElement: true, SVGFEPointLightElement: true, SVGFESpecularLightingElement: true, SVGFESpotLightElement: true, SVGFETileElement: true, SVGFETurbulenceElement: true, SVGFilterElement: true, SVGForeignObjectElement: true, SVGGElement: true, SVGGeometryElement: true, SVGGraphicsElement: true, SVGImageElement: true, SVGLineElement: true, SVGLinearGradientElement: true, SVGMarkerElement: true, SVGMaskElement: true, SVGMetadataElement: true, SVGPathElement: true, SVGPatternElement: true, SVGPolygonElement: true, SVGPolylineElement: true, SVGRadialGradientElement: true, SVGRectElement: true, SVGScriptElement: true, SVGSetElement: true, SVGStopElement: true, SVGStyleElement: true, SVGElement: true, SVGSVGElement: true, SVGSwitchElement: true, SVGSymbolElement: true, SVGTSpanElement: true, SVGTextContentElement: true, SVGTextElement: true, SVGTextPathElement: true, SVGTextPositioningElement: true, SVGTitleElement: true, SVGUseElement: true, SVGViewElement: true, SVGGradientElement: true, SVGComponentTransferFunctionElement: true, SVGFEDropShadowElement: true, SVGMPathElement: true, SVGTransform: true, SVGTransformList: true, AudioBuffer: true, AudioParamMap: true, AudioTrackList: true, AudioContext: true, webkitAudioContext: true, BaseAudioContext: false, OfflineAudioContext: true, WebGLBuffer: true, WebGLProgram: true, WebGL2RenderingContext: true, WebGLTexture: true, WebGLUniformLocation: true, WebGLVertexArrayObject: true, SQLResultSetRowList: true});
    A.NativeTypedArray.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A.NativeTypedArrayOfDouble.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A.NativeTypedArrayOfInt.$nativeSuperclassTag = "ArrayBufferView";
    A._SourceBufferList_EventTarget_ListMixin.$nativeSuperclassTag = "EventTarget";
    A._SourceBufferList_EventTarget_ListMixin_ImmutableListMixin.$nativeSuperclassTag = "EventTarget";
    A._TextTrackList_EventTarget_ListMixin.$nativeSuperclassTag = "EventTarget";
    A._TextTrackList_EventTarget_ListMixin_ImmutableListMixin.$nativeSuperclassTag = "EventTarget";
  })();
  convertAllToFastObject(holders);
  convertToFastObject($);
  (function(callback) {
    if (typeof document === "undefined") {
      callback(null);
      return;
    }
    if (typeof document.currentScript != "undefined") {
      callback(document.currentScript);
      return;
    }
    var scripts = document.scripts;
    function onLoad(event) {
      for (var i = 0; i < scripts.length; ++i)
        scripts[i].removeEventListener("load", onLoad, false);
      callback(event.target);
    }
    for (var i = 0; i < scripts.length; ++i)
      scripts[i].addEventListener("load", onLoad, false);
  })(function(currentScript) {
    init.currentScript = currentScript;
    var callMain = A.main;
    if (typeof dartMainRunner === "function")
      dartMainRunner(callMain, []);
    else
      callMain([]);
  });
})();

//# sourceMappingURL=index.js.map
